{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/arjunpaud/machine_learning/blob/master/linear_regression\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# !pip install -U scikit-learn"
      ],
      "metadata": {
        "id": "relBH84Bhrmv"
      },
      "id": "relBH84Bhrmv",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e2b47a82",
      "metadata": {
        "id": "e2b47a82"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8d89d1a5",
      "metadata": {
        "id": "8d89d1a5",
        "outputId": "67b6f939-c54c-4c7f-ea0e-0c6716b07164",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Years of Experience    Salary\n",
              "0                    5.0   90000.0\n",
              "1                    3.0   65000.0\n",
              "2                   15.0  150000.0\n",
              "3                    7.0   60000.0\n",
              "4                   20.0  200000.0\n",
              "..                   ...       ...\n",
              "370                  8.0   85000.0\n",
              "371                 19.0  170000.0\n",
              "372                  2.0   40000.0\n",
              "373                  7.0   90000.0\n",
              "374                 15.0  150000.0\n",
              "\n",
              "[373 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f4460e30-c2d2-44d7-80b9-fbc20ae5d3b2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Years of Experience</th>\n",
              "      <th>Salary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5.0</td>\n",
              "      <td>90000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3.0</td>\n",
              "      <td>65000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>15.0</td>\n",
              "      <td>150000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>7.0</td>\n",
              "      <td>60000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>20.0</td>\n",
              "      <td>200000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>370</th>\n",
              "      <td>8.0</td>\n",
              "      <td>85000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>371</th>\n",
              "      <td>19.0</td>\n",
              "      <td>170000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>372</th>\n",
              "      <td>2.0</td>\n",
              "      <td>40000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>373</th>\n",
              "      <td>7.0</td>\n",
              "      <td>90000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>374</th>\n",
              "      <td>15.0</td>\n",
              "      <td>150000.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>373 rows Ã— 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f4460e30-c2d2-44d7-80b9-fbc20ae5d3b2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f4460e30-c2d2-44d7-80b9-fbc20ae5d3b2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f4460e30-c2d2-44d7-80b9-fbc20ae5d3b2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7fddea8f-e3f9-4285-8711-708e65e2308b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7fddea8f-e3f9-4285-8711-708e65e2308b')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7fddea8f-e3f9-4285-8711-708e65e2308b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ],
      "source": [
        "dataset = pd.read_csv('/content/Salary Data.csv',usecols = ['Years of Experience','Salary'])\n",
        "dataset = dataset.dropna()\n",
        "dataset"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# dataset[['Years of Experience']]"
      ],
      "metadata": {
        "id": "YVqSjDBJ0Vo_"
      },
      "id": "YVqSjDBJ0Vo_",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# dataset['Years of Experience'].values"
      ],
      "metadata": {
        "id": "mNh6YOvHy5st"
      },
      "id": "mNh6YOvHy5st",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f360a3b2",
      "metadata": {
        "id": "f360a3b2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "48fae04c-015a-4bbd-8b00-6b8b0e506a75"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 5. ],\n",
              "       [ 3. ],\n",
              "       [15. ],\n",
              "       [ 7. ],\n",
              "       [20. ],\n",
              "       [ 2. ],\n",
              "       [12. ],\n",
              "       [ 4. ],\n",
              "       [ 1. ],\n",
              "       [10. ],\n",
              "       [ 3. ],\n",
              "       [18. ],\n",
              "       [ 6. ],\n",
              "       [14. ],\n",
              "       [ 2. ],\n",
              "       [16. ],\n",
              "       [ 7. ],\n",
              "       [12. ],\n",
              "       [ 0. ],\n",
              "       [22. ],\n",
              "       [ 5. ],\n",
              "       [19. ],\n",
              "       [ 2. ],\n",
              "       [ 9. ],\n",
              "       [13. ],\n",
              "       [ 3. ],\n",
              "       [11. ],\n",
              "       [ 1. ],\n",
              "       [15. ],\n",
              "       [ 6. ],\n",
              "       [25. ],\n",
              "       [ 4. ],\n",
              "       [ 3. ],\n",
              "       [10. ],\n",
              "       [20. ],\n",
              "       [ 2. ],\n",
              "       [ 7. ],\n",
              "       [14. ],\n",
              "       [ 1. ],\n",
              "       [21. ],\n",
              "       [ 5. ],\n",
              "       [18. ],\n",
              "       [ 3. ],\n",
              "       [ 8. ],\n",
              "       [13. ],\n",
              "       [ 2. ],\n",
              "       [ 5. ],\n",
              "       [16. ],\n",
              "       [11. ],\n",
              "       [ 0. ],\n",
              "       [22. ],\n",
              "       [ 7. ],\n",
              "       [12. ],\n",
              "       [19. ],\n",
              "       [ 3. ],\n",
              "       [ 9. ],\n",
              "       [ 2. ],\n",
              "       [17. ],\n",
              "       [ 4. ],\n",
              "       [ 7. ],\n",
              "       [23. ],\n",
              "       [ 3. ],\n",
              "       [12. ],\n",
              "       [21. ],\n",
              "       [ 1. ],\n",
              "       [10. ],\n",
              "       [19. ],\n",
              "       [ 5. ],\n",
              "       [ 8. ],\n",
              "       [18. ],\n",
              "       [ 6. ],\n",
              "       [11. ],\n",
              "       [16. ],\n",
              "       [ 2. ],\n",
              "       [14. ],\n",
              "       [10. ],\n",
              "       [22. ],\n",
              "       [ 6. ],\n",
              "       [20. ],\n",
              "       [ 3. ],\n",
              "       [ 8. ],\n",
              "       [13. ],\n",
              "       [ 0. ],\n",
              "       [24. ],\n",
              "       [ 2. ],\n",
              "       [10. ],\n",
              "       [ 2. ],\n",
              "       [15. ],\n",
              "       [21. ],\n",
              "       [ 6. ],\n",
              "       [11. ],\n",
              "       [ 3. ],\n",
              "       [18. ],\n",
              "       [25. ],\n",
              "       [ 7. ],\n",
              "       [12. ],\n",
              "       [22. ],\n",
              "       [ 1. ],\n",
              "       [10. ],\n",
              "       [20. ],\n",
              "       [ 5. ],\n",
              "       [ 8. ],\n",
              "       [19. ],\n",
              "       [ 5. ],\n",
              "       [13. ],\n",
              "       [16. ],\n",
              "       [ 3. ],\n",
              "       [ 7. ],\n",
              "       [14. ],\n",
              "       [ 2. ],\n",
              "       [15. ],\n",
              "       [ 9. ],\n",
              "       [22. ],\n",
              "       [ 6. ],\n",
              "       [ 0.5],\n",
              "       [ 6. ],\n",
              "       [15. ],\n",
              "       [20. ],\n",
              "       [ 3. ],\n",
              "       [10. ],\n",
              "       [17. ],\n",
              "       [25. ],\n",
              "       [ 5. ],\n",
              "       [11. ],\n",
              "       [16. ],\n",
              "       [ 2. ],\n",
              "       [ 9. ],\n",
              "       [18. ],\n",
              "       [ 4. ],\n",
              "       [ 8. ],\n",
              "       [21. ],\n",
              "       [ 3. ],\n",
              "       [12. ],\n",
              "       [22. ],\n",
              "       [ 1. ],\n",
              "       [10. ],\n",
              "       [19. ],\n",
              "       [ 4. ],\n",
              "       [ 7. ],\n",
              "       [14. ],\n",
              "       [ 2. ],\n",
              "       [13. ],\n",
              "       [ 5. ],\n",
              "       [20. ],\n",
              "       [ 1.5],\n",
              "       [ 8. ],\n",
              "       [16. ],\n",
              "       [ 4. ],\n",
              "       [10. ],\n",
              "       [19. ],\n",
              "       [ 3. ],\n",
              "       [11. ],\n",
              "       [18. ],\n",
              "       [ 2. ],\n",
              "       [ 9. ],\n",
              "       [14. ],\n",
              "       [ 5. ],\n",
              "       [ 7. ],\n",
              "       [23. ],\n",
              "       [ 2. ],\n",
              "       [12. ],\n",
              "       [21. ],\n",
              "       [ 3. ],\n",
              "       [ 7. ],\n",
              "       [13. ],\n",
              "       [ 1.5],\n",
              "       [14. ],\n",
              "       [18. ],\n",
              "       [ 4. ],\n",
              "       [ 9. ],\n",
              "       [20. ],\n",
              "       [ 2. ],\n",
              "       [16. ],\n",
              "       [ 1.5],\n",
              "       [ 7. ],\n",
              "       [18. ],\n",
              "       [ 4. ],\n",
              "       [10. ],\n",
              "       [20. ],\n",
              "       [ 2. ],\n",
              "       [ 9. ],\n",
              "       [15. ],\n",
              "       [ 2. ],\n",
              "       [ 8. ],\n",
              "       [14. ],\n",
              "       [ 6. ],\n",
              "       [ 9. ],\n",
              "       [22. ],\n",
              "       [ 1.5],\n",
              "       [12. ],\n",
              "       [19. ],\n",
              "       [ 3. ],\n",
              "       [ 7. ],\n",
              "       [13. ],\n",
              "       [ 2. ],\n",
              "       [11. ],\n",
              "       [17. ],\n",
              "       [ 5. ],\n",
              "       [ 9. ],\n",
              "       [21. ],\n",
              "       [ 3. ],\n",
              "       [16. ],\n",
              "       [ 1.5],\n",
              "       [ 7. ],\n",
              "       [17. ],\n",
              "       [ 4. ],\n",
              "       [10. ],\n",
              "       [20. ],\n",
              "       [ 2. ],\n",
              "       [ 9. ],\n",
              "       [15. ],\n",
              "       [ 2. ],\n",
              "       [ 8. ],\n",
              "       [14. ],\n",
              "       [ 6. ],\n",
              "       [ 9. ],\n",
              "       [22. ],\n",
              "       [ 1.5],\n",
              "       [12. ],\n",
              "       [19. ],\n",
              "       [ 3. ],\n",
              "       [ 7. ],\n",
              "       [13. ],\n",
              "       [ 2. ],\n",
              "       [11. ],\n",
              "       [18. ],\n",
              "       [ 5. ],\n",
              "       [ 9. ],\n",
              "       [21. ],\n",
              "       [ 3. ],\n",
              "       [15. ],\n",
              "       [ 1.5],\n",
              "       [ 8. ],\n",
              "       [13. ],\n",
              "       [ 3. ],\n",
              "       [ 9. ],\n",
              "       [16. ],\n",
              "       [ 5. ],\n",
              "       [10. ],\n",
              "       [18. ],\n",
              "       [ 1.5],\n",
              "       [10. ],\n",
              "       [19. ],\n",
              "       [ 6. ],\n",
              "       [ 8. ],\n",
              "       [21. ],\n",
              "       [ 3. ],\n",
              "       [11. ],\n",
              "       [20. ],\n",
              "       [ 2. ],\n",
              "       [ 9. ],\n",
              "       [15. ],\n",
              "       [ 2. ],\n",
              "       [ 8. ],\n",
              "       [14. ],\n",
              "       [ 6. ],\n",
              "       [ 9. ],\n",
              "       [22. ],\n",
              "       [ 1.5],\n",
              "       [10. ],\n",
              "       [18. ],\n",
              "       [ 3. ],\n",
              "       [12. ],\n",
              "       [ 1.5],\n",
              "       [ 8. ],\n",
              "       [15. ],\n",
              "       [ 4. ],\n",
              "       [ 9. ],\n",
              "       [16. ],\n",
              "       [ 4. ],\n",
              "       [ 8. ],\n",
              "       [20. ],\n",
              "       [ 2. ],\n",
              "       [ 9. ],\n",
              "       [17. ],\n",
              "       [ 5. ],\n",
              "       [ 8. ],\n",
              "       [21. ],\n",
              "       [ 3. ],\n",
              "       [11. ],\n",
              "       [19. ],\n",
              "       [ 1.5],\n",
              "       [ 9. ],\n",
              "       [15. ],\n",
              "       [ 4. ],\n",
              "       [ 8. ],\n",
              "       [13. ],\n",
              "       [ 4. ],\n",
              "       [10. ],\n",
              "       [21. ],\n",
              "       [ 2. ],\n",
              "       [ 7. ],\n",
              "       [14. ],\n",
              "       [ 4. ],\n",
              "       [12. ],\n",
              "       [16. ],\n",
              "       [ 2. ],\n",
              "       [ 9. ],\n",
              "       [20. ],\n",
              "       [ 3. ],\n",
              "       [ 9. ],\n",
              "       [16. ],\n",
              "       [ 5. ],\n",
              "       [ 8. ],\n",
              "       [21. ],\n",
              "       [ 3. ],\n",
              "       [12. ],\n",
              "       [19. ],\n",
              "       [ 1.5],\n",
              "       [ 9. ],\n",
              "       [15. ],\n",
              "       [ 4. ],\n",
              "       [ 8. ],\n",
              "       [13. ],\n",
              "       [ 6. ],\n",
              "       [ 8. ],\n",
              "       [ 2. ],\n",
              "       [10. ],\n",
              "       [16. ],\n",
              "       [ 4. ],\n",
              "       [12. ],\n",
              "       [20. ],\n",
              "       [ 2. ],\n",
              "       [ 9. ],\n",
              "       [15. ],\n",
              "       [ 3. ],\n",
              "       [10. ],\n",
              "       [21. ],\n",
              "       [ 3. ],\n",
              "       [12. ],\n",
              "       [16. ],\n",
              "       [ 4. ],\n",
              "       [ 8. ],\n",
              "       [19. ],\n",
              "       [ 2. ],\n",
              "       [ 7. ],\n",
              "       [15. ],\n",
              "       [ 5. ],\n",
              "       [ 8. ],\n",
              "       [18. ],\n",
              "       [ 3. ],\n",
              "       [14. ],\n",
              "       [16. ],\n",
              "       [ 4. ],\n",
              "       [ 8. ],\n",
              "       [19. ],\n",
              "       [ 1. ],\n",
              "       [ 8. ],\n",
              "       [16. ],\n",
              "       [ 3. ],\n",
              "       [10. ],\n",
              "       [21. ],\n",
              "       [ 3. ],\n",
              "       [12. ],\n",
              "       [16. ],\n",
              "       [ 4. ],\n",
              "       [ 8. ],\n",
              "       [19. ],\n",
              "       [ 2. ],\n",
              "       [ 7. ],\n",
              "       [15. ],\n",
              "       [ 5. ],\n",
              "       [ 8. ],\n",
              "       [18. ],\n",
              "       [ 3. ],\n",
              "       [14. ],\n",
              "       [16. ],\n",
              "       [ 4. ],\n",
              "       [ 8. ],\n",
              "       [19. ],\n",
              "       [ 2. ],\n",
              "       [ 7. ],\n",
              "       [15. ]])"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ],
      "source": [
        "X = dataset.iloc[:, 0:-1].values\n",
        "X"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "4a8d2f19",
      "metadata": {
        "id": "4a8d2f19",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "20cf3dc4-8b6b-4a3e-c57e-9dde21ca8c35"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 90000.],\n",
              "       [ 65000.],\n",
              "       [150000.],\n",
              "       [ 60000.],\n",
              "       [200000.],\n",
              "       [ 55000.],\n",
              "       [120000.],\n",
              "       [ 80000.],\n",
              "       [ 45000.],\n",
              "       [110000.],\n",
              "       [ 75000.],\n",
              "       [140000.],\n",
              "       [ 65000.],\n",
              "       [130000.],\n",
              "       [ 40000.],\n",
              "       [125000.],\n",
              "       [ 90000.],\n",
              "       [115000.],\n",
              "       [ 35000.],\n",
              "       [180000.],\n",
              "       [ 80000.],\n",
              "       [190000.],\n",
              "       [ 50000.],\n",
              "       [ 60000.],\n",
              "       [140000.],\n",
              "       [ 45000.],\n",
              "       [110000.],\n",
              "       [ 40000.],\n",
              "       [140000.],\n",
              "       [ 90000.],\n",
              "       [250000.],\n",
              "       [ 55000.],\n",
              "       [ 75000.],\n",
              "       [ 65000.],\n",
              "       [170000.],\n",
              "       [ 45000.],\n",
              "       [ 60000.],\n",
              "       [115000.],\n",
              "       [ 40000.],\n",
              "       [160000.],\n",
              "       [ 80000.],\n",
              "       [190000.],\n",
              "       [ 60000.],\n",
              "       [ 45000.],\n",
              "       [130000.],\n",
              "       [ 40000.],\n",
              "       [ 75000.],\n",
              "       [180000.],\n",
              "       [120000.],\n",
              "       [ 35000.],\n",
              "       [130000.],\n",
              "       [ 85000.],\n",
              "       [ 60000.],\n",
              "       [200000.],\n",
              "       [ 50000.],\n",
              "       [ 95000.],\n",
              "       [ 65000.],\n",
              "       [140000.],\n",
              "       [ 55000.],\n",
              "       [105000.],\n",
              "       [170000.],\n",
              "       [ 50000.],\n",
              "       [ 80000.],\n",
              "       [180000.],\n",
              "       [ 35000.],\n",
              "       [ 90000.],\n",
              "       [120000.],\n",
              "       [ 45000.],\n",
              "       [ 90000.],\n",
              "       [150000.],\n",
              "       [ 65000.],\n",
              "       [ 70000.],\n",
              "       [190000.],\n",
              "       [ 40000.],\n",
              "       [120000.],\n",
              "       [ 95000.],\n",
              "       [160000.],\n",
              "       [100000.],\n",
              "       [180000.],\n",
              "       [ 55000.],\n",
              "       [ 70000.],\n",
              "       [ 80000.],\n",
              "       [ 30000.],\n",
              "       [250000.],\n",
              "       [ 40000.],\n",
              "       [ 95000.],\n",
              "       [ 45000.],\n",
              "       [ 80000.],\n",
              "       [135000.],\n",
              "       [ 55000.],\n",
              "       [120000.],\n",
              "       [ 40000.],\n",
              "       [105000.],\n",
              "       [170000.],\n",
              "       [ 75000.],\n",
              "       [ 65000.],\n",
              "       [160000.],\n",
              "       [ 35000.],\n",
              "       [ 90000.],\n",
              "       [110000.],\n",
              "       [ 45000.],\n",
              "       [ 95000.],\n",
              "       [150000.],\n",
              "       [ 50000.],\n",
              "       [ 80000.],\n",
              "       [220000.],\n",
              "       [ 50000.],\n",
              "       [ 60000.],\n",
              "       [100000.],\n",
              "       [ 40000.],\n",
              "       [110000.],\n",
              "       [ 95000.],\n",
              "       [130000.],\n",
              "       [ 90000.],\n",
              "       [ 35000.],\n",
              "       [ 95000.],\n",
              "       [ 65000.],\n",
              "       [170000.],\n",
              "       [ 45000.],\n",
              "       [120000.],\n",
              "       [100000.],\n",
              "       [180000.],\n",
              "       [ 50000.],\n",
              "       [ 80000.],\n",
              "       [140000.],\n",
              "       [ 40000.],\n",
              "       [ 95000.],\n",
              "       [110000.],\n",
              "       [ 50000.],\n",
              "       [105000.],\n",
              "       [160000.],\n",
              "       [ 45000.],\n",
              "       [100000.],\n",
              "       [160000.],\n",
              "       [ 35000.],\n",
              "       [ 55000.],\n",
              "       [140000.],\n",
              "       [ 50000.],\n",
              "       [ 60000.],\n",
              "       [120000.],\n",
              "       [ 40000.],\n",
              "       [110000.],\n",
              "       [ 50000.],\n",
              "       [135000.],\n",
              "       [ 40000.],\n",
              "       [ 90000.],\n",
              "       [150000.],\n",
              "       [ 60000.],\n",
              "       [ 80000.],\n",
              "       [175000.],\n",
              "       [ 45000.],\n",
              "       [120000.],\n",
              "       [140000.],\n",
              "       [ 35000.],\n",
              "       [ 95000.],\n",
              "       [110000.],\n",
              "       [ 50000.],\n",
              "       [115000.],\n",
              "       [185000.],\n",
              "       [ 40000.],\n",
              "       [ 90000.],\n",
              "       [175000.],\n",
              "       [ 45000.],\n",
              "       [ 80000.],\n",
              "       [120000.],\n",
              "       [ 35000.],\n",
              "       [110000.],\n",
              "       [150000.],\n",
              "       [ 50000.],\n",
              "       [105000.],\n",
              "       [180000.],\n",
              "       [ 40000.],\n",
              "       [140000.],\n",
              "       [ 45000.],\n",
              "       [ 85000.],\n",
              "       [140000.],\n",
              "       [ 50000.],\n",
              "       [ 80000.],\n",
              "       [170000.],\n",
              "       [ 40000.],\n",
              "       [105000.],\n",
              "       [145000.],\n",
              "       [ 40000.],\n",
              "       [ 85000.],\n",
              "       [130000.],\n",
              "       [ 95000.],\n",
              "       [100000.],\n",
              "       [180000.],\n",
              "       [ 35000.],\n",
              "       [ 95000.],\n",
              "       [170000.],\n",
              "       [ 45000.],\n",
              "       [ 95000.],\n",
              "       [120000.],\n",
              "       [ 40000.],\n",
              "       [ 90000.],\n",
              "       [155000.],\n",
              "       [ 55000.],\n",
              "       [110000.],\n",
              "       [180000.],\n",
              "       [ 45000.],\n",
              "       [130000.],\n",
              "       [ 45000.],\n",
              "       [ 90000.],\n",
              "       [160000.],\n",
              "       [ 50000.],\n",
              "       [120000.],\n",
              "       [170000.],\n",
              "       [ 40000.],\n",
              "       [110000.],\n",
              "       [150000.],\n",
              "       [ 40000.],\n",
              "       [ 85000.],\n",
              "       [130000.],\n",
              "       [100000.],\n",
              "       [ 95000.],\n",
              "       [180000.],\n",
              "       [ 35000.],\n",
              "       [100000.],\n",
              "       [170000.],\n",
              "       [ 45000.],\n",
              "       [100000.],\n",
              "       [140000.],\n",
              "       [ 40000.],\n",
              "       [105000.],\n",
              "       [160000.],\n",
              "       [ 70000.],\n",
              "       [120000.],\n",
              "       [190000.],\n",
              "       [ 45000.],\n",
              "       [120000.],\n",
              "       [ 50000.],\n",
              "       [ 85000.],\n",
              "       [140000.],\n",
              "       [ 45000.],\n",
              "       [100000.],\n",
              "       [140000.],\n",
              "       [ 70000.],\n",
              "       [120000.],\n",
              "       [160000.],\n",
              "       [ 40000.],\n",
              "       [120000.],\n",
              "       [150000.],\n",
              "       [ 70000.],\n",
              "       [ 95000.],\n",
              "       [180000.],\n",
              "       [ 50000.],\n",
              "       [ 95000.],\n",
              "       [170000.],\n",
              "       [ 40000.],\n",
              "       [110000.],\n",
              "       [150000.],\n",
              "       [ 40000.],\n",
              "       [ 85000.],\n",
              "       [130000.],\n",
              "       [100000.],\n",
              "       [ 95000.],\n",
              "       [180000.],\n",
              "       [   350.],\n",
              "       [120000.],\n",
              "       [160000.],\n",
              "       [ 50000.],\n",
              "       [110000.],\n",
              "       [ 40000.],\n",
              "       [ 95000.],\n",
              "       [140000.],\n",
              "       [ 60000.],\n",
              "       [110000.],\n",
              "       [150000.],\n",
              "       [ 60000.],\n",
              "       [ 90000.],\n",
              "       [180000.],\n",
              "       [ 40000.],\n",
              "       [120000.],\n",
              "       [160000.],\n",
              "       [ 70000.],\n",
              "       [ 95000.],\n",
              "       [180000.],\n",
              "       [ 50000.],\n",
              "       [ 95000.],\n",
              "       [170000.],\n",
              "       [ 35000.],\n",
              "       [100000.],\n",
              "       [150000.],\n",
              "       [ 60000.],\n",
              "       [ 85000.],\n",
              "       [130000.],\n",
              "       [ 65000.],\n",
              "       [110000.],\n",
              "       [180000.],\n",
              "       [ 40000.],\n",
              "       [ 90000.],\n",
              "       [140000.],\n",
              "       [ 60000.],\n",
              "       [130000.],\n",
              "       [160000.],\n",
              "       [ 40000.],\n",
              "       [100000.],\n",
              "       [180000.],\n",
              "       [ 55000.],\n",
              "       [120000.],\n",
              "       [150000.],\n",
              "       [ 70000.],\n",
              "       [ 95000.],\n",
              "       [180000.],\n",
              "       [ 50000.],\n",
              "       [120000.],\n",
              "       [170000.],\n",
              "       [ 35000.],\n",
              "       [100000.],\n",
              "       [150000.],\n",
              "       [ 60000.],\n",
              "       [ 85000.],\n",
              "       [130000.],\n",
              "       [ 80000.],\n",
              "       [ 95000.],\n",
              "       [ 40000.],\n",
              "       [120000.],\n",
              "       [160000.],\n",
              "       [ 65000.],\n",
              "       [130000.],\n",
              "       [180000.],\n",
              "       [ 40000.],\n",
              "       [100000.],\n",
              "       [150000.],\n",
              "       [ 55000.],\n",
              "       [110000.],\n",
              "       [180000.],\n",
              "       [ 50000.],\n",
              "       [130000.],\n",
              "       [160000.],\n",
              "       [ 60000.],\n",
              "       [ 95000.],\n",
              "       [170000.],\n",
              "       [ 40000.],\n",
              "       [ 90000.],\n",
              "       [150000.],\n",
              "       [ 70000.],\n",
              "       [ 90000.],\n",
              "       [170000.],\n",
              "       [ 50000.],\n",
              "       [150000.],\n",
              "       [160000.],\n",
              "       [ 60000.],\n",
              "       [ 85000.],\n",
              "       [180000.],\n",
              "       [ 35000.],\n",
              "       [110000.],\n",
              "       [160000.],\n",
              "       [ 55000.],\n",
              "       [110000.],\n",
              "       [180000.],\n",
              "       [ 50000.],\n",
              "       [130000.],\n",
              "       [160000.],\n",
              "       [ 60000.],\n",
              "       [ 95000.],\n",
              "       [170000.],\n",
              "       [ 40000.],\n",
              "       [ 90000.],\n",
              "       [150000.],\n",
              "       [ 70000.],\n",
              "       [ 90000.],\n",
              "       [170000.],\n",
              "       [ 50000.],\n",
              "       [150000.],\n",
              "       [160000.],\n",
              "       [ 60000.],\n",
              "       [ 85000.],\n",
              "       [170000.],\n",
              "       [ 40000.],\n",
              "       [ 90000.],\n",
              "       [150000.]])"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "Y = dataset.iloc[:,1:].values\n",
        "Y"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8116273b",
      "metadata": {
        "id": "8116273b"
      },
      "outputs": [],
      "source": [
        "# train size-> min 2/3\n",
        "# test size -> 1/3\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = 0.1,random_state = 1)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(X_train)"
      ],
      "metadata": {
        "id": "28X7xhlFttvH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "29c57406-ab82-42e7-d3c0-a82e208f6e09"
      },
      "id": "28X7xhlFttvH",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[12. ]\n",
            " [15. ]\n",
            " [ 8. ]\n",
            " [ 3. ]\n",
            " [12. ]\n",
            " [15. ]\n",
            " [ 7. ]\n",
            " [18. ]\n",
            " [13. ]\n",
            " [ 0. ]\n",
            " [16. ]\n",
            " [19. ]\n",
            " [ 3. ]\n",
            " [13. ]\n",
            " [18. ]\n",
            " [ 3. ]\n",
            " [ 3. ]\n",
            " [ 9. ]\n",
            " [12. ]\n",
            " [ 7. ]\n",
            " [ 2. ]\n",
            " [16. ]\n",
            " [21. ]\n",
            " [10. ]\n",
            " [ 2. ]\n",
            " [ 3. ]\n",
            " [14. ]\n",
            " [16. ]\n",
            " [ 3. ]\n",
            " [ 6. ]\n",
            " [12. ]\n",
            " [ 2. ]\n",
            " [20. ]\n",
            " [18. ]\n",
            " [ 9. ]\n",
            " [21. ]\n",
            " [ 0. ]\n",
            " [ 4. ]\n",
            " [ 9. ]\n",
            " [ 1. ]\n",
            " [ 2. ]\n",
            " [ 2. ]\n",
            " [18. ]\n",
            " [20. ]\n",
            " [25. ]\n",
            " [ 5. ]\n",
            " [ 1.5]\n",
            " [14. ]\n",
            " [14. ]\n",
            " [18. ]\n",
            " [11. ]\n",
            " [21. ]\n",
            " [19. ]\n",
            " [18. ]\n",
            " [ 8. ]\n",
            " [21. ]\n",
            " [ 7. ]\n",
            " [ 6. ]\n",
            " [12. ]\n",
            " [16. ]\n",
            " [ 3. ]\n",
            " [11. ]\n",
            " [15. ]\n",
            " [20. ]\n",
            " [ 6. ]\n",
            " [10. ]\n",
            " [ 4. ]\n",
            " [16. ]\n",
            " [15. ]\n",
            " [ 3. ]\n",
            " [ 3. ]\n",
            " [ 2. ]\n",
            " [ 5. ]\n",
            " [ 2. ]\n",
            " [16. ]\n",
            " [ 7. ]\n",
            " [10. ]\n",
            " [ 8. ]\n",
            " [21. ]\n",
            " [ 7. ]\n",
            " [ 4. ]\n",
            " [ 1.5]\n",
            " [17. ]\n",
            " [ 8. ]\n",
            " [ 2. ]\n",
            " [ 9. ]\n",
            " [ 9. ]\n",
            " [11. ]\n",
            " [ 5. ]\n",
            " [ 9. ]\n",
            " [ 7. ]\n",
            " [22. ]\n",
            " [10. ]\n",
            " [ 2. ]\n",
            " [ 7. ]\n",
            " [ 3. ]\n",
            " [ 5. ]\n",
            " [16. ]\n",
            " [ 7. ]\n",
            " [ 6. ]\n",
            " [ 6. ]\n",
            " [ 1. ]\n",
            " [17. ]\n",
            " [12. ]\n",
            " [ 3. ]\n",
            " [ 2. ]\n",
            " [ 1.5]\n",
            " [ 7. ]\n",
            " [15. ]\n",
            " [14. ]\n",
            " [ 6. ]\n",
            " [10. ]\n",
            " [ 4. ]\n",
            " [ 7. ]\n",
            " [ 5. ]\n",
            " [20. ]\n",
            " [15. ]\n",
            " [ 6. ]\n",
            " [10. ]\n",
            " [10. ]\n",
            " [ 9. ]\n",
            " [22. ]\n",
            " [21. ]\n",
            " [23. ]\n",
            " [ 2. ]\n",
            " [13. ]\n",
            " [ 9. ]\n",
            " [10. ]\n",
            " [12. ]\n",
            " [14. ]\n",
            " [ 2. ]\n",
            " [ 9. ]\n",
            " [ 3. ]\n",
            " [16. ]\n",
            " [ 5. ]\n",
            " [ 1. ]\n",
            " [ 8. ]\n",
            " [20. ]\n",
            " [ 3. ]\n",
            " [19. ]\n",
            " [20. ]\n",
            " [15. ]\n",
            " [ 4. ]\n",
            " [ 9. ]\n",
            " [15. ]\n",
            " [ 3. ]\n",
            " [19. ]\n",
            " [11. ]\n",
            " [ 9. ]\n",
            " [ 7. ]\n",
            " [10. ]\n",
            " [ 8. ]\n",
            " [ 2. ]\n",
            " [16. ]\n",
            " [21. ]\n",
            " [ 7. ]\n",
            " [ 4. ]\n",
            " [ 5. ]\n",
            " [19. ]\n",
            " [18. ]\n",
            " [ 8. ]\n",
            " [13. ]\n",
            " [ 4. ]\n",
            " [14. ]\n",
            " [16. ]\n",
            " [ 2. ]\n",
            " [ 4. ]\n",
            " [16. ]\n",
            " [ 6. ]\n",
            " [10. ]\n",
            " [ 4. ]\n",
            " [ 5. ]\n",
            " [19. ]\n",
            " [ 8. ]\n",
            " [13. ]\n",
            " [18. ]\n",
            " [19. ]\n",
            " [21. ]\n",
            " [22. ]\n",
            " [ 4. ]\n",
            " [13. ]\n",
            " [ 8. ]\n",
            " [22. ]\n",
            " [14. ]\n",
            " [ 4. ]\n",
            " [ 1. ]\n",
            " [ 9. ]\n",
            " [15. ]\n",
            " [ 8. ]\n",
            " [21. ]\n",
            " [ 5. ]\n",
            " [12. ]\n",
            " [ 2. ]\n",
            " [10. ]\n",
            " [ 1.5]\n",
            " [ 4. ]\n",
            " [ 1.5]\n",
            " [ 2. ]\n",
            " [ 3. ]\n",
            " [12. ]\n",
            " [ 9. ]\n",
            " [20. ]\n",
            " [ 2. ]\n",
            " [15. ]\n",
            " [ 1. ]\n",
            " [ 0.5]\n",
            " [21. ]\n",
            " [ 8. ]\n",
            " [ 3. ]\n",
            " [ 8. ]\n",
            " [ 9. ]\n",
            " [ 3. ]\n",
            " [16. ]\n",
            " [20. ]\n",
            " [ 8. ]\n",
            " [ 4. ]\n",
            " [ 9. ]\n",
            " [ 3. ]\n",
            " [ 4. ]\n",
            " [ 2. ]\n",
            " [ 9. ]\n",
            " [ 2. ]\n",
            " [ 5. ]\n",
            " [ 3. ]\n",
            " [21. ]\n",
            " [ 8. ]\n",
            " [23. ]\n",
            " [ 7. ]\n",
            " [13. ]\n",
            " [ 2. ]\n",
            " [10. ]\n",
            " [ 1.5]\n",
            " [18. ]\n",
            " [ 3. ]\n",
            " [ 4. ]\n",
            " [22. ]\n",
            " [15. ]\n",
            " [ 1.5]\n",
            " [17. ]\n",
            " [ 8. ]\n",
            " [ 7. ]\n",
            " [16. ]\n",
            " [ 5. ]\n",
            " [12. ]\n",
            " [10. ]\n",
            " [ 3. ]\n",
            " [ 6. ]\n",
            " [ 1.5]\n",
            " [ 8. ]\n",
            " [19. ]\n",
            " [ 3. ]\n",
            " [15. ]\n",
            " [12. ]\n",
            " [12. ]\n",
            " [ 8. ]\n",
            " [10. ]\n",
            " [ 8. ]\n",
            " [11. ]\n",
            " [18. ]\n",
            " [19. ]\n",
            " [14. ]\n",
            " [ 6. ]\n",
            " [ 5. ]\n",
            " [15. ]\n",
            " [18. ]\n",
            " [20. ]\n",
            " [ 4. ]\n",
            " [ 4. ]\n",
            " [10. ]\n",
            " [19. ]\n",
            " [14. ]\n",
            " [24. ]\n",
            " [14. ]\n",
            " [11. ]\n",
            " [ 9. ]\n",
            " [11. ]\n",
            " [15. ]\n",
            " [19. ]\n",
            " [13. ]\n",
            " [ 2. ]\n",
            " [ 9. ]\n",
            " [ 5. ]\n",
            " [ 3. ]\n",
            " [17. ]\n",
            " [ 1. ]\n",
            " [16. ]\n",
            " [ 9. ]\n",
            " [ 2. ]\n",
            " [ 1.5]\n",
            " [11. ]\n",
            " [22. ]\n",
            " [ 8. ]\n",
            " [19. ]\n",
            " [ 7. ]\n",
            " [ 8. ]\n",
            " [ 0. ]\n",
            " [18. ]\n",
            " [25. ]\n",
            " [25. ]\n",
            " [ 6. ]\n",
            " [ 3. ]\n",
            " [22. ]\n",
            " [ 8. ]\n",
            " [ 9. ]\n",
            " [ 2. ]\n",
            " [ 3. ]\n",
            " [13. ]\n",
            " [ 2. ]\n",
            " [10. ]\n",
            " [ 4. ]\n",
            " [ 4. ]\n",
            " [13. ]\n",
            " [ 2. ]\n",
            " [10. ]\n",
            " [ 9. ]\n",
            " [ 8. ]\n",
            " [22. ]\n",
            " [ 5. ]\n",
            " [ 2. ]\n",
            " [19. ]\n",
            " [14. ]\n",
            " [ 8. ]\n",
            " [20. ]\n",
            " [ 1.5]\n",
            " [ 5. ]\n",
            " [11. ]\n",
            " [ 8. ]\n",
            " [ 1.5]\n",
            " [ 7. ]\n",
            " [22. ]\n",
            " [ 7. ]\n",
            " [ 6. ]\n",
            " [16. ]\n",
            " [ 9. ]\n",
            " [14. ]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "total_len = (len(X))\n",
        "print(\"All total length = \",total_len)\n",
        "print(\"X_train length = \", len(X_train),len(Y_train))\n",
        "print(\"X_test length = \", len(X_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cNr-peu85LA1",
        "outputId": "f0d594e5-2ed5-46b9-c6c9-391673bb6d24"
      },
      "id": "cNr-peu85LA1",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "All total length =  373\n",
            "X_train length =  335 335\n",
            "X_test length =  38\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "dQIhe-xB5ccS"
      },
      "id": "dQIhe-xB5ccS",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9334be8f",
      "metadata": {
        "id": "9334be8f",
        "outputId": "4a8be6b0-6350-4138-d1ff-b90d197681b1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "#Training model\n",
        "from sklearn.linear_model import LinearRegression\n",
        "model = LinearRegression()\n",
        "model.fit(X_train,Y_train)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#testing model\n",
        "exp = float(input(\"Enter years of experience = \"))\n",
        "exp = np.array([[exp]])\n",
        "print(exp)\n",
        "\n",
        "# # predict the salary\n",
        "predicted_salary = model.predict(exp)[0][0]\n",
        "# print(predicted_salary)\n",
        "print(\"Your predicted_salary = \",predicted_salary)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pNdh3Lwq6qfj",
        "outputId": "afc1ab7b-6b47-40ef-8264-f63d6f357fe7"
      },
      "id": "pNdh3Lwq6qfj",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter years of experience = 6.8\n",
            "[[6.8]]\n",
            "Your predicted_salary =  78772.18015374706\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OH1_3q1RVXPi",
        "outputId": "70e7475a-fa7d-47fd-fb7a-d1a365bf5672"
      },
      "id": "OH1_3q1RVXPi",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 5. ],\n",
              "       [ 1. ],\n",
              "       [14. ],\n",
              "       [ 4. ],\n",
              "       [11. ],\n",
              "       [ 2. ],\n",
              "       [18. ],\n",
              "       [20. ],\n",
              "       [10. ],\n",
              "       [ 3. ],\n",
              "       [ 8. ],\n",
              "       [ 2. ],\n",
              "       [12. ],\n",
              "       [15. ],\n",
              "       [ 2. ],\n",
              "       [ 2. ],\n",
              "       [16. ],\n",
              "       [12. ],\n",
              "       [21. ],\n",
              "       [ 3. ],\n",
              "       [12. ],\n",
              "       [ 3. ],\n",
              "       [13. ],\n",
              "       [16. ],\n",
              "       [15. ],\n",
              "       [20. ],\n",
              "       [ 7. ],\n",
              "       [19. ],\n",
              "       [ 2. ],\n",
              "       [ 5. ],\n",
              "       [21. ],\n",
              "       [16. ],\n",
              "       [ 1.5],\n",
              "       [20. ],\n",
              "       [ 3. ],\n",
              "       [19. ],\n",
              "       [17. ],\n",
              "       [ 3. ]])"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# X_test.tolist()\n",
        "predicted_salary = model.predict(X_test)\n",
        "predicted_salary"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DD9SeXvb8Bj-",
        "outputId": "446d199b-bc44-4c4a-d1d1-3726189131ab"
      },
      "id": "DD9SeXvb8Bj-",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 66556.28728712],\n",
              "       [ 39409.85869462],\n",
              "       [127635.75162025],\n",
              "       [ 59769.68013899],\n",
              "       [107275.93017588],\n",
              "       [ 46196.46584274],\n",
              "       [154782.18021276],\n",
              "       [168355.39450901],\n",
              "       [100489.32302775],\n",
              "       [ 52983.07299087],\n",
              "       [ 86916.1087315 ],\n",
              "       [ 46196.46584274],\n",
              "       [114062.537324  ],\n",
              "       [134422.35876838],\n",
              "       [ 46196.46584274],\n",
              "       [ 46196.46584274],\n",
              "       [141208.96591651],\n",
              "       [114062.537324  ],\n",
              "       [175142.00165714],\n",
              "       [ 52983.07299087],\n",
              "       [114062.537324  ],\n",
              "       [ 52983.07299087],\n",
              "       [120849.14447213],\n",
              "       [141208.96591651],\n",
              "       [134422.35876838],\n",
              "       [168355.39450901],\n",
              "       [ 80129.50158337],\n",
              "       [161568.78736088],\n",
              "       [ 46196.46584274],\n",
              "       [ 66556.28728712],\n",
              "       [175142.00165714],\n",
              "       [141208.96591651],\n",
              "       [ 42803.16226868],\n",
              "       [168355.39450901],\n",
              "       [ 52983.07299087],\n",
              "       [161568.78736088],\n",
              "       [147995.57306463],\n",
              "       [ 52983.07299087]])"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# # for testing data\n",
        "# predicted_salary = model.predict(X_test)\n",
        "# for i in range(len(X_test)):\n",
        "#   print(\"Years of experiance\",X_test.tolist()[i][0], \"     salary\",predicted_salary[i][0], \"     Actual Salary\",Y_test.tolist()[i][0])"
      ],
      "metadata": {
        "id": "qE-XQqCx5Kcs"
      },
      "id": "qE-XQqCx5Kcs",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "predicted_salary = model.predict(X_test)\n",
        "for i in range(len(X_test)):\n",
        "  print(X_test.tolist()[i][0],Y_test.tolist()[i][0],predicted_salary[i][0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vAw5QlE5vhPX",
        "outputId": "3ee363c9-5da6-47ac-ee2f-691abdecd2af"
      },
      "id": "vAw5QlE5vhPX",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5.0 45000.0 66556.2872871204\n",
            "1.0 35000.0 39409.85869461673\n",
            "14.0 150000.0 127635.75162025368\n",
            "4.0 60000.0 59769.68013899449\n",
            "11.0 120000.0 107275.93017587592\n",
            "2.0 40000.0 46196.46584274265\n",
            "18.0 150000.0 154782.18021275738\n",
            "20.0 180000.0 168355.3945090092\n",
            "10.0 90000.0 100489.32302775\n",
            "3.0 45000.0 52983.07299086856\n",
            "8.0 85000.0 86916.10873149816\n",
            "2.0 40000.0 46196.46584274265\n",
            "12.0 95000.0 114062.53732400184\n",
            "15.0 120000.0 134422.3587683796\n",
            "2.0 55000.0 46196.46584274265\n",
            "2.0 40000.0 46196.46584274265\n",
            "16.0 160000.0 141208.96591650552\n",
            "12.0 80000.0 114062.53732400184\n",
            "21.0 175000.0 175142.00165713514\n",
            "3.0 45000.0 52983.07299086856\n",
            "12.0 120000.0 114062.53732400184\n",
            "3.0 45000.0 52983.07299086856\n",
            "13.0 140000.0 120849.14447212777\n",
            "16.0 160000.0 141208.96591650552\n",
            "15.0 150000.0 134422.3587683796\n",
            "20.0 200000.0 168355.3945090092\n",
            "7.0 60000.0 80129.50158337224\n",
            "19.0 150000.0 161568.78736088326\n",
            "2.0 40000.0 46196.46584274265\n",
            "5.0 70000.0 66556.2872871204\n",
            "21.0 180000.0 175142.00165713514\n",
            "16.0 150000.0 141208.96591650552\n",
            "1.5 45000.0 42803.16226867968\n",
            "20.0 170000.0 168355.3945090092\n",
            "3.0 55000.0 52983.07299086856\n",
            "19.0 170000.0 161568.78736088326\n",
            "17.0 100000.0 147995.57306463143\n",
            "3.0 50000.0 52983.07299086856\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# for i in range(len(X_test)):\n",
        "#   print(X_test[i][0],Y_test[i][0],predicted_salary[i][0])"
      ],
      "metadata": {
        "id": "9nPOd9aCWjdj"
      },
      "id": "9nPOd9aCWjdj",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "31d93a77",
      "metadata": {
        "id": "31d93a77",
        "outputId": "790b8e15-368c-4ab9-81f4-f4ab4e5c0ff0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.scatter(X_train,Y_train,color = 'red')\n",
        "plt.plot(X_train,model.predict(X_train),color = 'blue')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x-82NQPPZPCV",
        "outputId": "6f14f536-a564-48b8-a698-18a71df0325f"
      },
      "id": "x-82NQPPZPCV",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 8. ],\n",
              "       [19. ],\n",
              "       [ 4. ],\n",
              "       [ 1.5],\n",
              "       [16. ],\n",
              "       [ 6. ],\n",
              "       [16. ],\n",
              "       [15. ],\n",
              "       [25. ],\n",
              "       [ 2. ],\n",
              "       [10. ],\n",
              "       [ 9. ],\n",
              "       [19. ],\n",
              "       [ 7. ],\n",
              "       [ 2. ],\n",
              "       [12. ],\n",
              "       [19. ],\n",
              "       [ 7. ],\n",
              "       [11. ],\n",
              "       [ 7. ],\n",
              "       [ 1.5],\n",
              "       [ 3. ],\n",
              "       [ 1. ],\n",
              "       [18. ],\n",
              "       [ 8. ],\n",
              "       [ 8. ],\n",
              "       [16. ],\n",
              "       [ 8. ],\n",
              "       [20. ],\n",
              "       [ 8. ],\n",
              "       [20. ],\n",
              "       [ 9. ],\n",
              "       [ 9. ],\n",
              "       [ 5. ],\n",
              "       [18. ],\n",
              "       [14. ],\n",
              "       [ 5. ],\n",
              "       [15. ],\n",
              "       [20. ],\n",
              "       [ 2. ],\n",
              "       [17. ],\n",
              "       [ 9. ],\n",
              "       [20. ],\n",
              "       [15. ],\n",
              "       [ 5. ],\n",
              "       [ 1.5],\n",
              "       [ 6. ],\n",
              "       [18. ],\n",
              "       [ 6. ],\n",
              "       [15. ],\n",
              "       [12. ],\n",
              "       [ 6. ],\n",
              "       [13. ],\n",
              "       [10. ],\n",
              "       [ 7. ],\n",
              "       [ 3. ],\n",
              "       [ 0.5],\n",
              "       [19. ],\n",
              "       [ 3. ],\n",
              "       [ 5. ],\n",
              "       [ 7. ],\n",
              "       [ 3. ],\n",
              "       [14. ],\n",
              "       [11. ],\n",
              "       [12. ],\n",
              "       [15. ],\n",
              "       [18. ],\n",
              "       [ 3. ],\n",
              "       [ 2. ],\n",
              "       [ 3. ],\n",
              "       [ 2. ],\n",
              "       [14. ],\n",
              "       [ 4. ],\n",
              "       [18. ],\n",
              "       [ 1.5],\n",
              "       [11. ],\n",
              "       [ 9. ],\n",
              "       [ 7. ],\n",
              "       [ 3. ],\n",
              "       [ 3. ],\n",
              "       [13. ],\n",
              "       [10. ],\n",
              "       [21. ],\n",
              "       [10. ],\n",
              "       [10. ],\n",
              "       [ 5. ],\n",
              "       [15. ],\n",
              "       [18. ],\n",
              "       [15. ],\n",
              "       [21. ],\n",
              "       [ 2. ],\n",
              "       [ 8. ],\n",
              "       [22. ],\n",
              "       [14. ],\n",
              "       [ 2. ],\n",
              "       [ 9. ],\n",
              "       [17. ],\n",
              "       [13. ],\n",
              "       [ 9. ],\n",
              "       [23. ],\n",
              "       [19. ],\n",
              "       [ 1.5],\n",
              "       [ 3. ],\n",
              "       [14. ],\n",
              "       [18. ],\n",
              "       [ 0. ],\n",
              "       [ 2. ],\n",
              "       [ 4. ],\n",
              "       [10. ],\n",
              "       [ 4. ],\n",
              "       [ 8. ],\n",
              "       [ 2. ],\n",
              "       [10. ],\n",
              "       [ 1. ],\n",
              "       [19. ],\n",
              "       [ 8. ],\n",
              "       [ 9. ],\n",
              "       [ 7. ],\n",
              "       [12. ],\n",
              "       [ 2. ],\n",
              "       [15. ],\n",
              "       [ 8. ],\n",
              "       [13. ],\n",
              "       [ 5. ],\n",
              "       [22. ],\n",
              "       [ 2. ],\n",
              "       [22. ],\n",
              "       [ 1.5],\n",
              "       [ 9. ],\n",
              "       [ 9. ],\n",
              "       [ 9. ],\n",
              "       [21. ],\n",
              "       [24. ],\n",
              "       [14. ],\n",
              "       [ 3. ],\n",
              "       [ 8. ],\n",
              "       [21. ],\n",
              "       [ 8. ],\n",
              "       [10. ],\n",
              "       [10. ],\n",
              "       [ 5. ],\n",
              "       [21. ],\n",
              "       [ 2. ],\n",
              "       [19. ],\n",
              "       [12. ],\n",
              "       [ 5. ],\n",
              "       [ 4. ],\n",
              "       [ 3. ],\n",
              "       [16. ],\n",
              "       [ 4. ],\n",
              "       [ 2. ],\n",
              "       [ 2. ],\n",
              "       [ 1.5],\n",
              "       [ 1. ],\n",
              "       [11. ],\n",
              "       [15. ],\n",
              "       [ 4. ],\n",
              "       [18. ],\n",
              "       [12. ],\n",
              "       [15. ],\n",
              "       [17. ],\n",
              "       [ 9. ],\n",
              "       [ 4. ],\n",
              "       [17. ],\n",
              "       [ 9. ],\n",
              "       [ 2. ],\n",
              "       [ 4. ],\n",
              "       [ 3. ],\n",
              "       [21. ],\n",
              "       [ 4. ],\n",
              "       [10. ],\n",
              "       [ 5. ],\n",
              "       [ 3. ],\n",
              "       [21. ],\n",
              "       [15. ],\n",
              "       [ 8. ],\n",
              "       [ 8. ],\n",
              "       [19. ],\n",
              "       [ 9. ],\n",
              "       [16. ],\n",
              "       [19. ],\n",
              "       [ 6. ],\n",
              "       [ 8. ],\n",
              "       [10. ],\n",
              "       [ 2. ],\n",
              "       [ 1.5],\n",
              "       [ 8. ],\n",
              "       [25. ],\n",
              "       [ 2. ],\n",
              "       [16. ],\n",
              "       [16. ],\n",
              "       [14. ],\n",
              "       [19. ],\n",
              "       [ 6. ],\n",
              "       [19. ],\n",
              "       [ 1.5],\n",
              "       [ 8. ],\n",
              "       [ 4. ],\n",
              "       [ 3. ],\n",
              "       [ 3. ],\n",
              "       [11. ],\n",
              "       [ 3. ],\n",
              "       [ 2. ],\n",
              "       [18. ],\n",
              "       [21. ],\n",
              "       [19. ],\n",
              "       [ 8. ],\n",
              "       [ 4. ],\n",
              "       [ 6. ],\n",
              "       [ 6. ],\n",
              "       [10. ],\n",
              "       [ 3. ],\n",
              "       [12. ],\n",
              "       [16. ],\n",
              "       [20. ],\n",
              "       [11. ],\n",
              "       [ 7. ],\n",
              "       [16. ],\n",
              "       [19. ],\n",
              "       [19. ],\n",
              "       [ 3. ],\n",
              "       [ 0. ],\n",
              "       [12. ],\n",
              "       [ 5. ],\n",
              "       [22. ],\n",
              "       [ 2. ],\n",
              "       [14. ],\n",
              "       [ 8. ],\n",
              "       [ 7. ],\n",
              "       [ 2. ],\n",
              "       [ 4. ],\n",
              "       [ 1.5],\n",
              "       [ 9. ],\n",
              "       [16. ],\n",
              "       [11. ],\n",
              "       [18. ],\n",
              "       [13. ],\n",
              "       [11. ],\n",
              "       [ 3. ],\n",
              "       [19. ],\n",
              "       [20. ],\n",
              "       [ 9. ],\n",
              "       [ 8. ],\n",
              "       [ 9. ],\n",
              "       [ 7. ],\n",
              "       [ 2. ],\n",
              "       [ 5. ],\n",
              "       [ 2. ],\n",
              "       [ 8. ],\n",
              "       [ 7. ],\n",
              "       [ 9. ],\n",
              "       [ 4. ],\n",
              "       [ 1.5],\n",
              "       [16. ],\n",
              "       [ 2. ],\n",
              "       [ 9. ],\n",
              "       [ 5. ],\n",
              "       [ 3. ],\n",
              "       [ 8. ],\n",
              "       [ 3. ],\n",
              "       [ 6. ],\n",
              "       [ 4. ],\n",
              "       [ 3. ],\n",
              "       [16. ],\n",
              "       [22. ],\n",
              "       [18. ],\n",
              "       [ 3. ],\n",
              "       [ 3. ],\n",
              "       [10. ],\n",
              "       [ 3. ],\n",
              "       [ 1. ],\n",
              "       [20. ],\n",
              "       [20. ],\n",
              "       [ 2. ],\n",
              "       [ 2. ],\n",
              "       [12. ],\n",
              "       [15. ],\n",
              "       [20. ],\n",
              "       [22. ],\n",
              "       [13. ],\n",
              "       [ 9. ],\n",
              "       [21. ],\n",
              "       [ 4. ],\n",
              "       [ 7. ],\n",
              "       [10. ],\n",
              "       [ 8. ],\n",
              "       [11. ],\n",
              "       [ 3. ],\n",
              "       [ 7. ],\n",
              "       [ 2. ],\n",
              "       [22. ],\n",
              "       [14. ],\n",
              "       [ 4. ],\n",
              "       [20. ],\n",
              "       [ 7. ],\n",
              "       [ 3. ],\n",
              "       [25. ],\n",
              "       [ 0. ],\n",
              "       [15. ],\n",
              "       [14. ],\n",
              "       [13. ],\n",
              "       [ 4. ],\n",
              "       [20. ],\n",
              "       [ 2. ],\n",
              "       [ 6. ],\n",
              "       [23. ],\n",
              "       [13. ],\n",
              "       [16. ],\n",
              "       [13. ],\n",
              "       [ 6. ],\n",
              "       [14. ],\n",
              "       [ 6. ],\n",
              "       [ 2. ],\n",
              "       [ 2. ],\n",
              "       [10. ],\n",
              "       [ 3. ],\n",
              "       [10. ],\n",
              "       [12. ],\n",
              "       [ 5. ],\n",
              "       [ 8. ],\n",
              "       [ 3. ],\n",
              "       [18. ],\n",
              "       [ 8. ],\n",
              "       [ 7. ],\n",
              "       [ 5. ],\n",
              "       [ 9. ],\n",
              "       [ 2. ],\n",
              "       [ 1. ],\n",
              "       [ 7. ],\n",
              "       [ 5. ],\n",
              "       [11. ],\n",
              "       [12. ],\n",
              "       [16. ],\n",
              "       [ 2. ],\n",
              "       [15. ]])"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2556ee4d",
      "metadata": {
        "id": "2556ee4d",
        "outputId": "011b50d0-eb56-4ca7-8151-26bc2a4d9047",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkIAAAGdCAYAAAD+JxxnAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABSq0lEQVR4nO3de3gU5dk/8O8S2U0iJCGEZBMSSDgIylEQYqqh+BIJNCoYLQqotCKIgBWwSGmLiD9teKFVPIDaE/i2IkINWAWxKYRDJaAcIoRDChjOWVAgu0DIaXP//hgzyWRDsgu7mT18P9e1V5hn7p29Z9y3e7/PM88zBhEREBEREQWgFnonQERERKQXFkJEREQUsFgIERERUcBiIUREREQBi4UQERERBSwWQkRERBSwWAgRERFRwGIhRERERAHrJr0T8GbV1dU4c+YMWrduDYPBoHc6RERE5AQRwaVLlxAXF4cWLRrv82Eh1IgzZ84gISFB7zSIiIjoOpw8eRLx8fGNxrAQakTr1q0BKBcyLCxM52yIiIjIGTabDQkJCerveGNYCDWiZjgsLCyMhRAREZGPcea2Ft4sTURERAGLhRAREREFLBZCREREFLBYCBEREVHAYiFEREREAYuFEBEREQUsFkJEREQUsFgIERERUcBiIUREREQBi4UQERERBSwWQkRERBSwWAgRERFRwGIhRERERM3uwgWgc2fgjTf0zYOFEBERUV12O7BpE/Dhh8pfu13vjPzO6tVA27bAt98C06bpm4tLhVBWVhYGDBiA1q1bIzo6GiNHjkRhYaEmpqysDFOmTEHbtm3RqlUrPPTQQzh79qwm5sSJE8jIyEBoaCiio6Mxc+ZMVFVVaWI2bdqEfv36wWQyoUuXLli2bJlDPosXL0ZiYiKCg4ORnJyMr776yuVciIiIVNnZQGIicM89wJgxyt/ERKWd3OLee4HMzNrtBQv0ywUAIC5IT0+XpUuXSkFBgeTn58tPfvIT6dChg1y+fFmNmTRpkiQkJMiGDRtk586dcuedd8qPfvQjdX9VVZX07NlT0tLSZM+ePbJu3TqJioqS2bNnqzHffvuthIaGyowZM+TAgQPy1ltvSVBQkKxfv16NWbFihRiNRvnrX/8q+/fvlwkTJkhERIScPXvW6VyaYrVaBYBYrVZXLhMREfmijz8WMRhEAO3LYFBeH3+sd4Y+7exZx0u7Z49nPsuV32+XCqH6zp07JwBk8+bNIiJSUlIiLVu2lFWrVqkxBw8eFACSl5cnIiLr1q2TFi1aiMViUWPeeecdCQsLk/LychEReeGFF6RHjx6az3rkkUckPT1d3R44cKBMmTJF3bbb7RIXFydZWVlO59IUFkJERAGiqkokPt7xl7puMZSQoMSRy1as0F7Om24Sqajw3Oe58vt9Q/cIWa1WAEBkZCQAYNeuXaisrERaWpoa0717d3To0AF5eXkAgLy8PPTq1QsxMTFqTHp6Omw2G/bv36/G1D1GTUzNMSoqKrBr1y5NTIsWLZCWlqbGOJNLfeXl5bDZbJoXEREFgK1bgVOnrr1fBDh5Uokjp4kAd90FPPpobdtLLwGVlUDLlrqlpXHT9b6xuroa06ZNw1133YWePXsCACwWC4xGIyIiIjSxMTExsFgsakzdIqhmf82+xmJsNhuuXr2Kixcvwm63Nxhz6NAhp3OpLysrC/PmzXPyChARkd8oLnZvHKG4GIiL07YVFAA9euiTz7Vcd4/QlClTUFBQgBUrVrgzH13Nnj0bVqtVfZ08eVLvlIiIqDnExro3LsD93/9pi6CwMKUXyNuKIOA6C6GpU6fis88+Q25uLuLj49V2s9mMiooKlJSUaOLPnj0Ls9msxtSfuVWz3VRMWFgYQkJCEBUVhaCgoAZj6h6jqVzqM5lMCAsL07yIiCgApKYC8fGAwdDwfoMBSEhQ4uiaRIDbbwfGjatty8oCrFbgpuseg/IslwohEcHUqVOxevVqbNy4EUlJSZr9/fv3R8uWLbFhwwa1rbCwECdOnEBKSgoAICUlBfv27cO5c+fUmJycHISFheG2225TY+oeoyam5hhGoxH9+/fXxFRXV2PDhg1qjDO5EBERAQCCgmpX9qtfDNVsL1qkxFGDTp0CWrQA8vNr2w4dAn71K91Sco4rd2E/88wzEh4eLps2bZLi4mL1VVpaqsZMmjRJOnToIBs3bpSdO3dKSkqKpKSkqPtrps8PHTpU8vPzZf369dKuXbsGp8/PnDlTDh48KIsXL25w+rzJZJJly5bJgQMHZOLEiRIREaGZjdZULk3hrDEiogDz8ceOs8cSEjh1vgl//KP2kpnN+k6w89j0eQANvpYuXarGXL16VSZPnixt2rSR0NBQefDBB6W4uFhznGPHjsnw4cMlJCREoqKi5Pnnn5fKykpNTG5urvTt21eMRqN06tRJ8xk13nrrLenQoYMYjUYZOHCgbN++XbPfmVwaw0KIiCgAVVWJ5OaKLF+u/OWU+Wuqrha55RZtEfT663pn5drvt0FERK/eKG9ns9kQHh4Oq9XK+4WIiIjqKCoCOnXSth096timB1d+v/msMSIiInLJ229rC55OnZRHsnlDEeQqL72Hm4iIiLxNdTXQsaN27cklS4BnntEvpxvFQoiIiIiadOQI0LWrtu34caBDB33ycRcOjREREVGjfv97bRHUs6fSO+TrRRDAHiEiIiK6BrsdiI4GLlyobfvLX4Ann9QvJ3djIUREREQODh4EfljnWHX6tOPzw3wdh8aIiIhI45VXtEXQwIHKUJi/FUEAe4SIiIjoB5WVygNSy8pq2z74ABgzRr+cPI2FEBEREWHvXqBPH22bxQLExOiTT3Ph0BgREVGA++1vtUXQ4MHKAzP8vQgC2CNEREQUsCoqAJNJ27ZqFfDww/rkowcWQkRERAFo1y7gjju0bd99B0RF6ZOPXjg0RkREFGB++UttETR8uDIUFmhFEMAeISIiooBRVgaEhGjbPvkEeOABffLxBiyEiIiIAsD27UBKirbtwgWgTRt98vEWHBojIiLyc1OnaougzExlKCzQiyCAPUJERER+q7QUuPlmbdv69UB6uj75eCMWQkRERH5o61Zg0CBtm9WqrBxNtTg0RkRE5GfGj9cWQY89pgyFsQhyxB4hIiIiP3H5MtC6tbZt40bgnnv0yccXsEeIiIjID2zY4FgEXbrEIqgpLISIiIh83OjRQFpa7faECcpQWKtW+uXkKzg0RkRE5KOsViAiQtu2dStw9926pOOT2CNERETkgz7/3LEIKi1lEeQqFkJEREQ+ZuRI4Cc/qd1+9lllKKz+4zOoaRwaIyIi8hEXLgBt22rbduwABg7UJx9/wB4hIiIiH/DJJ45FUFkZi6AbxUKIiIjIyw0dqgyH1XjhBWUozGTSLSW/waExIiKiuux2ZepVcTEQGwukpgJBQboc57vvgOhobdvu3cDtt7ueDjWMPUJEREQ1srOBxERlFcIxY5S/iYlKezMfZ+VKbREUFASUl7MIcjcWQkRERIBSpDz8MHDqlLb99Gml3dki5gaPI6JMgX/kkdq2uXOBqirAaHQuBXKeQURE7yS8lc1mQ3h4OKxWK8L4pDoiIv9ltys9NvWLlxoGAxAfDxQVNT68dYPHsViUUbS69u0DevZ06izoB678frNHiIiIaOvWaxcvgNJNc/KkEueh4/ztb9oiqFUroLKSRZCnsRAiIiIqLnZP3HUcRwTo3x944ona3b/7nfLA1Js4pcnjeImJiIjqj0ddb5yLxzl1CkhI0O46dAjo1s25w9CNY48QERFRaqpy747B0PB+g0GpWFJT3XacP/9ZWwRFRys3RLMIal4shIiIiIKCgDfeUP5dv4ip2V60qOl1gJw4jry+CLf2DMKECbW7XnsNOHv2+pYrohvDQoiIiAgAMjOBf/wDaN9e2x4fr7RnZt7wcY4vWYsWD2fi0KHa5iNHgOnTbyx1un4uF0JbtmzB/fffj7i4OBgMBqxZs0az32AwNPhauHChGpOYmOiwf/78+Zrj7N27F6mpqQgODkZCQgIWLFjgkMuqVavQvXt3BAcHo1evXli3bp1mv4jgxRdfRGxsLEJCQpCWlobDhw+7espERBQoMjOBY8eA3Fxg+XLlb1GR80VQ3eMcPQq8/jowdSrw+utY/Py3SHxmuBqSlKTMtu/c2b2nQK5x+WbpK1euoE+fPnjyySeR2cAXo7jeHfOff/45xo8fj4ceekjT/vLLL2NCnX7B1q1bq/+22WwYOnQo0tLS8O6772Lfvn148sknERERgYkTJwIAtm3bhtGjRyMrKwv33Xcfli9fjpEjR2L37t3o+cNcwwULFuDNN9/E+++/j6SkJMyZMwfp6ek4cOAAgoODXT11IiIKBEFBwODBN3aM7GzgueeAU6dQDQMScQwn6/zkLlkCPPPMjX0EuYncAACyevXqRmNGjBgh//M//6Np69ixo7z++uvXfM+SJUukTZs2Ul5errbNmjVLunXrpm6PGjVKMjIyNO9LTk6Wp59+WkREqqurxWw2y8KFC9X9JSUlYjKZ5MMPP2zq1ERExGq1CgCxWq1OxRMREcnHH4sYDCKAHEZnUSbI176OvbNO7wz9niu/3x69R+js2bNYu3Ytxo8f77Bv/vz5aNu2LW6//XYsXLgQVVVV6r68vDwMGjQIxjpriaenp6OwsBAXL15UY9LS0jTHTE9PR15eHgCgqKgIFotFExMeHo7k5GQ1hoiIyK3sdqUnSAR/wAx0xRF1123Yj2q0QMffPa3EkVfw6DpC77//Plq3bu0whPaLX/wC/fr1Q2RkJLZt24bZs2ejuLgYr732GgDAYrEgKSlJ856YmBh1X5s2bWCxWNS2ujEWi0WNq/u+hmLqKy8vR3l5ubpts9lcPWUiIgpkW7fCfuoMzDiH79FObf4LnsSTWKps1KwsfaPDb+QWHi2E/vrXv2Ls2LEO9+PMmDFD/Xfv3r1hNBrx9NNPIysrCyaTyZMpNSorKwvz5s3T7fOJiMi3Hdx5BbdB29tzCu3RHme0gc6uQE0e57Ghsa1bt6KwsBBPPfVUk7HJycmoqqrCsWPHAABmsxlnz57VxNRsm83mRmPq7q/7voZi6ps9ezasVqv6OnnyZJO5ExERAcpjMW6bmaFu34GvUQ2DYxEEOL8CNXmcxwqhv/zlL+jfvz/69OnTZGx+fj5atGiB6OhoAEBKSgq2bNmCyspKNSYnJwfdunVDmzZt1JgNGzZojpOTk4OUlBQAQFJSEsxmsybGZrNhx44dakx9JpMJYWFhmhcREVFjqqqAm28GfvOb2ra/4zF8jYFwWF/a2RWqqdm4XAhdvnwZ+fn5yM/PB6DclJyfn48TJ06oMTabDatWrWqwNygvLw+LFi3CN998g2+//RYffPABpk+fjscee0wtcsaMGQOj0Yjx48dj//79+Oijj/DGG29ohtSee+45rF+/Hn/4wx9w6NAhvPTSS9i5cyemTp0KQFnPaNq0aXjllVfwz3/+E/v27cMTTzyBuLg4jBw50tXTJiIicrBvH9CyJVBaWttW/Oe1GGtYfmMrVFPzcXVKWm5urgBweI0bN06Nee+99yQkJERKSkoc3r9r1y5JTk6W8PBwCQ4OlltvvVV+97vfSVlZmSbum2++kbvvvltMJpO0b99e5s+f73CslStXyi233CJGo1F69Ogha9eu1eyvrq6WOXPmSExMjJhMJhkyZIgUFhY6fa6cPk9E5EOqqkRyc0WWL1f+VlV59Di//a12WvygQSLV1T/s/Phjkfh4bUBCgtJOHufK77dBRETHOsyr2Ww2hIeHw2q1cpiMiMib1VnAUBUfrzz3y5VVoZ04TkUFUH9ez8qVwE9/Wu9YdrsyO6y4WLknKDWVPUHNxJXfbxZCjWAhRETkA7KzgYcfVvpd6qoZinL2OWFOHGd3Yib699fu/u47ICrq+lInz3Dl95sPXSUiIt9VZwFDBzVt06Y1vYChE8eZ+bNzmiIoPV3ZxSLIt3l0HSEiIiKP2rpVO4xVn4hzCxg2cpwymBAiZcCl2rY1a4ARI64rY/IyLISIiMh3ObswYVNx19i/AwNxJ3Zo2i5cAH6Y5Ex+gENjRETku5xdmLCpuAb2P4s3NUXQSKyG5G5iEeRn2CNERES+KzVVmdV1+nTD9/cYDMr+phYwrHOcUgnGzSjV7P4cwzEsYT+QWuTG5MkbsEeIiIh8V1CQMrUduLEFDH84zn/kLociqAQRGGb4ggsh+ikWQkRE5NsyM5Up8u3ba9vj452fOg/gqXWZSMVWdXsMPoDAgPCEMJeOQ76FQ2NEROT7MjOVaVzXsYDh5ctA69batg1/yMf/xLYAYnO5EKKfYyFERET+ISio8SnyDdi4ERgyRNt26RLQqlVfAH3dlBh5Mw6NERFRQBo7VlsEjR+v3G/dqpV+OVHzY48QEREFFKsViIjQtm3Z0vTEMvJP7BEiIqKAsX69YxFUWsoiKJCxECIiooDw4IPA8OG121OnKkNhISH65UT649AYERH5tYsXgchIbdv27UBysj75kHdhjxAREfmtf/7TsQi6epVFENViIURERH5p2DDtE+JnzlSGwoKD9cuJvA+HxoiIyK98/z3Qrp22bdcuoF8/ffIh78ZCiIgokFRUAEuWAEePAp07A5MnA0aj3lm5zapVwKhR2rbycr86RXIzDo0REQWKF14AQkOB6dOBt99W/oaGKu0+TgQYNEhbBM2Zo7SzCKLGsEeIiCgQvPACsHChY7vdXtu+YEHz5uQmFovyaLG69u4FevXSJx/yLewRIiLydxUVwGuvNR7z2mtKnI/5+9+1RVCrVkBlJYsgch4LISIif7dkidLz0xi7XYnzESLAHXcAjz9e2/bqq8oDU2/iWAe5gF8XIiJ/d/Soe+N0dvo0EB+vbTt4EOjeXZ98yLexR4iIyN917uzeOB399a/aIqhdO6CqikUQXT8WQkRE/m7yZCAoqPGYoCAlzkuJALfdBowfX9v2hz8A5841fWpEjWEhRETk74xGYMaMxmNmzPDaeebHjwMtWijDXzUOH276lIicwUKIiCgQLFigPGOifvdJUJDS7qVT55csARITa7c7dFDu6+7SRbeUyM8YRET0TsJb2Ww2hIeHw2q1IiwsTO90iIhunI+sLF1dDXTqpPQG1Xj7bWDKFP1yIt/hyu83Z40REQUSoxGYNk3vLBp19Khjj09RkbZniMhdODRGRERe4/XXtUVQ9+5K7xCLIPIU9ggREZHu7HYgLk6ZBVbjT38CnnpKv5woMLAQIiIiXR06BNx6q7bt5EnHRROJPIFDY0REpJusLG0R1L+/MhTGIoiaC3uEiIio2VVVARERwJUrtW1/+xvw2GO6pUQBioUQERE1q4ICx6fDFxcDZrM++VBg49AYERE1m7lztUXQ3XcrQ2Esgkgv7BEiIiKPq6wEgoOVoqfGRx8Bo0bplxMRwEKIiMiz7HZg61Zl7Cc2FkhNvb6nhHrbcVywZw/Qr5+27dw55cnxbs1Jh3MjPyAu2rx5s9x3330SGxsrAGT16tWa/ePGjRMAmld6erom5vz58zJmzBhp3bq1hIeHy5NPPimXLl3SxHzzzTdy9913i8lkkvj4ePnf//1fh1xWrlwp3bp1E5PJJD179pS1a9dq9ldXV8ucOXPEbDZLcHCwDBkyRP773/86fa5Wq1UAiNVqdfo9RESqjz8WiY8XUR6errzi45V2Xz6OC2bO1H7cvfd6KCcdzo28lyu/3y4XQuvWrZPf/OY3kp2dfc1CaNiwYVJcXKy+Lly4oIkZNmyY9OnTR7Zv3y5bt26VLl26yOjRozUnEBMTI2PHjpWCggL58MMPJSQkRN577z015ssvv5SgoCBZsGCBHDhwQH77299Ky5YtZd++fWrM/PnzJTw8XNasWSPffPONPPDAA5KUlCRXr1516lxZCBHRdfv4YxGDQfvDDChtBoPzP9DedhwnlZU5ftSaNf5xbuT9PFoIad58jUJoxIgR13zPgQMHBIB8/fXXatvnn38uBoNBTp8+LSIiS5YskTZt2kh5ebkaM2vWLOnWrZu6PWrUKMnIyNAcOzk5WZ5++mkRUXqDzGazLFy4UN1fUlIiJpNJPvzwQ6fOj4UQEV2XqirH3on6P9AJCUqcLx3HSTt2OH7E+fP+cW7kG1z5/fbIrLFNmzYhOjoa3bp1wzPPPIPz58+r+/Ly8hAREYE77rhDbUtLS0OLFi2wY8cONWbQoEEw1nkicnp6OgoLC3Hx4kU1Ji0tTfO56enpyMvLAwAUFRXBYrFoYsLDw5GcnKzG1FdeXg6bzaZ5ERG5bOtW4NSpa+8XUZZO3rrVt47jhF/8AkhOrt0eMUI5fGSkh3JqxnMj/+T2m6WHDRuGzMxMJCUl4ejRo/j1r3+N4cOHIy8vD0FBQbBYLIiOjtYmcdNNiIyMhMViAQBYLBYkJSVpYmJiYtR9bdq0gcViUdvqxtQ9Rt33NRRTX1ZWFubNm3edZ05E9IPiYvfEedtxGnH1KhAaqm1btw4YPtzDOTXDuZF/c3sh9Oijj6r/7tWrF3r37o3OnTtj06ZNGDJkiLs/zq1mz56NGTNmqNs2mw0JCQk6ZkREPik21j1x3naca/jyS2U9oLpKSoDw8GbIycPnRv7P4wsqdurUCVFRUThy5AgAwGw241zdxwsDqKqqwoULF2D+YUUts9mMs2fPamJqtpuKqbu/7vsaiqnPZDIhLCxM8yIicllqqvKwLIOh4f0GA5CQoMT50nEaMGGCtggaPVoZjWq0CHJnTh48NwoMHi+ETp06hfPnzyP2h2o8JSUFJSUl2LVrlxqzceNGVFdXI/mHgeWUlBRs2bIFlZWVakxOTg66deuGNm3aqDEbNmzQfFZOTg5SUlIAAElJSTCbzZoYm82GHTt2qDFERB4RFAS88Yby7/o/0DXbixY1vcaNtx2njitXlLf++c+1bf/+N7B8uZMH8OJzowDj6p3Yly5dkj179siePXsEgLz22muyZ88eOX78uFy6dEl++ctfSl5enhQVFcm///1v6devn3Tt2lXKysrUYwwbNkxuv/122bFjh/znP/+Rrl27aqbPl5SUSExMjDz++ONSUFAgK1askNDQUIfp8zfddJP8/ve/l4MHD8rcuXMbnD4fEREhn3zyiezdu1dGjBjB6fNE1HwaWtsmIcE9a+ToeJyNGx0nZ9VbCq7Zc3LbccgveHT6fG5ursOCiQBk3LhxUlpaKkOHDpV27dpJy5YtpWPHjjJhwgSxWCyaY5w/f15Gjx4trVq1krCwMPn5z3/e6IKK7du3l/nz5zvksnLlSrnlllvEaDRKjx49rrmgYkxMjJhMJhkyZIgUFhY6fa4shIjohlVVieTmiixfrvy93mncXnKcsWO1tcbPf359abgzJ7cfh3yeK7/fBhERvXqjvJ3NZkN4eDisVivvFyKigGazOd73s2ULb70h7+TK7zefPk9ERI364gvHIujKFRZB5B9YCBER0TU99BAwbFjt9uTJyqBY/TWDiHwVnz5PREQOLl50XA16+3btqtFE/oA9QkREpPHpp45F0NWrLILIP7EQIiIi1fDhwAMP1G4//7wyFBYcrF9ORJ7EoTEiIsL33wPt2mnbdu4E+vfXJx+i5sIeISKiAPePfzgWQeXlLIIoMLAQIiIKYIMHAz/9ae32b36jDIUZjbqlRNSsODRGRNQQux3YuhUoLlaeXJ6a6lfPqzp7Fqj//OlvvgF699YnHyK9sEeIiKi+7GwgMRG45x5gzBjlb2Ki0u4Hli/XFkEhIUBFBYsgCkwshIiI6srOBh5+GDh1Stt++rTS7sPFkAgwYAAwdmxt2//7f0BpKdCypX55EemJzxprBJ81RhRg7Hal56d+EVTDYADi44GiIp8bJjt9Wkm9rgMHgFtv1ScfIk/is8aIiK7H1q3XLoIApUvl5EklzocsXaotgtq2BaqqWAQRASyEiIhqFRe7N05nIkDPnsCTT9a2LVyorBnkYx1aRB7DWWNERDViY90bp6MTJ4COHbVt//0v0LWrPvkQeSv2CBER1UhNVcaQDIaG9xsMQEKCEufF3nlHWwR16KDc/sQiiMgRCyEiohpBQcAbbyj/rl8M1WwvWuS140rV1UDnzsDkybVtb70FHD8OtOD/2hM1iP+nQURUV2am8syJ9u217fHxSntmpj55NeHoUaU++/bb2raiImDqVP1yIvIFvEeIiKi+zExgxAifWVl60SJg+vTa7W7dgIMHrz3CR0S1WAgRETUkKEh5EJcXs9uBuDjg3Lnatj/+EZgwQb+ciHwNCyEiIh9UWAh0765tO3FCuZebiJzHe4SIiHzM/PnaIqhvX+VGaRZBRK5jjxARkY+oqgIiI4FLl2rb3n8feOIJ/XIi8nUshIiIfEBBAdCrl7btzBmfWNuRyKtxaIyIyMu99JK2CLrrLmUojEUQ0Y1jjxARkZeqrARCQ5UhsRorVgCPPKJfTkT+hoUQEZEXys8Hbr9d23buHNCunS7pEPktDo0REXmZX/1KWwSlpSlPkmcRROR+7BEiIvIS5eVAcLC2bfVqYORIXdIhCggshIiIvMBXXwHJydq28+eV6fJE5DkcGiMi0tm0adoi6P77laEwFkFEnsceISIinVy9qswKq2vtWuAnP9EnH6JAxEKIiEgHX34J3H23tq2kBAgP1yUdooDFoTEiomb29NPaIuiRR5ShMBZBRM2PPUJERM3kyhWgVSttW06OMj2eiPTBHiEiombwr385FkE2G4sgIr2xECIi8rDWrYH09Nrtn/1MGQpr3Vq3lIjoBxwaIyLykO+/d1wNevNmYNAgffIhIkcu9wht2bIF999/P+Li4mAwGLBmzRp1X2VlJWbNmoVevXrh5ptvRlxcHJ544gmcOXNGc4zExEQYDAbNa/78+ZqYvXv3IjU1FcHBwUhISMCCBQscclm1ahW6d++O4OBg9OrVC+vWrdPsFxG8+OKLiI2NRUhICNLS0nD48GFXT5mIyGXvvONYBJWUsAgi8jYuF0JXrlxBnz59sHjxYod9paWl2L17N+bMmYPdu3cjOzsbhYWFeOCBBxxiX375ZRQXF6uvZ599Vt1ns9kwdOhQdOzYEbt27cLChQvx0ksv4Y9//KMas23bNowePRrjx4/Hnj17MHLkSIwcORIFBQVqzIIFC/Dmm2/i3XffxY4dO3DzzTcjPT0dZWVlrp42EZHTDAZg8uTa7Y4dOSuMyGvJDQAgq1evbjTmq6++EgBy/Phxta1jx47y+uuvX/M9S5YskTZt2kh5ebnaNmvWLOnWrZu6PWrUKMnIyNC8Lzk5WZ5++mkREamurhaz2SwLFy5U95eUlIjJZJIPP/zQmdMTq9UqAMRqtToVT0SB7cwZEaXkqX2tXKl3VkSBx5Xfb4/fLG21WmEwGBAREaFpnz9/Ptq2bYvbb78dCxcuRFVVlbovLy8PgwYNgtFoVNvS09NRWFiIixcvqjFp9aZbpKenIy8vDwBQVFQEi8WiiQkPD0dycrIaQ0TkLq+9BsTFadsuXQJ++lN98iEi53j0ZumysjLMmjULo0ePRlhYmNr+i1/8Av369UNkZCS2bduG2bNno7i4GK+99hoAwGKxICkpSXOsmJgYdV+bNm1gsVjUtroxFotFjav7voZi6isvL0d5ebm6bbPZrue0iSjAGAza7R49gDqj9ETkxTxWCFVWVmLUqFEQEbzzzjuafTNmzFD/3bt3bxiNRjz99NPIysqCyWTyVEpNysrKwrx583T7fCLyLSdPAh06aNv++U/loalE5Bs8MjRWUwQdP34cOTk5mt6ghiQnJ6OqqgrHjh0DAJjNZpw9e1YTU7NtNpsbjam7v+77Goqpb/bs2bBarerr5MmTTpwtEQWiV15xLIJKS1kEEfkatxdCNUXQ4cOH8e9//xtt27Zt8j35+flo0aIFoqOjAQApKSnYsmULKisr1ZicnBx069YNbdq0UWM2bNigOU5OTg5SUlIAAElJSTCbzZoYm82GHTt2qDH1mUwmhIWFaV5ERPUZDMCcObXbycnKrdEhIfrlRETXx+WhscuXL+PIkSPqdlFREfLz8xEZGYnY2Fg8/PDD2L17Nz777DPY7Xb1fpzIyEgYjUbk5eVhx44duOeee9C6dWvk5eVh+vTpeOyxx9QiZ8yYMZg3bx7Gjx+PWbNmoaCgAG+88QZef/119XOfe+45/PjHP8Yf/vAHZGRkYMWKFdi5c6c6xd5gMGDatGl45ZVX0LVrVyQlJWHOnDmIi4vDyJEjb+SaEVGA+vZboHNnbdsXXwBDh+qTDxG5gatT0nJzcwWAw2vcuHFSVFTU4D4AkpubKyIiu3btkuTkZAkPD5fg4GC59dZb5Xe/+52UlZVpPuebb76Ru+++W0wmk7Rv317mz5/vkMvKlSvllltuEaPRKD169JC1a9dq9ldXV8ucOXMkJiZGTCaTDBkyRAoLC50+V06fJ2pGVVUiubkiy5crf6uq9D1OPbNnO06Nr/c/W57lofMi8keu/H4bRER0qcB8gM1mQ3h4OKxWK4fJiDwpOxt47jng1Knatvh44I03gMzM5j9OHSJAi3o3EaSlKU+NbzYeOC8if+bK7zcfukpE+srOBh5+WPsjDwCnTyvt2dnNe5w6Cgsdi6DNm3Uogtx8XkRUiz1CjWCPEJGH2e1AYqLjj3wNg0Hp+SgqAoKCPH+cOqZNUzpc6qqoAFq2dOrt7uGB8yIKBOwRIiLfsHXrtX/kAWVc6uRJJa45jvNDqMGgLYJGjlTam7UIAtx6XkTUMBZCRKSf4mL3xLnpOAUFjkNheXnA6tXOHd7t3HV9iOiaWAgRkX5iY90T54bjTJwI9OqlbauqAu6807lDe4S7rg8RXRMLISLST2qqco9L/Yd11TAYgIQEJc5Dx6muVnb/6U+1bWPHKqNOut92467rQ0TXxEKIiPQTFFR7M079H/ua7UWLmq5IrvM4u3c7Hnr3buDvf3cqe89z1/UhomtiIURE+srMBP7xD6B9e217fLzS7uw6OS4eZ+xYoH9/bajdDtx+u4v5e5q7rg8RNYjT5xvB6fNEzchuV2Y/FRcr97ykpl5fT0cTx6mqcpz9NXEi8N57N5i/p7nr+hAFAFd+v1kINYKFEJF/ycsDfvQjbVtBAdCjhz75EJFnuPL77fJDV4mIfNEDDwCffqptq7lRmogCF+8RIiK/VlmpFDt1i6Dp02sXTiSiwMYeISLyW5s2Affco20rLARuuUWXdIjIC7EQIiK/NGQIsHGjto1DYURUH4fGiMivlJcrxU7dIug3v+FQGBE1jD1CROQ38vMd1wH69lsgKUmXdIjIB7BHiIj8wq9/7VgEibAIIqLGsUeIiHxaeTkQHKxty84GHnxQn3yIyLewECIin/X118DAgdq28+eByEh98iEi38OhMSLySdOna4ug++5ThsJYBBGRK9gjREQ+5epVIDRU2/bZZ0BGhj75EJFvYyFERD5j2zbgrru0bRcvAhERuqRDRH6AQ2NE5BMmTdIWQaNGKUNhLIKI6EawR4iIvNqVK0CrVtq2f/0LuPdeffIhIv/CQoiIvFZDzwqz2YDWrXVJh4j8EIfGiMgr/exn2iJo3DhlKIxFEBG5E3uEiMirXLoEhIVp2zZtAn78Y13SISI/xx4hIvIaOTmORdDlyyyCiMhzWAgRkVcYNQoYOrR2e9IkZSjs5pv1y4mI/B+HxohIVyUlQJs22rZt24CUFF3SIaIAwx4hItLN2rWORVBpKYsgImo+LISISBf33ae8akyfrgyFhYTolxMRBR4OjRFRszp/HoiK0rZ9/TVwxx365ENEgY09QkTUbLKzHYugsjIWQUSkHxZCRNQshgwBHnqodvtXv1KGwkwm/XIiIuLQGBF51LlzQEyMti0/H+jTR5d0iIg02CNERB6zYoW2CDIagYoKFkFE5D1YCBGR24koU+BHj65tmzcPKC8HWrbULy8iovo4NEZEbnXmDNC+vbZt/37gttv0yYc8yG4Htm4FiouB2FggNRUICtI7KyKXuNwjtGXLFtx///2Ii4uDwWDAmjVrNPtFBC+++CJiY2MREhKCtLQ0HD58WBNz4cIFjB07FmFhYYiIiMD48eNx+fJlTczevXuRmpqK4OBgJCQkYMGCBQ65rFq1Ct27d0dwcDB69eqFdevWuZwLEbnP++9ri6CICKCykkWQX8rOBhITgXvuAcaMUf4mJirtRD7E5ULoypUr6NOnDxYvXtzg/gULFuDNN9/Eu+++ix07duDmm29Geno6ysrK1JixY8di//79yMnJwWeffYYtW7Zg4sSJ6n6bzYahQ4eiY8eO2LVrFxYuXIiXXnoJf/zjH9WYbdu2YfTo0Rg/fjz27NmDkSNHYuTIkSgoKHApFyK6cSLKfT8/+1lt2//+L3DxInAT+539T3Y28PDDwKlT2vbTp5V2FkPkS+QGAJDVq1er29XV1WI2m2XhwoVqW0lJiZhMJvnwww9FROTAgQMCQL7++ms15vPPPxeDwSCnT58WEZElS5ZImzZtpLy8XI2ZNWuWdOvWTd0eNWqUZGRkaPJJTk6Wp59+2ulcmmK1WgWAWK1Wp+KJAtGJEyJKKVT7KizUOyvymKoqkfh4x//oNS+DQSQhQYkj0okrv99uvVm6qKgIFosFaWlpalt4eDiSk5ORl5cHAMjLy0NERATuqLOCWlpaGlq0aIEdO3aoMYMGDYLRaFRj0tPTUVhYiIsXL6oxdT+nJqbmc5zJpb7y8nLYbDbNi4iu7b33gA4darfj4pTbRm65Rb+cyMO2bnXsCapLBDh5Uokj8gFuLYQsFgsAIKbeoiExMTHqPovFgujoaM3+m266CZGRkZqYho5R9zOuFVN3f1O51JeVlYXw8HD1lZCQ4MRZEwUeEaBrV2DSpNq2RYuUkZEWnIvq34qL3RtHpDP+T1Yds2fPhtVqVV8nT57UOyUir1NUpBQ7R47Uth09Cjz3nH45UTOKjXVvHJHO3FoImc1mAMDZs2c17WfPnlX3mc1mnDt3TrO/qqoKFy5c0MQ0dIy6n3GtmLr7m8qlPpPJhLCwMM2LiGq9+SbQqVPtdpcuylBY3Tbyc6mpQHw8YDA0vN9gABISlDgiH+DWQigpKQlmsxkbNmxQ22w2G3bs2IGUlBQAQEpKCkpKSrBr1y41ZuPGjaiurkZycrIas2XLFlRWVqoxOTk56NatG9q0aaPG1P2cmpiaz3EmFyJyTnW1Mi2+bq/Pu+8Chw9zKCzgBAUBb7yh/Lt+MVSzvWgR1xMi3+HqndiXLl2SPXv2yJ49ewSAvPbaa7Jnzx45fvy4iIjMnz9fIiIi5JNPPpG9e/fKiBEjJCkpSa5evaoeY9iwYXL77bfLjh075D//+Y907dpVRo8ere4vKSmRmJgYefzxx6WgoEBWrFghoaGh8t5776kxX375pdx0003y+9//Xg4ePChz586Vli1byr59+9QYZ3JpDGeNEYn897+OE4NOnNA7K9Ldxx87zh5LSFDaiXTmyu+3y4VQbm6uAHB4jRs3TkSUaetz5syRmJgYMZlMMmTIECmsN5f2/PnzMnr0aGnVqpWEhYXJz3/+c7l06ZIm5ptvvpG7775bTCaTtG/fXubPn++Qy8qVK+WWW24Ro9EoPXr0kLVr12r2O5NLY1gIUaBbsED7O9e7t0h1td5ZNaGqSiQ3V2T5cuUvp3F7Dq81eSlXfr8NIiJ69UZ5O5vNhvDwcFitVt4vRAHFbgeiooCSktq2pUu1CyZ6pexsZfyu7vTu+HhlKCczU7+8iKhZufL7zdF9ItI4cEBZDbpuEXT6tI8UQVztmIhcxEKIiFQvvwz06FG7feedyo3ScXH65eQUu13pCWqog7umbdo0JY6IqA4+BYiIUFkJtGoFVFTUti1fDowerV9OLnFltePBg5stLSLyfiyEiALcN98Afftq286eBeotAO/duNoxEV0nDo0RBbDf/EZbBN1zj9J54lNFEMDVjonourFHiCgAVVQAJpO27R//AB56SJ98bljNasenTzd8n5DBoOznasdEVA97hIgCzM6djkXQ99/7cBEEcLVjIrpuLISIAsjzzwMDBtRuZ2QoHSht2+qXk9tkZirdWu3ba9vj45V2riNERA3g0BhRACgrA0JCtG2ffgrcd58bDm63K7OxiouVe3BSU/XrecnMBEaM8J58iMjrsRAi8nN5ecCPfqRtu3gRiIhww8G9cSXnoCBOkScip3FojMiPTZ6sLYIeflgZCnNbEcSVnInIx/FZY43gs8bIV5WWAjffrG374gtg6FA3fYDdDiQmXnsRw5pZWkVFHJYiombHZ40RBbDNmx2LIKvVjUUQ4NpKzkREXoyFEJEf+fnPtbfHPP64UpO4vUOTKzkTkZ/gzdJEfuDSJcdiJzfXg/cMcyVnIvIT7BEi8nH//rdjEXT5socnTtWs5Fx/8cIaBgOQkMCVnInI67EQIvJhjz4K3Htv7fbEicpQWP17hNyOKzkTkZ9gIUTkg6xWpd746KPati+/BN57rxmT4ErOROQHeI8QkY9Z96kdGQ9oe1pKSx1Xjm4WXMmZiHwce4SIfMgDA4o1RdBzWASJT0DI5zouXlizkvPo0cpfFkFE5EPYI0TkAy5cqHkwau0srK8wAAOwEzhtUFZy5nAUEZHL2CNE5OVWr3Z8OnwZTEoRBCh3RwPAtGnKis9EROQ0FkJEXuzee7WdPL9CFgQGmFChDeRKzkRE14VDY0Re6Nw5ICZG27YHfdEX3zT+Rq7kTETkEvYIEXmZjz7SFkE33QRU5GxuuggCuJIzEZGLWAgReQkR4K67lEUSa7z0ElBZCbS8526u5ExE5AEcGiPyAsXFQFyctq2gAOjR44eNmpWcH35YKXpqbpAGuJIzEdENYI8Qkc7+7/+0RVB4uNILpBZBNbiSMxGR27FHiEgnIsDttwPf1Ln1Z/58YNasRt7ElZybZrfz+hCR01gIEeng5EmgQwdt26FDQLduTry5ZiVncpSdDTz3HHDqVG1bfLwyrMgeMyJqAIfGiJrZn/6kLYLMZqCqyskiiK4tO1u5h6puEQQAp08r7dk6PoaEiLwWCyGiZiKiFDsTJ9a2vf66MoLDkZsbZLcrPUF1byKvwZW3iagRHBojagZFRUCnTtq2o0cd2+g6bd3q2BNUV92VtzmsSER1sEeIyMPefltb8HTqpHRMsAhyI2dX1ObK20RUD3uEiDykuhro2FHbUbFkCfDMM/rl5LecXVGbK28TUT0shIg84MgRoGtXbdvx444zxchNUlOV2WGnTzd8n5DBoOznyttEVA+Hxojc7Pe/1xZBvXopvUMsgjyoZuVtwPExJFx5m4gawUKIyE3sdiAyEpg5s7Zt6VJg795rPyKM3IgrbxPRdXB7IZSYmAiDweDwmjJlCgBg8ODBDvsmTZqkOcaJEyeQkZGB0NBQREdHY+bMmaiqqtLEbNq0Cf369YPJZEKXLl2wbNkyh1wWL16MxMREBAcHIzk5GV999ZW7T5cIAHDwoPKU+IsXa9tOnwZ+9jPdUgpMmZnAsWNAbi6wfLnyt6iIRRARXZPb7xH6+uuvYa+zVkdBQQHuvfde/PSnP1XbJkyYgJdfflndDg0NVf9tt9uRkZEBs9mMbdu2obi4GE888QRatmyJ3/3udwCAoqIiZGRkYNKkSfjggw+wYcMGPPXUU4iNjUV6ejoA4KOPPsKMGTPw7rvvIjk5GYsWLUJ6ejoKCwsRHR3t7tOmAPbKK8CcObXbAwcC27ezF0g3XHmbiFxgEGnozkL3mTZtGj777DMcPnwYBoMBgwcPRt++fbFo0aIG4z///HPcd999OHPmDGJiYgAA7777LmbNmoXvvvsORqMRs2bNwtq1a1FQUKC+79FHH0VJSQnWr18PAEhOTsaAAQPw9ttvAwCqq6uRkJCAZ599Fr/61a+cyt1msyE8PBxWqxVhYWE3cBXIH1VWAmFhQFlZbdsHHwBjxuiXExERufb77dF7hCoqKvD3v/8dTz75JAx1/t/jDz74AFFRUejZsydmz56N0tJSdV9eXh569eqlFkEAkJ6eDpvNhv3796sxaWlpms9KT09HXl6e+rm7du3SxLRo0QJpaWlqDNGN2LsXMBq1RZDFwiKIiMjXeHT6/Jo1a1BSUoKf1blRYsyYMejYsSPi4uKwd+9ezJo1C4WFhcj+4TlAFotFUwQBULctFkujMTabDVevXsXFixdht9sbjDl06NA18y0vL0d5ebm6bbPZXD9p8nu//S3w6qu124MHK7eiEBGR7/FoIfSXv/wFw4cPR1xcnNo2sc6Dlnr16oXY2FgMGTIER48eRefOnT2ZTpOysrIwb948XXMg71VRAZhM2rZVq5TneRIRkW/y2NDY8ePH8e9//xtPPfVUo3HJyckAgCNHjgAAzGYzzp49q4mp2TabzY3GhIWFISQkBFFRUQgKCmowpuYYDZk9ezasVqv6OnnypBNnSoFg1y7HIui771gEERH5Oo8VQkuXLkV0dDQyMjIajcvPzwcAxP6w9H1KSgr27duHc+fOqTE5OTkICwvDbbfdpsZs2LBBc5ycnBykpKQAAIxGI/r376+Jqa6uxoYNG9SYhphMJoSFhWleRL/8JXDHHbXbw4crixdHRemXExERuYl4gN1ulw4dOsisWbM07UeOHJGXX35Zdu7cKUVFRfLJJ59Ip06dZNCgQWpMVVWV9OzZU4YOHSr5+fmyfv16adeuncyePVuN+fbbbyU0NFRmzpwpBw8elMWLF0tQUJCsX79ejVmxYoWYTCZZtmyZHDhwQCZOnCgRERFisVicPg+r1SoAxGq13sDVIF919aqIUvLUvj79VO+siIioKa78fnukEPriiy8EgBQWFmraT5w4IYMGDZLIyEgxmUzSpUsXmTlzpkOix44dk+HDh0tISIhERUXJ888/L5WVlZqY3Nxc6du3rxiNRunUqZMsXbrUIY+33npLOnToIEajUQYOHCjbt2936TxYCPm4qiqR3FyR5cuVv1VVTr81L8+xCLpwwWOZEhGRG7ny++3xdYR8GdcR8mHZ2cBzz2kf/R4frzyPqolVhidPBt55p3b7oYeUJzQQEZFvcOX3m0+fJ/+Tna3cxVy/xj99Wmm/xnOnSkuBm2/Wtq1fD/ywWDkREfkhPnSV/IvdrvQENdTRWdM2bZoSV8eWLY5FkNXKIoiIyN+xECL/snWrdjisPhHg5Ekl7gdPPgn8+Me1IY89poRxNJSIyP9xaIz8S3Gx03GXLwOtW2ubN24E7rnH/WkREZF3YiFE/uWH9aiasuHMrUirVwRdugS0auWBnIiIyGtxaIz8S2qqMjuszkN+NQwGjA5dg7Rf9lWbJkxQhsJYBBERBR72CJF/CQpSpsg//LBSDNW5adqKcERICVBaG751K3D33c2fJhEReQf2CJH/ycxUpsi3b682fY5hiECJJqy0lEUQEVGgYyFE/ikzEzh2DMjNxcj+J/ETfK7u+sUvlI6ikBD90iMiIu/AoTHyWxesQWh7z2BN244dwMCBuqRDREReiD1C5JfWrAHattW2lZWxCCIiIi0WQuR37r0XePDB2u0XXlCGwkwm/XIiIiLvxKEx8hvffQdER2vbdu8Gbr9dn3yIiMj7sUeI/MLKldoiKCgIKC9nEURERI1jIUQ+TUSZAv/II7Vtc+cCVVWA0ahfXkRE5Bs4NEY+y2JxfKLGvn1Az5765ENERL6HPULkk/72N20R1Lo1UFnJIoiIiFzDQoh8igjQvz/wxBO1bVlZgM0G3MT+TSIichF/Osj72O3KQ8CKi5Vun9RUICgIp04BCQna0EOHgG7d9EnTZdc4LyIi0g8LIfIu2dnAc88Bp07VtsXH48/3f4IJ7/RTm8xmJcRn6ohrnBfeeEN5HAgREemCQ2PkPbKzlafG1ykWBED3UzmaIui115ROFZ8qguqdFwDg9GmlPTtbn7yIiAgGERG9k/BWNpsN4eHhsFqtCAsL0zsd/2a3A4mJmmLhGDoiCcc0YUcK7eh8i69UQGjwvDQMBqVnqKjIhyo7IiLv5srvN3uEyDts3aopFhZjsqYISsK3sKMFOp/ZqkNyN6DeeTkQAU6eVOKIiKjZ8R4h8g7FxQCAahiQiGM4iQ7qriV4Bs/gXU2cz3A2X187LyIiP8FCiLxDbCyOoDO64oim+Rg6oiNOaOJ8irP5+tp5ERH5CQ6NkVf4w9eDNEXQbdiPahhqiyCDQZk7n5qqU4bXKTVVuQfIYGh4v6+eFxGRn2AhRLqy24F27YBfvlD7VfwLxmM/ekItHWqKiEWLfO+G4qAgZYo84FgM+fJ5ERH5CRZCpJuDB5XVoL//vrbt1B/X4cn4f2kD4+OBf/zDd9fbycxU8m/fXtvu6+dFROQHOH2+EQEzfd5dKx67cJxXXwV++9va7QEDgB07fugk8dcVmP31vIiIvIwrv9+8WTrQuWvFYyePU1UFhIcDpaW1YX//OzB2bJ1jBQUBgwe7fCpez1/Pi4jIh3FoLJC5a8VjJ4+zdy/QsqW2CLJY6hVBREREzYiFUKCy25UenIZGRmvapk1T4txwnDm/qUafPrW7Bg0CqquBmJjryp6IiMgtWAgFKneteNzEcSrkJhhOnsArv6v9qq1aBWzefO0Z5URERM2F9wgFKneteNzI/t24Hf2xW9P23XdAVJRzH01ERORp7BEKVO5a8fga+2digaYISh9wASIsgoiIyLuwRyhQ1ax4fPp0w/f31DwVvakVj+sdpwwmhKBME7ImajxG5P3RjckTERG5B3uEApW7Vjyuc5wdSHYogi4gEiPey+B6OURE5JVYCAUyd614nJmJZ4cdxp3YrjY9iGxIQge0+fjPXDmZiIi8FofGAl1mJjBixHWveFxaCtx8MwB0Vts+v38Jhv1PBTD5CGA0eiZvIiIiN3B7j9BLL70Eg8GgeXXv3l3dX1ZWhilTpqBt27Zo1aoVHnroIZw9e1ZzjBMnTiAjIwOhoaGIjo7GzJkzUVVVpYnZtGkT+vXrB5PJhC5dumDZsmUOuSxevBiJiYkIDg5GcnIyvvrqK3efrn+oWfF49Gjlr5NF0NatNUVQLSvCMOzTKcD06UDnzs4vykhERKQDjwyN9ejRA8XFxerrP//5j7pv+vTp+PTTT7Fq1Sps3rwZZ86cQWadoRO73Y6MjAxUVFRg27ZteP/997Fs2TK8+OKLakxRUREyMjJwzz33ID8/H9OmTcNTTz2FL774Qo356KOPMGPGDMydOxe7d+9Gnz59kJ6ejnPnznnilAPO+PHKoog1xuADCAwIw6XaRldXqCYiImpu4mZz586VPn36NLivpKREWrZsKatWrVLbDh48KAAkLy9PRETWrVsnLVq0EIvFosa88847EhYWJuXl5SIi8sILL0iPHj00x37kkUckPT1d3R44cKBMmTJF3bbb7RIXFydZWVlOn4vVahUAYrVanX6Pv7t0SUSZZlb72hA1yrGx5mUwiCQkiFRV6Z06EREFCFd+vz3SI3T48GHExcWhU6dOGDt2LE6cOAEA2LVrFyorK5GWlqbGdu/eHR06dEBeXh4AIC8vD7169UJMnWcvpKenw2azYf/+/WpM3WPUxNQco6KiArt27dLEtGjRAmlpaWpMQ8rLy2Gz2TQvqrVxI9C6tbbt0rqt+J/vV177Tc6uUE1ERKQDtxdCycnJWLZsGdavX4933nkHRUVFSE1NxaVLl2CxWGA0GhEREaF5T0xMDCwWCwDAYrFoiqCa/TX7Goux2Wy4evUqvv/+e9jt9gZjao7RkKysLISHh6uvhISE67oG/mjMGGDIkNrt8eOVGqdVSSOP6ajL2ZWsiYiImpHbZ40NHz5c/Xfv3r2RnJyMjh07YuXKlQgJCXH3x7nV7NmzMWPGDHXbZrMFfDFktQL16lZs2VJnnUV3rVBNRESkA4+vIxQREYFbbrkFR44cgdlsRkVFBUpKSjQxZ8+ehdlsBgCYzWaHWWQ1203FhIWFISQkBFFRUQgKCmowpuYYDTGZTAgLC9O8Atn69Y5FUGlpvcWma1aWvtYTVA0GICGh6RWqiYiIdODxQujy5cs4evQoYmNj0b9/f7Rs2RIbNmxQ9xcWFuLEiRNISUkBAKSkpGDfvn2a2V05OTkICwvDbbfdpsbUPUZNTM0xjEYj+vfvr4mprq7Ghg0b1Bhq3IMPAnU69zB1qjIU5tCp564VqomIiPTg7ju1n3/+edm0aZMUFRXJl19+KWlpaRIVFSXnzp0TEZFJkyZJhw4dZOPGjbJz505JSUmRlJQU9f1VVVXSs2dPGTp0qOTn58v69eulXbt2Mnv2bDXm22+/ldDQUJk5c6YcPHhQFi9eLEFBQbJ+/Xo1ZsWKFWIymWTZsmVy4MABmThxokRERGhmozUlEGeNXbjgOPFr+3Yn3vjxxyLx8do3JiQo7URERM3Ild9vtxdCjzzyiMTGxorRaJT27dvLI488IkeOHFH3X716VSZPnixt2rSR0NBQefDBB6W4uFhzjGPHjsnw4cMlJCREoqKi5Pnnn5fKykpNTG5urvTt21eMRqN06tRJli5d6pDLW2+9JR06dBCj0SgDBw6U7U79otfyi0KoqkokN1dk+XLlbyPT2NescSyCyspc+KxLl0RGjhTp1Uv5e+nSjWZ/Y1w4dyIi8h+u/H4bRBp69DgBys3S4eHhsFqtvnm/UHY28NxzwKk6M7vi45WhrHrP/0pPB/71r9rtmTOBBQtc+KyRI4FPPnFsHzECWLPGlazdw4VzJyIi/+LK7zcLoUb4dCGUna2s6lz/P2/NfTs/PFT1u++A6GhtyK5dQL9+LnzWtYqgGs1dDDl57kRE5J9YCLmJzxZCdjuQmKjtDanLYADi47FqYRFGPRqkaS4rc/E5qVevAqGhTceVljZwp7UHOHnuKCriDdxERH7Kld9vj88aIx1s3XrtQgCAiGDQyb9riqA5c4Dq6ut4WPzMme6Nu1FNnDtXuiYiorrcvqAieYFGVnG2IAax0K6uvXcv0KvXdX7W4cPujbtRzq5gzZWuiYgI7BHyT9dYxfnvGKspglqFVKGy8gaKIADo2tW9cTeKK10TEZELeI9QI3z+HqHTpwERCIAB+Bq7cIca8mr4/+LX53954/fJeOs9Qj+cuwPeI0RE5Pd4j1Cgq7Pa82m0RwuIpgg6iFvx6792dU8hEBKizAprzIgRzVMEAVzpmoiIXMJCyF9lZuIvk75GPGpvHI7GWVTFJ6L7x6+6d/r4mjXXLob0WEcoM1OZIt++vbY9Pp5T54mISINDY43w1aExEeC224BDh2rb/jB2N2Y8ZVMeflq/N+TyZeDxx4GjR4HOnYG//Q1o1cr1D756VZkddviwck/QwoXN1xPUELtdmR1WXKzcE9TQuRMRkd/hOkJu4ouF0PHjyi0ydR0+DHTpco03DBwIfP21Y/uAAcBXX7k7PSIiIo/jPUIBaskSbRHUsaPSKeJyEQQo7QMHujtFIiIir8JCyA9UVysF0JQptW2LFwPHjgEtrvVf+PLlaxdBNb7+WokjIiLyUyyEfNzRo8ptL8eP17YVFQGTJzfxxscfd+4DnI0jIiLyQSyEfNhrr2mHvW69tbZ3qElHjzr3Ic7GERER+SAWQj7IbgdiYoDnn69t+9OfgAMHHJfOuabOnd0bR0RE5IP4rDEfc+iQ0vNT18mTyhI5Lvnb34DWrZ2LIyIi8lPsEfIhWVnaIuiOO5ShMJeLIEBZJ2jAgMZjBgy4vvWEiIiIfAR7hHxAVRUQEQFcuVLb9re/AY89doMH/uorriNEREQBjYWQl9u3D+jdW9tWXAyYzXDPyslffeW+laWJiIh8DAshLzZ3LvDyy7XbqanA5s0/3BCdnQ089xxwqvZZYoiPVx446uqztFq1AlavdkvOREREvoSFkBeqqACCg5VnhtVYuRL46U9/2MjOBh5+WBsAAKdPK+18sCgREZFTeLO0l9mzBzCZtDXOuXN1iiC7XekJaugRcTVt06YpcURERNQoFkJe5IUXgH79arfvvVepbdq1qxO0dat2OKw+EWU+/datHsuTiIjIX3BozAuUlytDYXWtWQOMGNFAcHGxcwd1No6IiCiAsRDS2Y4dwJ13atvOnwciI6/xhthY5w7sbBwREVEA49CYjn7xC20RNGKEMrJ1zSIIUKaOxcdf+1kaBgOQkKDEERERUaPYI6ST+nXMunXA8OFOvDEoSJki//DDykHq3jRdc9BFi1xfT4iIiCgAsUdIB/XvdS4pcbIIqpGZqUyRb99e2x4fz6nzRERELjCINDQPmwDAZrMhPDwcVqsVYWFhbj32qFFA167Aq6/ewEHcsbI0ERGRn3Hl95tDYzpZudINBwkKAgYPdsOBiIiIAhOHxoiIiChgsRAiIiKigMVCiIiIiAIWCyEiIiIKWCyEiIiIKGCxECIiIqKAxUKIiIiIAhYLISIiIgpYbi+EsrKyMGDAALRu3RrR0dEYOXIkCgsLNTGDBw+GwWDQvCZNmqSJOXHiBDIyMhAaGoro6GjMnDkTVVVVmphNmzahX79+MJlM6NKlC5YtW+aQz+LFi5GYmIjg4GAkJyfjq6++cvcpExERkY9yeyG0efNmTJkyBdu3b0dOTg4qKysxdOhQXLlyRRM3YcIEFBcXq68FCxao++x2OzIyMlBRUYFt27bh/fffx7Jly/Diiy+qMUVFRcjIyMA999yD/Px8TJs2DU899RS++OILNeajjz7CjBkzMHfuXOzevRt9+vRBeno6zp075+7TJiIiIh/k8WeNfffdd4iOjsbmzZsxaNAgAEqPUN++fbFo0aIG3/P555/jvvvuw5kzZxATEwMAePfddzFr1ix89913MBqNmDVrFtauXYuCggL1fY8++ihKSkqwfv16AEBycjIGDBiAt99+GwBQXV2NhIQEPPvss/jVr37VZO6efNYYEREReYYrv98ev0fIarUCACIjIzXtH3zwAaKiotCzZ0/Mnj0bpaWl6r68vDz06tVLLYIAID09HTabDfv371dj0tLSNMdMT09HXl4eAKCiogK7du3SxLRo0QJpaWlqDBEREQU2jz50tbq6GtOmTcNdd92Fnj17qu1jxoxBx44dERcXh71792LWrFkoLCxEdnY2AMBisWiKIADqtsViaTTGZrPh6tWruHjxIux2e4Mxhw4dajDf8vJylJeXq9s2m+06z5yIiIh8gUcLoSlTpqCgoAD/+c9/NO0TJ05U/92rVy/ExsZiyJAhOHr0KDp37uzJlBqVlZWFefPmObSzICIiIvIdNb/bztz947FCaOrUqfjss8+wZcsWxMfHNxqbnJwMADhy5Ag6d+4Ms9nsMLvr7NmzAACz2az+rWmrGxMWFoaQkBAEBQUhKCiowZiaY9Q3e/ZszJgxQ90+ffo0brvtNiQkJDhxxkRERORNLl26hPDw8EZj3F4IiQieffZZrF69Gps2bUJSUlKT78nPzwcAxMbGAgBSUlLw6quv4ty5c4iOjgYA5OTkICwsDLfddpsas27dOs1xcnJykJKSAgAwGo3o378/NmzYgJEjRwJQhuo2bNiAqVOnNpiHyWSCyWRSt1u1aoWTJ0+idevWMBgMzl8EJ9hsNiQkJODkyZO8EduDeJ2bB69z8+B1bj681s3DU9dZRHDp0iXExcU5FexWzzzzjISHh8umTZukuLhYfZWWloqIyJEjR+Tll1+WnTt3SlFRkXzyySfSqVMnGTRokHqMqqoq6dmzpwwdOlTy8/Nl/fr10q5dO5k9e7Ya8+2330poaKjMnDlTDh48KIsXL5agoCBZv369GrNixQoxmUyybNkyOXDggEycOFEiIiLEYrG4+7RdZrVaBYBYrVa9U/FrvM7Ng9e5efA6Nx9e6+bhDdfZ7YUQgAZfS5cuFRGREydOyKBBgyQyMlJMJpN06dJFZs6c6XARjh07JsOHD5eQkBCJioqS559/XiorKzUxubm50rdvXzEajdKpUyf1M+p66623pEOHDmI0GmXgwIGyfft2d5/ydfGG//iBgNe5efA6Nw9e5+bDa908vOE6e3wdIWoY1yhqHrzOzYPXuXnwOjcfXuvm4Q3Xmc8a04nJZMLcuXM19ySR+/E6Nw9e5+bB69x8eK2bhzdcZ/YIERERUcBijxAREREFLBZCREREFLBYCBEREVHAYiFEREREAYuFkA4WL16MxMREBAcHIzk52eFxInTjXnrpJRgMBs2re/fueqfl87Zs2YL7778fcXFxMBgMWLNmjWa/iODFF19EbGwsQkJCkJaWhsOHD+uTrA9r6jr/7Gc/c/h+Dxs2TJ9kfVhWVhYGDBiA1q1bIzo6GiNHjkRhYaEmpqysDFOmTEHbtm3RqlUrPPTQQw6PbqLGOXOdBw8e7PCdnjRpUrPkx0KomX300UeYMWMG5s6di927d6NPnz5IT0/HuXPn9E7N7/To0QPFxcXqq/7Df8l1V65cQZ8+fbB48eIG9y9YsABvvvkm3n33XezYsQM333wz0tPTUVZW1syZ+ramrjMADBs2TPP9/vDDD5sxQ/+wefNmTJkyBdu3b0dOTg4qKysxdOhQXLlyRY2ZPn06Pv30U6xatQqbN2/GmTNnkJmZqWPWvseZ6wwAEyZM0HynFyxY0DwJ6raUY4AaOHCgTJkyRd222+0SFxcnWVlZOmblf+bOnSt9+vTROw2/BkBWr16tbldXV4vZbJaFCxeqbSUlJWIymeTDDz/UIUP/UP86i4iMGzdORowYoUs+/uzcuXMCQDZv3iwiyve3ZcuWsmrVKjXm4MGDAkDy8vL0StPn1b/OIiI//vGP5bnnntMlH/YINaOKigrs2rULaWlpaluLFi2QlpaGvLw8HTPzT4cPH0ZcXBw6deqEsWPH4sSJE3qn5NeKiopgsVg03+/w8HAkJyfz++0BmzZtQnR0NLp164ZnnnkG58+f1zsln2e1WgEAkZGRAIBdu3ahsrJS853u3r07OnTowO/0Dah/nWt88MEHiIqKQs+ePTF79myUlpY2Sz5uf/o8Xdv3338Pu92OmJgYTXtMTAwOHTqkU1b+KTk5GcuWLUO3bt1QXFyMefPmITU1FQUFBWjdurXe6fkli8UCAA1+v2v2kXsMGzYMmZmZSEpKwtGjR/HrX/8aw4cPR15eHoKCgvROzydVV1dj2rRpuOuuu9CzZ08AynfaaDQiIiJCE8vv9PVr6DoDwJgxY9CxY0fExcVh7969mDVrFgoLC5Gdne3xnFgIkV8aPny4+u/evXsjOTkZHTt2xMqVKzF+/HgdMyO6cY8++qj67169eqF3797o3LkzNm3ahCFDhuiYme+aMmUKCgoKeC+hh13rOk+cOFH9d69evRAbG4shQ4bg6NGj6Ny5s0dz4tBYM4qKikJQUJDDjIOzZ8/CbDbrlFVgiIiIwC233IIjR47onYrfqvkO8/vd/Dp16oSoqCh+v6/T1KlT8dlnnyE3Nxfx8fFqu9lsRkVFBUpKSjTx/E5fn2td54YkJycDQLN8p1kINSOj0Yj+/ftjw4YNalt1dTU2bNiAlJQUHTPzf5cvX8bRo0cRGxurdyp+KykpCWazWfP9ttls2LFjB7/fHnbq1CmcP3+e328XiQimTp2K1atXY+PGjUhKStLs79+/P1q2bKn5ThcWFuLEiRP8TrugqevckPz8fABolu80h8aa2YwZMzBu3DjccccdGDhwIBYtWoQrV67g5z//ud6p+ZVf/vKXuP/++9GxY0ecOXMGc+fORVBQEEaPHq13aj7t8uXLmv8PraioCPn5+YiMjESHDh0wbdo0vPLKK+jatSuSkpIwZ84cxMXFYeTIkfol7YMau86RkZGYN28eHnroIZjNZhw9ehQvvPACunTpgvT0dB2z9j1TpkzB8uXL8cknn6B169bqfT/h4eEICQlBeHg4xo8fjxkzZiAyMhJhYWF49tlnkZKSgjvvvFPn7H1HU9f56NGjWL58OX7yk5+gbdu22Lt3L6ZPn45Bgwahd+/enk9Ql7lqAe6tt96SDh06iNFolIEDB8r27dv1TsnvPPLIIxIbGytGo1Hat28vjzzyiBw5ckTvtHxebm6uAHB4jRs3TkSUKfRz5syRmJgYMZlMMmTIECksLNQ3aR/U2HUuLS2VoUOHSrt27aRly5bSsWNHmTBhglgsFr3T9jkNXWMAsnTpUjXm6tWrMnnyZGnTpo2EhobKgw8+KMXFxfol7YOaus4nTpyQQYMGSWRkpJhMJunSpYvMnDlTrFZrs+Rn+CFJIiIiooDDe4SIiIgoYLEQIiIiooDFQoiIiIgCFgshIiIiClgshIiIiChgsRAiIiKigMVCiIiIiAIWCyEiIiIKWCyEiIiIKGCxECIiIqKAxUKIiIiIAhYLISIiIgpY/x+K4rdUUko7EQAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.scatter(X_test,Y_test,color = 'red')\n",
        "plt.plot(X_train,model.predict(X_train),color = 'blue')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "990c7add",
      "metadata": {
        "id": "990c7add"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(Y_test,model.predict(X_test),color = 'red')\n"
      ],
      "metadata": {
        "id": "FozwqNxpnvvs",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "outputId": "f5a78103-34ac-4bef-fb13-7228cbe7a820"
      },
      "id": "FozwqNxpnvvs",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7870c5398b20>"
            ]
          },
          "metadata": {},
          "execution_count": 20
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "z = [i for i in range(100)]\n",
        "plt.scatter(z,z,color = 'red')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "1m4trTHF3OyS",
        "outputId": "1af4a694-795c-4669-9038-48392dc2703e"
      },
      "id": "1m4trTHF3OyS",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x78a1acaa7250>"
            ]
          },
          "metadata": {},
          "execution_count": 37
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "hxzCNRUQ3sy7"
      },
      "id": "hxzCNRUQ3sy7",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.12"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}