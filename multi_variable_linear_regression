{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/arjunpaud/machine_learning/blob/master/multi_variable_linear_regression\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6eca01fd",
      "metadata": {
        "id": "6eca01fd"
      },
      "outputs": [],
      "source": [
        "# !pip install seaborn"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "13c4a383",
      "metadata": {
        "id": "13c4a383"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "%matplotlib inline\n",
        "from matplotlib.pyplot import xticks\n",
        "from matplotlib.pyplot import yticks"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6c636fc4",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "6c636fc4",
        "outputId": "e5270c28-d9f4-4e9a-d951-f15231852d3e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Age  Gender Education Level                      Job Title  \\\n",
              "0    32.0    Male      Bachelor's              Software Engineer   \n",
              "1    28.0  Female        Master's                   Data Analyst   \n",
              "2    45.0    Male             PhD                 Senior Manager   \n",
              "3    36.0  Female      Bachelor's                Sales Associate   \n",
              "4    52.0    Male        Master's                       Director   \n",
              "..    ...     ...             ...                            ...   \n",
              "370  35.0  Female      Bachelor's       Senior Marketing Analyst   \n",
              "371  43.0    Male        Master's         Director of Operations   \n",
              "372  29.0  Female      Bachelor's         Junior Project Manager   \n",
              "373  34.0    Male      Bachelor's  Senior Operations Coordinator   \n",
              "374  44.0  Female             PhD        Senior Business Analyst   \n",
              "\n",
              "     Years of Experience    Salary  \n",
              "0                    5.0   90000.0  \n",
              "1                    3.0   65000.0  \n",
              "2                   15.0  150000.0  \n",
              "3                    7.0   60000.0  \n",
              "4                   20.0  200000.0  \n",
              "..                   ...       ...  \n",
              "370                  8.0   85000.0  \n",
              "371                 19.0  170000.0  \n",
              "372                  2.0   40000.0  \n",
              "373                  7.0   90000.0  \n",
              "374                 15.0  150000.0  \n",
              "\n",
              "[375 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-122ed46f-4722-4dfd-a9f5-e6377d96bf0f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Education Level</th>\n",
              "      <th>Job Title</th>\n",
              "      <th>Years of Experience</th>\n",
              "      <th>Salary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>32.0</td>\n",
              "      <td>Male</td>\n",
              "      <td>Bachelor's</td>\n",
              "      <td>Software Engineer</td>\n",
              "      <td>5.0</td>\n",
              "      <td>90000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>28.0</td>\n",
              "      <td>Female</td>\n",
              "      <td>Master's</td>\n",
              "      <td>Data Analyst</td>\n",
              "      <td>3.0</td>\n",
              "      <td>65000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>45.0</td>\n",
              "      <td>Male</td>\n",
              "      <td>PhD</td>\n",
              "      <td>Senior Manager</td>\n",
              "      <td>15.0</td>\n",
              "      <td>150000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>36.0</td>\n",
              "      <td>Female</td>\n",
              "      <td>Bachelor's</td>\n",
              "      <td>Sales Associate</td>\n",
              "      <td>7.0</td>\n",
              "      <td>60000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>52.0</td>\n",
              "      <td>Male</td>\n",
              "      <td>Master's</td>\n",
              "      <td>Director</td>\n",
              "      <td>20.0</td>\n",
              "      <td>200000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>370</th>\n",
              "      <td>35.0</td>\n",
              "      <td>Female</td>\n",
              "      <td>Bachelor's</td>\n",
              "      <td>Senior Marketing Analyst</td>\n",
              "      <td>8.0</td>\n",
              "      <td>85000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>371</th>\n",
              "      <td>43.0</td>\n",
              "      <td>Male</td>\n",
              "      <td>Master's</td>\n",
              "      <td>Director of Operations</td>\n",
              "      <td>19.0</td>\n",
              "      <td>170000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>372</th>\n",
              "      <td>29.0</td>\n",
              "      <td>Female</td>\n",
              "      <td>Bachelor's</td>\n",
              "      <td>Junior Project Manager</td>\n",
              "      <td>2.0</td>\n",
              "      <td>40000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>373</th>\n",
              "      <td>34.0</td>\n",
              "      <td>Male</td>\n",
              "      <td>Bachelor's</td>\n",
              "      <td>Senior Operations Coordinator</td>\n",
              "      <td>7.0</td>\n",
              "      <td>90000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>374</th>\n",
              "      <td>44.0</td>\n",
              "      <td>Female</td>\n",
              "      <td>PhD</td>\n",
              "      <td>Senior Business Analyst</td>\n",
              "      <td>15.0</td>\n",
              "      <td>150000.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>375 rows Ã— 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-122ed46f-4722-4dfd-a9f5-e6377d96bf0f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-122ed46f-4722-4dfd-a9f5-e6377d96bf0f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-122ed46f-4722-4dfd-a9f5-e6377d96bf0f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a3e8841e-4e82-466e-bd5c-6ffe475c8cbd\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a3e8841e-4e82-466e-bd5c-6ffe475c8cbd')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a3e8841e-4e82-466e-bd5c-6ffe475c8cbd button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ],
      "source": [
        "df = pd.DataFrame(pd.read_csv(\"Salary Data.csv\"))\n",
        "df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "H5biCAdsyV3e",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H5biCAdsyV3e",
        "outputId": "fd5a327a-def6-4a54-f01c-42d755e68ab9"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(375, 6)"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "df.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d25c99b1",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "d25c99b1",
        "outputId": "f02558d2-7bd5-46fb-b980-d51948f7b26e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              Age  Years of Experience         Salary\n",
              "count  373.000000           373.000000     373.000000\n",
              "mean    37.431635            10.030831  100577.345845\n",
              "std      7.069073             6.557007   48240.013482\n",
              "min     23.000000             0.000000     350.000000\n",
              "25%     31.000000             4.000000   55000.000000\n",
              "50%     36.000000             9.000000   95000.000000\n",
              "75%     44.000000            15.000000  140000.000000\n",
              "max     53.000000            25.000000  250000.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8e033c04-f2e6-4db5-80e5-c98c35207332\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Years of Experience</th>\n",
              "      <th>Salary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>373.000000</td>\n",
              "      <td>373.000000</td>\n",
              "      <td>373.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>37.431635</td>\n",
              "      <td>10.030831</td>\n",
              "      <td>100577.345845</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>7.069073</td>\n",
              "      <td>6.557007</td>\n",
              "      <td>48240.013482</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>23.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>350.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>31.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>55000.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>36.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>95000.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>44.000000</td>\n",
              "      <td>15.000000</td>\n",
              "      <td>140000.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>53.000000</td>\n",
              "      <td>25.000000</td>\n",
              "      <td>250000.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8e033c04-f2e6-4db5-80e5-c98c35207332')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8e033c04-f2e6-4db5-80e5-c98c35207332 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8e033c04-f2e6-4db5-80e5-c98c35207332');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-02703799-85ea-41cf-80b2-47987b0f6be4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-02703799-85ea-41cf-80b2-47987b0f6be4')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-02703799-85ea-41cf-80b2-47987b0f6be4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "df.describe()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isna().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zTWV4FlDU5pN",
        "outputId": "62b914ea-c343-4d02-9038-a06bebac3260"
      },
      "id": "zTWV4FlDU5pN",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Age                    2\n",
              "Gender                 2\n",
              "Education Level        2\n",
              "Job Title              2\n",
              "Years of Experience    2\n",
              "Salary                 2\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.dropna()"
      ],
      "metadata": {
        "id": "PZ5E2HMCcHmd"
      },
      "id": "PZ5E2HMCcHmd",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.isna().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x--YRlq4Vha_",
        "outputId": "bf85eaf3-23f6-4fe5-878d-93a2c08c6a81"
      },
      "id": "x--YRlq4Vha_",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Age                    0\n",
              "Gender                 0\n",
              "Education Level        0\n",
              "Job Title              0\n",
              "Years of Experience    0\n",
              "Salary                 0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "165d6834",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "165d6834",
        "outputId": "395215ac-9153-49d4-bc19-287bd54cd611"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Age', 'Gender', 'Education Level', 'Job Title', 'Years of Experience',\n",
              "       'Salary'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "df.columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d995ea58",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d995ea58",
        "outputId": "d8e6e99c-7402-4924-b515-2a14cc5fafc8"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(373, 6)"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ],
      "source": [
        "df.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0ec2f737",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0ec2f737",
        "outputId": "64f6569e-8eaa-43cb-bacb-9edd2ce7a127"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 373 entries, 0 to 374\n",
            "Data columns (total 6 columns):\n",
            " #   Column               Non-Null Count  Dtype  \n",
            "---  ------               --------------  -----  \n",
            " 0   Age                  373 non-null    float64\n",
            " 1   Gender               373 non-null    object \n",
            " 2   Education Level      373 non-null    object \n",
            " 3   Job Title            373 non-null    object \n",
            " 4   Years of Experience  373 non-null    float64\n",
            " 5   Salary               373 non-null    float64\n",
            "dtypes: float64(3), object(3)\n",
            "memory usage: 20.4+ KB\n"
          ]
        }
      ],
      "source": [
        "df.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3b815b70",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3b815b70",
        "outputId": "0179027e-eb2d-425c-ab3c-0ec26116987d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Age                    0\n",
              "Gender                 0\n",
              "Education Level        0\n",
              "Job Title              0\n",
              "Years of Experience    0\n",
              "Salary                 0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "source": [
        "# Checking Null values\n",
        "df.isnull().sum()\n",
        "# There are no NULL values in the dataset, hence it is clean."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "set(df['Job Title'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6e9fH9xkd9Cj",
        "outputId": "e7eb5ca5-0112-4a78-b939-62adc0acfc7c"
      },
      "id": "6e9fH9xkd9Cj",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'Account Manager',\n",
              " 'Accountant',\n",
              " 'Administrative Assistant',\n",
              " 'Business Analyst',\n",
              " 'Business Development Manager',\n",
              " 'Business Intelligence Analyst',\n",
              " 'CEO',\n",
              " 'Chief Data Officer',\n",
              " 'Chief Technology Officer',\n",
              " 'Content Marketing Manager',\n",
              " 'Copywriter',\n",
              " 'Creative Director',\n",
              " 'Customer Service Manager',\n",
              " 'Customer Service Rep',\n",
              " 'Customer Service Representative',\n",
              " 'Customer Success Manager',\n",
              " 'Customer Success Rep',\n",
              " 'Data Analyst',\n",
              " 'Data Entry Clerk',\n",
              " 'Data Scientist',\n",
              " 'Digital Content Producer',\n",
              " 'Digital Marketing Manager',\n",
              " 'Director',\n",
              " 'Director of Business Development',\n",
              " 'Director of Engineering',\n",
              " 'Director of Finance',\n",
              " 'Director of HR',\n",
              " 'Director of Human Capital',\n",
              " 'Director of Human Resources',\n",
              " 'Director of Marketing',\n",
              " 'Director of Operations',\n",
              " 'Director of Product Management',\n",
              " 'Director of Sales',\n",
              " 'Director of Sales and Marketing',\n",
              " 'Event Coordinator',\n",
              " 'Financial Advisor',\n",
              " 'Financial Analyst',\n",
              " 'Financial Manager',\n",
              " 'Graphic Designer',\n",
              " 'HR Generalist',\n",
              " 'HR Manager',\n",
              " 'Help Desk Analyst',\n",
              " 'Human Resources Director',\n",
              " 'IT Manager',\n",
              " 'IT Support',\n",
              " 'IT Support Specialist',\n",
              " 'Junior Account Manager',\n",
              " 'Junior Accountant',\n",
              " 'Junior Advertising Coordinator',\n",
              " 'Junior Business Analyst',\n",
              " 'Junior Business Development Associate',\n",
              " 'Junior Business Operations Analyst',\n",
              " 'Junior Copywriter',\n",
              " 'Junior Customer Support Specialist',\n",
              " 'Junior Data Analyst',\n",
              " 'Junior Data Scientist',\n",
              " 'Junior Designer',\n",
              " 'Junior Developer',\n",
              " 'Junior Financial Advisor',\n",
              " 'Junior Financial Analyst',\n",
              " 'Junior HR Coordinator',\n",
              " 'Junior HR Generalist',\n",
              " 'Junior Marketing Analyst',\n",
              " 'Junior Marketing Coordinator',\n",
              " 'Junior Marketing Manager',\n",
              " 'Junior Marketing Specialist',\n",
              " 'Junior Operations Analyst',\n",
              " 'Junior Operations Coordinator',\n",
              " 'Junior Operations Manager',\n",
              " 'Junior Product Manager',\n",
              " 'Junior Project Manager',\n",
              " 'Junior Recruiter',\n",
              " 'Junior Research Scientist',\n",
              " 'Junior Sales Representative',\n",
              " 'Junior Social Media Manager',\n",
              " 'Junior Social Media Specialist',\n",
              " 'Junior Software Developer',\n",
              " 'Junior Software Engineer',\n",
              " 'Junior UX Designer',\n",
              " 'Junior Web Designer',\n",
              " 'Junior Web Developer',\n",
              " 'Marketing Analyst',\n",
              " 'Marketing Coordinator',\n",
              " 'Marketing Manager',\n",
              " 'Marketing Specialist',\n",
              " 'Network Engineer',\n",
              " 'Office Manager',\n",
              " 'Operations Analyst',\n",
              " 'Operations Director',\n",
              " 'Operations Manager',\n",
              " 'Principal Engineer',\n",
              " 'Principal Scientist',\n",
              " 'Product Designer',\n",
              " 'Product Manager',\n",
              " 'Product Marketing Manager',\n",
              " 'Project Engineer',\n",
              " 'Project Manager',\n",
              " 'Public Relations Manager',\n",
              " 'Recruiter',\n",
              " 'Research Director',\n",
              " 'Research Scientist',\n",
              " 'Sales Associate',\n",
              " 'Sales Director',\n",
              " 'Sales Executive',\n",
              " 'Sales Manager',\n",
              " 'Sales Operations Manager',\n",
              " 'Sales Representative',\n",
              " 'Senior Account Executive',\n",
              " 'Senior Account Manager',\n",
              " 'Senior Accountant',\n",
              " 'Senior Business Analyst',\n",
              " 'Senior Business Development Manager',\n",
              " 'Senior Consultant',\n",
              " 'Senior Data Analyst',\n",
              " 'Senior Data Engineer',\n",
              " 'Senior Data Scientist',\n",
              " 'Senior Engineer',\n",
              " 'Senior Financial Advisor',\n",
              " 'Senior Financial Analyst',\n",
              " 'Senior Financial Manager',\n",
              " 'Senior Graphic Designer',\n",
              " 'Senior HR Generalist',\n",
              " 'Senior HR Manager',\n",
              " 'Senior HR Specialist',\n",
              " 'Senior Human Resources Coordinator',\n",
              " 'Senior Human Resources Manager',\n",
              " 'Senior Human Resources Specialist',\n",
              " 'Senior IT Consultant',\n",
              " 'Senior IT Project Manager',\n",
              " 'Senior IT Support Specialist',\n",
              " 'Senior Manager',\n",
              " 'Senior Marketing Analyst',\n",
              " 'Senior Marketing Coordinator',\n",
              " 'Senior Marketing Director',\n",
              " 'Senior Marketing Manager',\n",
              " 'Senior Marketing Specialist',\n",
              " 'Senior Operations Analyst',\n",
              " 'Senior Operations Coordinator',\n",
              " 'Senior Operations Manager',\n",
              " 'Senior Product Designer',\n",
              " 'Senior Product Development Manager',\n",
              " 'Senior Product Manager',\n",
              " 'Senior Product Marketing Manager',\n",
              " 'Senior Project Coordinator',\n",
              " 'Senior Project Manager',\n",
              " 'Senior Quality Assurance Analyst',\n",
              " 'Senior Research Scientist',\n",
              " 'Senior Researcher',\n",
              " 'Senior Sales Manager',\n",
              " 'Senior Sales Representative',\n",
              " 'Senior Scientist',\n",
              " 'Senior Software Architect',\n",
              " 'Senior Software Developer',\n",
              " 'Senior Software Engineer',\n",
              " 'Senior Training Specialist',\n",
              " 'Senior UX Designer',\n",
              " 'Social Media Manager',\n",
              " 'Social Media Specialist',\n",
              " 'Software Developer',\n",
              " 'Software Engineer',\n",
              " 'Software Manager',\n",
              " 'Software Project Manager',\n",
              " 'Strategy Consultant',\n",
              " 'Supply Chain Analyst',\n",
              " 'Supply Chain Manager',\n",
              " 'Technical Recruiter',\n",
              " 'Technical Support Specialist',\n",
              " 'Technical Writer',\n",
              " 'Training Specialist',\n",
              " 'UX Designer',\n",
              " 'UX Researcher',\n",
              " 'VP of Finance',\n",
              " 'VP of Operations',\n",
              " 'Web Developer'}"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "zCEeXKfTqiF3",
      "metadata": {
        "id": "zCEeXKfTqiF3"
      },
      "outputs": [],
      "source": [
        "# df = df.dropna()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "WMd5BTey2J63",
      "metadata": {
        "id": "WMd5BTey2J63"
      },
      "outputs": [],
      "source": [
        "# EDA"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b92ef8da",
      "metadata": {
        "id": "b92ef8da"
      },
      "outputs": [],
      "source": [
        "auto=df[['Age', 'Gender', 'Education Level', 'Years of Experience','Salary']]"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.pairplot(auto)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 775
        },
        "id": "ohsUWOA5-uq7",
        "outputId": "a5262f57-de4a-4cae-f2c6-439a8f2fdd91"
      },
      "id": "ohsUWOA5-uq7",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.PairGrid at 0x786e55439360>"
            ]
          },
          "metadata": {},
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 750x750 with 12 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAuUAAALlCAYAAABjOpj+AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdeXhTZaI/8G/aNE26pC0phRZaKKSyplCXUWxBxRWXkVp1RB0FHP05A64zI5RlvCBQwOGOAy7jKKD3uswdB8u4z1UZluJyR5ZpUUCKYMECpbVNumRvfn+0CVnO0iVpmub7eZ4+DzlvznvelPOe9+3JOd+jcLlcLhARERERUdjEhLsBRERERETRjpNyIiIiIqIw46SciIiIiCjMOCknIiIiIgozTsqJiIiIiMKMk3IiIiIiojDjpJyIiIiIKMw4KSciIiIiCjNOyvuQy+WCyWQCn9dEFBrsY0ShxT5GFDqclPeh5uZmpKSkoLm5OdxNIRqQ2MeIQot9jCh0OCknIiIiIgozTsqJiIiIiMKMk3IiIiIiojDjpJyIiIiIKMw4KSciIiIiCjNluBtAREREwWVss6G+xQaTxQ6tJg7piSqkJKjC3SyKUtwfu4aTciIiogGktsmMBVsqsetIvWfZtLx0rC7JR1aqJowto2jE/bHrePkKERHRAGFsswVMgABg55F6LNxSCWObLUwto2jE/bF7OCknIiIaIOpbbAETILedR+pR38JJEPUd7o/dw0k5ERHRAGGy2CXLm2XKiYKJ+2P3cFJOREQ0QGjVcZLlyTLlRMHE/bF7eKMnERFRD4UrVUJsu+lJKkzLS8dOgUsGpuWlIz2JiRcUGkL7ZDD2x/6a3BKKdnFSTkRE1APhSpWQ2+6KmROxqLwKFdUNnvIivQ4rZk7sF5MZGnjE9sk1JflYXZKPhVsqfSbm7jK5/bG/JreEql0Kl8vlCkYDSZ7JZEJKSgqMRiO0Wm24m0M04LCPUV8xttkw/819gjexTctLx4ZZBSGZAMtt9+nbJmFxeRXGZmpRkJ0Kq6Md8coY7DvRhMOnTPj9bZN61S72MfLXlb4AdNz02WyxI1kdh/Qk+bPK4epjckLZLp4pJyIi6qaupEqEYsIgt93GVhs+OViHTw7Wia7Ps+UUTF3pC6Mzkrq934Wrj8kJZbt4oycREVE3hStVQm67JotDspxpFxRsoeoL/TW5JZTt4qSciIiom8KVKiG3Xa1a+gtwpl1QsIWqL/TX5JZQtouTciIiom5yp0oICWXKidx20xLD0y6KXqHqC+HqY3JC2S7e6NmHeIMMUWixj1Ffqm0yi6ZKZHYmMEjFpp0xWdDYaoPJ4oBWo0RaggpDtGpPXWLlctvtSrt6in2s/wtHhKDcPufdphRNHBLjlWixOARfe7c5lPtyb4SqXZyU9yEezIhCi32M+pp7siGUKiEVm+Z0tmNheRV2+8UWrio2IEeXiJqGVpRKlEttV65dvcE+1r+FK0LwVJMZ2789i4zkeE/iT12zFZefNxgA8ERnmxJUsVg/qwCbdx/D7uqGgNdCbQ7VvtxboWgXJ+V9iAczotBiH6P+Qio2bWpeOmZMHIpF5QcCyor0OqwpyccTWyp9Jine5etun+xzRr0vsY/1X/01pnOGIROlb1cBAOZP12NfTaNn3/Z/3Vdt7q8YiUhdVlNTg/p64Rig7khPT0dOTk4QWkRE1D9JxabtOlKP2ZeOFCyrqG6AyeIQnKS4yxtbbWGblFP/1V9jOu/12tcLslPx7LZq0df+60ZbhCcn5dQlNTU1GDt2HMzmtl7XpdEk4NChg5yYE9GAJRebZnW0i69r7l3sIUWn/hrT6b2v++/3Uv0AiL4IT07KqUvq6+thNrfh4rlPQps5ssf1mE4dx5eblqG+vp6TciIasORi0+KV4uFnWk3vYg8pOvXXmE7vfd1/v5fqB0D0RXgyErHTf/zHf0ChUPj8jB071lNusVgwb9486HQ6JCUloaSkBGfOnAlji8NDmzkSg3LG9PinNxN6IqJIIRWbNjUvHXUmi2BZkV4HrVqJIr1OtDwtMXq+zqeu668xnXXNVs/rfSeaUOi1b/u/9l832iI8+ee2lwkTJuCTTz7xvFYqz/16HnvsMbz//vt46623kJKSgvnz5+OWW27B7t27w9FUIiLqB8Ti51ISVFhdki8am6ZwtmPHby9Hm80Jk7lj3QRVLFQAMtMSsKrYgEXlVagQSF/pyvXk4YjFo/BKSVBhTUm+TwqKOi4WZ0wWXHHe4KD8/4vFdErt60oAF//6Mlgd7TCZ7bjBkIl4ZQwe/O892FRxDOtnFUAB+Ozr7nX78z4bij7GSbkXpVKJoUOHBiw3Go3YuHEj3njjDUyfPh0AsHnzZowbNw5ffPEFLrnkkr5uKhERhZlc/JwCwAxDJu69dKRPTFwsADOARQKRhyuLDQCAHF0i1t0++dwESK1EWqKqSxPycMXiUfi5AHxQeQq7qn3/7y/rjCbsDbmYzg2zCgQjAr9vaMXSvx8IWO/P91wIs82G+Lg4rLt9Mlosjn4XeygmVH2Ml694OXLkCLKysjBq1CjcddddqKmpAQDs2bMHdrsdV111lee9Y8eORU5ODj7//PNwNZeIiMLE2GYLGJSBjsSIhVsqccZkwRNbKlH6dhXue/Ur/Or1vbjv1a9Q+nYVGsz2gAk50HGmcHF5FU42dtxQP0SrxthMLX6SOwhjM7VdPkMu1S5jm62Xn5z6K8//fXXw/+/PmCwBE3KgY59dVF6FMyYLUhJUGJ2RhMk5aRidkYSUBBV+aGwT3deXbK2CVhOPUYOTMESrDli3vwplH+OZ8k4XX3wxXnnlFYwZMwanTp3CsmXLMHXqVBw4cACnT5+GSqVCamqqzzpDhgzB6dOnReu0Wq2wWs9dS2UymULVfKKoxD5G4SIXA9fYKl7uAiQjD5t7ka4S7Fg89rHIEcpIxMZWW49iOuXiPU0WB4b1qEXhE8rfM8+Ud5oxYwZuu+025Ofn49prr8UHH3yApqYm/PWvf+1xnWVlZUhJSfH8ZGdnB7HFRMQ+RuEiFwMnFVvYLBN52JsYuGDH4rGPRY5QRiLKxXCKlcvFe0Zi5GEof8+clItITU3Feeedh+rqagwdOhQ2mw1NTU0+7zlz5ozgNehupaWlMBqNnp8TJ06EuNVE0YV9jMJFLgZOKrYwWSbysDcxcMGOxWMfixyhjESUi+EUK5eL94zEyMNQ/p55+YqIlpYWHD16FD//+c9xwQUXIC4uDp9++ilKSkoAAIcPH0ZNTQ2mTJkiWkd8fDzi4+P7qslEUYd9jIJFKklBqMwdA7dT5NHiaYkq3HNJDuYW5cJsb/ckrGjiYuBwtaNIr/NJm3Ar0uuQ3Isccrl2dTdijn0scgTj/14sXSUtUSW5z4rFdGrVShRPzsScolFQxsagubMf2J3t2FzxXURm7ge7j3mLvN9GiPzmN7/BTTfdhBEjRqC2thZPPvkkYmNjMWvWLKSkpOC+++7D448/jkGDBkGr1eKhhx7ClClTmLxCRBThxJIU1pTkwwWIlknFwA3RqnHf1FGiCSuriw1YKBB5uLLYgOFpCT3+LHJRjP35Bjrqnd7+38ulq6wsNmCxyD4rdhPysLQEPHr1GNF+MKwX+3q4hLKPKVwulysYjYx0d9xxB3bu3ImGhgYMHjwYRUVFWLlyJUaPHg2g4+FBv/71r/Hmm2/CarXi2muvxfPPPy95+Yo/k8mElJQUGI1GaLXaUH2UkNi7dy8uuOACXL14MwbljOlxPT/WHMbHK+dgz549OP/884PYQqLI7mMUHsY2G+a/uU/wxq2yWwwB8XJu0/LSsWFWAQAIxsCdbGzDgi2Vgje5Fel1WF2SDwBo9oqBS1YrezUh9/9cQu3qLfax/q8n//dnTBY8/tf9ovvr2lsnYeX73+CW84cjQxuPFosTSepY1JmsKN97EiuLDYLb6Eo/CNY+39dC0cd4przTX/7yF8lytVqN5557Ds8991wftYiIiEJNKkkhIzlecEIOnEtZEItva5ZJnWi2ODAuM3STWvcDjCj69OT/Xi5dxWi24/2q03i/Sjhx7rGrx/S4H0SqUPQx3uhJRERRSypJwepol1xXKmVhIKZO0MAll64it7+KlbMfdA8n5UREFLWkkhTildJDpFTKwkBMnaCBS+6GS7n9Vayc/aB7OCknIqKo5U5SEFLXbBUtk0tZSFYrUaTXCZb1NmGFKNjc6SpCivQ6pGjietQX2A+6h78Nimg1NTWorxe+5rO70tPTkZOTE5S6iCgyuJMU/BNWpual44rzBuPy8wZj+7dnkZEcD6ujHeq4WJwxWXDFeYORkqBCbZMZRrMdJrMdKZo4aDVxyErVYHhaAsqKDfjBaEZivBItFieS1Uq0WO0YlqKJ2JvbKPIJRXwO0aqxqtiARQLpKquKDchK1cgmjnjHKaZolEhWx8HlaEfZTAN+MEn3A6lI0mjCSTlFrJqaGowdOw5mc1tQ6tNoEnDo0EFOzImijNPZjhkTh2L2pSNhdbQjXhmDOpMFDmc7YmJjAhJYpuWl4/LzBuP7hlbRqLcRukS0A9iwrVqwnCgcxOI/V5fkI0eXiHW3Tz6XU65WIq1zwg4AWakabJhVIJg4Ihan+OC00Rg+SCPZD6TalJWqCfWvpF/hpJwiVn19PczmNlw890loM0f2qi7TqeP4ctMy1NfXc1JOFEXOmCxY6DeZcCsrnogPqk4HJLDsPFKP7d+exQeVtQHrVVQ3YHF5FVaX5AdM2L3L1946KeomHBRexjZbwOQX6NifF26pxIZZBRiiVYtmjgPCiSNnTJaACTnQua/fMA6Ltx6Q7Celb1dJtimazphzUk5hcfDgwaDVoc0c2avsdCKKXlJRcBlatWgkYkdconTUm1zEHCfl1Jek4j/dEZ89mQBL9SEXFLKRiKFoU6TipJz6lNnYAECBu+++O2h12q22oNVFRNFFKgpOKhJRLi6RUXDU30jFfwI93yel+lBzL/tBtPUTTsqpT9nbmgG4MPnOBRicO7ZXdZ2q+hwH3vkzHI7IffgAEYWXVBScVCSiXFwio+Cov5GK/wR6vk9K9aHkXvaDaOsnnJRTWCRl5PT6khPTqePBaQwRRS13FFyFwFfsdSYL7rhoOO6bOgoOpwsmc0cyhDJWgcOnm3HV2MEYm5WCguxUTzLL3ppGHKw1eqLghOp1R8x5p1VoNUqkJagkr+cl6gl3sonRbMOb91+M3UcbsKniGNpsTs975CI+3YT22bREFX5+cTbumzoKZnu7p59o4mJgd7ZL9oNktRLT8tJ9El382xRNySyclBMRUdSSioKbrk/Hpfp00YSVScNSsLC8Cs9uqw4oG56WgJXFBiwWqHdlsQEuZzse/1tgvauKDcjRJYb4U1O0EEo2KdLrsH5WAR5+cx/abE6fWEMpYgkr/1lswC+mjRbuJzMNWDXTgEVbhfvB8LQErJg5UbD/rZw5Ea02Z1Qls3BSTkREUU0sCs7ubMeiLZWiyRHzp+slUyX++Mm3eOK6sVgUG4Nmsx3Jmjg4nO1oaLFg3cdHBNddVF6FdbdP5hlz6jWxtJWK6gYoFAr8fV4hYhQKT6yhFKmEFSsgnjS0tQqPXpWHOYW5WDBjLFosTiSpY1FnsmLNhwex+IbxWP7eN5ick4Y5hbmeSNJ9J5rwxbEf8c7+WsH0o4GazMJJORERRT2hKLiDp0ySyRELZgjfF+NOlXh7Xy3e3lcbUP7uQ4WS9Ta22jgpp16TSlvZdaQeMQoFRmckdakuqYSVFptTtp/c96cvBMsfuvI8fHKwDp8crAso23jvhaLpRwM1mUX6ThUiIqIoJZeg0mJxipZJpUZIrQdIp1kQdVUw01ak9slQ9RO5hKOBmMzCSTkREZEAuQSVJHWsaJlUaoTUeoB0mgVRVwUzbUVqnwxVP5FLOBqIySyclBMREQlwJ6gIKdLr0GoVPgPonSohpNXqlKw3LXFgfSVP4ZGepBLdB7uatuLmTikSkqSK7XE/0Ur0k7pma9DaHyn45zgREQ14crFqtU1mGM12mMx2pGjioNXEySaoxHT+WyxVYk1JPrZ/exYZyfGeyMQzJgtGDUoQTXxZVWzg9eQkqysxgSkJKqwuycfCLZU+kYNT89Kx/OaJON7QiqRWm8+6YjGdQ7RqrCk2wGRzwAUFmjtjDwEX1ECP+8mwtATBNk7LS8cV5w3GZecNFizrSlpMJOKknIiIBjShWDjvWLXvG1pFYw/jACy/eSKsjnZPgkq8MgZKdHzVLFTm/lLdBeCDylM+N6tNy0vHZecNFk184YSc5Mjtz94UAGYYMnHvpSNhc7ZjeJoGVSeNuH79Lk9O+bS8dKwtyYfN2S4YeeiO6XQAWPH+QcF+kgCgrNiAFpvT0xeSVLFQARiiS8TaWyfBaLaj2WJHsjoOKZo4T1uzUjXYMKsA9S02T7l3IoxU2UDDSTkREQ1YYrFw7li1slsMonFuS8qrcL0hE6XlBwLqnarXiZYV6XVYe+ukju1KxLkJJb4QSZHbn71jAo1tNjzh9d750/V47YvvA/b1nUfqcfzHNmzYJh7TubokXzz2sLwKi28Yhxl/rAhob5Feh3W3T0ZWqkYyVzwlQXyiLVU20PCaciIiGrCkYuF2HqmHyeIQjXPbVd2ADJFJs1RZRXUDjGa75HbrW2xdaD2RL7n92Xu/8n9vQXaq6L6eGB8rGWvYLNFPKqob4IJCtKyxlft6V3FSTkREA5ZsLJxMnJtULJtUmVxc20CMc6PQ607Mof97pfZX2ZhOmX4i1Y8Y8dl1nJQTEdGAJRsLJxPnJhXLJlUmF9c2EOPcKPS6E3Po/16p/VU2plOmn0j1I0Z8dh0n5QJWr14NhUKBRx991LPs8ssvh0Kh8Pl58MEHw9dIIiKSJRcLp5WIPZyq16HOZO12WZFehxRNXNTFuVHodSfm0P+9+040oVBkX5eL6ZSLB1XAJVrGiM+u458vfv71r3/hxRdfRH5+fkDZ/fffj+XLl3teJyQk9GXTKArV1NSgvl74+sHuSE9PR05OThBaRBRaUlFvQrGF3jePnWxsQ7PF4SlPUisxXCJybU1JPjJTNaJxbis649zKiiciQ6s+F2toNKNQnw4FOibnu7zWm9qZRpGVqpHcbrTcuEY9IxZNKBZzKLRf+b93U8Ux/OmuC/DQdD0S45VosTiRrFaixerA6EEJIpGHQGJcDJrNVpTNNKDFHhiJmKxSQoHA2MOpeh2Wz5yIOpMZZpsDFkc7TGbfz+PWlYjHaMBJuZeWlhbcddddeOmll7BixYqA8oSEBAwdOjQMLaNoVFNTg7Fjx8Fsbut1XRpNAg4dOsiJOfVrUlFvDpG4tpXFBozQJUrGGibExnhi4ayOdsQrY1DXfO4stzo2BotvGA8X4IlzUwBIiI2B2dmOD6pOBUy8C/XpUMXG4HpDFmYX5vrUGxfb8SW0XNQbkZCahlbJaMLu7Ffe7zXb7EhSq7B4a2DdZcUGtEM48nDFTANWfXAIy2caRCMRR/hHfGqU2Pd9E2770+dYXZKP1R8dFv083Yl4HOg4Kfcyb9483HDDDbjqqqsEJ+Wvv/46XnvtNQwdOhQ33XQTli5dyrPlFDL19fUwm9tw8dwnoc0c2eN6TKeO48tNy1BfX89JOfVbUlFvC7ZUYsbEoaJxbHJxbWXFBpS+XRWwzWl56Xj6tkn4jcB2AeAvD1wiGBO3qzMmbv70PJSWC9frjqaLpjg36r0zJkvAhBw4F0247vbJnjPmXd2v3O89Y7Lg8b/uF6y7oroBH1TVCkeDbq1CWXE+Fkr0sbW3TkJWqgZDtGoY22yY/+Y+7DpSj/nT9di8+5jo5/FEh3Yh4jEacFLe6S9/+Qv27t2Lf/3rX4Lld955J0aMGIGsrCxUVlZiwYIFOHz4MN5++23ROq1WK6zWc2djTCZT0NtNA582cyQG5YwJdzP6JfaxgUMq6m3XkXrMvnSkYFlX4tpabMLJEjuP1KOxVXy7cjFxC2aMFa23vsU2ICYT7GN9q7HVJrnPNbbaepxtL1V3hjbe59sg/+222JyS7TKa7Z6z2t59uSA7Fc9uq5ZcTy7icSD0o67ipBzAiRMn8Mgjj+Djjz+GWi28sz/wwAOefxsMBmRmZuLKK6/E0aNHMXr0aMF1ysrKsGzZspC0mYjYxwYSuag3qTi3UMW1ycXESZUPlMhD9rG+JRcf2Jt4Qal1pfoX0IU+JhLFKFcvo0N9MX0FwJ49e1BXV4fzzz8fSqUSSqUSO3bswPr166FUKuF0Bh54L774YgBAdbXwX4AAUFpaCqPR6Pk5ceJEyD4DUTRiHxs45KLepOLcQhXXJhcTJ1U+UCIP2cf6llx8YG/iBaXWlepfQBf6mEgUo1y9jA71xTPlAK688kpUVfleFzhnzhyMHTsWCxYsQGxs4IF3//79AIDMzEzReuPj4xEfHx/UthLROexjkUcsVcId37ZT4KvsqXnpcLS3Y+dvL0erzQlTZ/JDoioWr+4+hmS1EleOHYxxWSkoyE71pKTsrWnEwVojklTCk+dpeelIS1Th6nEZGJOpDVjXbHMGJEq4Fel1aLUKnykfSJGH7GN9Ky1RJbkvC8ULeieX6DRxiFHGCKYQpSWqRPfnumYr7rhwGO6bNhoOp8vTx5SxCry88yiSVLGS7UrxmrR792V3DKPQpS/e0aFC/T4Y/SjSUl04KQeQnJyMiRMn+ixLTEyETqfDxIkTcfToUbzxxhu4/vrrodPpUFlZicceewzTpk0TjE4kIqJAcqkST82cKBhNuHrmRDgA0fSV4WkJ+N1NE7CovMrn+lV3uTo2JmDgd0fIDdGqsfTG8SgVWPdnFwzHqmIDFgm0aVWxASqJevvzwE/91xCtWnJf9r+e3Du5JH+YFutnnY/SLZWiCSli8Z/TRulw6SgdFgkks6wsNuD9f5/E0hsnYPFW4XZ5p6R4RzFuqjiG9bMKAECw34cyOjQSU104Ke8ClUqFTz75BM888wxaW1uRnZ2NkpISLFmyJNxNIyKKCHKpEqtL8rHs3a8xOScNc7wiBvedaEI7IJmusrokH4tlysUi5IxtNizeekB43a0HsGFWgW/Um1qJtMRzGcuMPKRgMrbZsERkf1zauT+69y//xKL1swoC4g7d67r7wXKRPuZUSPexsmKDaP911z087VwanXcUY6vVjpUzJ57LKffrQ6GIDpVKc+rPqS6clIvYvn2759/Z2dnYsWNH+BpDRBTh5FIlmi0ObDt0FtsOnQ0ov8GQKbuu0Ffy3uXD0xIEB2Gp1Bd3+sPojCTRxAtGHlIwdWV/dO9v/u8129tl+8mnh87i0x70sRabU7aP+etJbGOwdOf32J/wRk8iIgo5udQIyYSUXqSrANIJDnKpL9GW/kDh1Z390f+9vUohCmEfC4dI7declBMRUcjJpUZIJqT0Il0FkE5wkEt9ibb0Bwqv7uyP/u/tVQpRCPtYOERqv+aknIiIQs6d/CCkSK9DslopWp6kiu3xuu5yMe6kCCEDKUWFIkN39kf/92riYnrcTxJC2MfCIVL7NSflREQUckO0aqwqNgQM7O4UhuFpCVgpUq4ERMtWyqzrLje22XC0rgX7ahpx9GwLjG02AB3Xsq4tycdfHrgE7z5UiDfvvwTvPVSEvzxwCZ7uTH8QW5coWNz72PGGViy/eWLAhNI/jeSMyYJTRgvmT9fj/YeLsPHeC7F0axVWzJTuB6uKDZiq9627UK/DqcY22XXl+lhtkxkHT5nw5XcNOHTKhNomc7B+Pd3mToCR+z32N/3rTxsiIhqwcnSJkkkmsQDmT9djwYyxaLE4kaSORavVAVdn2eIbxsEFBZrNdiRr4qDoXA4ACbExWFlsQJvN6SlPUMUiITYGp5rMeEIiGs3qbMeGbUcEI9siMVaNIov/PpagisXSG8dj8Q3jYLY5A9JIxKJFV8zMhwoQ7QduMwxDMbtwJGzOdgxOikeCKhY2h7Ozj42HC/DpY+rOdUfoErG6JB/NFocnJSW5MwP9+4bWgPQW7yjGcAhFqkuocVJORER9ZohWLZhkcsZkwQKByDUA+MsDF2PDtmrRB5CsKcnHwrerBNMWpuWlY4YhUzQabdUtBtEouN3V9fig6jR2VUdWrBpFDqHovjabE6VvV2FaXnrAPiYVLbp0axWuN2ShtNz3YYhARz9YdYtwrCEAlBVPxAdVRwL2dfe67nZ4xx661TaZJeMU1946KWx/wEZaOhIvXyEiorCTikxMjFdKxrWZLA7J+LOMZOEnUu48Uo9mi0O07gytWnCS4l63voWXsVDvdCW6z5tUP9lV3YAMbd/v60azXbJ/GmWSW+gcTsqJiCjspCITWyzCj7N3k4s3szraxbcrMWGQWq8r2yWS093oPrloUal9VirWsDf7umycIvtJl3FSTkREYScVmZikjhUtA+TjzeKV4kOdVBSc1Hpd2S6RnO5G98lFi0rts1Kxhr3Z12XjFNlPuozXlBMRUVDVNplhNNthMtuRoomDVhPnuab0jMly7kZPjRJpCR03erojE4WeGthqdYiWFel10KqVmJaXjp0i15T/2GrD/Ol6FGSnwupohzouFntrGnH4lMkT9SZUd53Jgql56aLXqvfXWDWKDMY2G9pdLmy890IoFArsrWnEpopjSFDFYk1JPoZq1WhotcJ+uh1adRysdifi42Jw5djBGJeVErA/H6o1oq7ZKritaXnpSFYrUTw5E3OKRkEZG4Nmsx1aTRzsznZ8d7alx/t6iiZOsn+myEza6RxOyomIKGikUhhigYCbOd0pJzm6RKwsNmBxeZXP4F6k12FYika0bGWxAcPSErBi5kQsEihfMXMiYgBs3f8Dnt1WHbBdd9SbUN2F+nRcNiYDC7dU+kz4+3usGvV/Qqk+hXodXrjrfGSmarDs3a8D+snSGydg6dZKrL11MhZvrQrYn1cWGxAfGxPwB6p7f81M1eDRq8cI9s9VxQacn5Mm2oek9vWsVOn+yZSiruOknIiIgkIuhWH+dL1g2aLyKqwpycfqDw9iTmGuTyRincmKfx3/EZ8erBMse/qjQ1h60wQsf+8bTM5Jw5zCXFgd7YhXxmDfiSY89d43mD5uiOB2l2w9gKdvm4S1Hx0SrHvtR4ewstgQcbFq1L8JJa4AwO7qBtyYn4WXd30nuL8+9d7XWHlLPpZslU46EdtfpfrnovIqLLlxvGgf+v1tkyT3+RG6RKy9dRKMZrtnuyle35BR13BSTkREQSGXwrBgxljRMpPFgQ8PnMGHB84ElG+890K8f+A03j9wWnD9+dPz8MnBOnxysE6w/I6f5Agu33mkHo2tNrxfdRrvVwnX/djVYzA6I4mTcAoaqcSVjOR47JLoQw6nS/AyEXe50WxHVqpGcH+V65/tLvicffdvs1wfyErVcBLeS7zRk4iIgkIuhUEqRUUqoUEuGaI3iRRy6zI5goJNKnFFdl/vRdKJ7LoS5ewHfYOTciIiCgq5FAapFBWphAa5ZIjeJFLIrcvkCAo2qcQV2X29F0knsutKlLMf9A1OyomIKCjcKQxCivQ6tFqFz0q7E1TE1nWnoAiZlpeOtEQVpkmUSyVSyK3LhBUKtvQk8X2urtmKqRJ9SBmrkOxjUkkncv1TIbIe+0Hf4TXlRF4OHjzY6zrS09ORkyN8DSvRQCAWeSiXwhDb+W//slWdCSprig0w2RxwQeGJawNcSFEpJVNQhmjVWF2SL1quAFB2iwEZyfGeCLkzJguuOG+w7Lq8lpykGNtsqG+xwWTp2F/TE8/dBOxdlqqJQ3xcLExmO0wWBxZdPw6/Mtsx/429nqdlTstLxxXnDUbhaB0Wl1f5XFs+Va/D0psmYN5re/HsXefjqXe/Dihf0Zl0ItYmuf6ZEBuDvzxwCRLjY9FicSJZrUSL1YHcQQmCn8n/81LvcVJOBMBsbACgwN13393rujSaBBw6dJATcxqQpCIPR+gSJVMYTjS0Yv50vU/KSavV4TlD5wCw4v2DwnWnaiRTULIkymubzPig8pTPY8Sn5aXjsvMGy65LJEYo1tD9x5wL8JSlJ6nw+i8uwZK//ztg337rwSk4erYVCsDzjU5cbAyuN2RhtlcKSl2zFfGxMfjP2/MRL1Kuio3BqSYznhBo0+qSfGSlaqCOjcHiG8bDhY5ryJM1cVAASIiNgdnZjg3bjgjGJUp9Xnfd1HuclBMBsLc1A3Bh8p0LMDhXOCGiK0ynjuPLTctQX1/PSTkNOHKRh2tvneQ5Y+4/SJ9sbMNCgXWBjoF/dUl+l+qWmiinJAROpD3xc9W+aRc7j9Rj4ZZKbJhV4FmPk3DqKrFYw51H6rH927M+fwSuKcnH8ve+Fty3l249gDmFubjv1a8AdHyj4/8HpNu0vHQ8fdsk/Oatf4s+5GeGIVOwTQu3VHasK9BmAPjLA5cETMjdbVzU2f/EPq93P6Le4aScyEtSRg4G5YwJdzOI+iW5SDV3HJuQZotDcl25cqm6pUjFz+08Ut+lqDcif/KxhufKMrTxXY4K9V/XmzvCU2p/vvfSkT1aNzE+Vrb/sR+FHm/0JCKiLgllHFtv6pasV2Y9Rr1RT3Qn1lAqCtS/PFzxn3JtlOsn7EfBwUk5ERF1SSjj2HpTt2S9Musx6o16ojuxhlJRoP7l4Yr/lGujXD9hPwoOTsoFrF69GgqFAo8++qhnmcViwbx586DT6ZCUlISSkhKcORP45DkiooFKLlJNKo4tWSLysEivky2XqluKVPwco96op+RiDb3L6kxWyX27znQustN/XW+hjP9stTpl+x/7UejxmnI///rXv/Diiy8iPz/fZ/ljjz2G999/H2+99RZSUlIwf/583HLLLdi9e3eYWkpE1LfkItXc13yfbGxDs8XhiUxMUisxPC0Bq4oN2F1djwyt+lw0odGMQn06hqclyNZ9xmRBY6sNJosDWo0SaQkqDNGqJduckqBi5CFJ8o75S9HEITFeiRaLQzL2LyVBhTUl+dj+7dmAqM3p5w3GZecN9uxzC7ZU4vVfXIKn3vs6YN9eMdOAhhYLPn38MljsTljsTlxww3j82GaDxeZEm90ZEOEptt0rzhuMGAAfPjLVk67i/gZKp4lDhkT8Z+6gjv65SKD/rersf+xHocdJuZeWlhbcddddeOmll7BixQrPcqPRiI0bN+KNN97A9OnTAQCbN2/GuHHj8MUXX+CSSy4JV5OJiPpUfGwM5k/P84s1dCI+tuOLV6nIRE1sDD6oOu1zI9vUvHRcNiYDABALCEYmxgI40dAakN7injDk6BIl28zIQxLjHfOXoIrF+lkF2Lz7mM9+Jhb7Z3e244PK2oC88MLROuToEn32OVWsAmtvneTJKU9WK2E02/DzjV/iyZ9OwH9+EhhFOLswF795699oszl9IjxdgGDE5/TzBsPsbMeK978R7H+AfF9Yd/vkc3/4qpVISzz3hy/7UehxUu5l3rx5uOGGG3DVVVf5TMr37NkDu92Oq666yrNs7NixyMnJweeff85JORFFBWObDb8ViVSblpeOVbcYJGMNl988MSBZYldnpNrqknwsEIlMnKpPxwzDUNG4tnW3T+7SGXNOHsibf6zh3KLcgAk5IBz7d8ZkQanA/rrLb5/03+fc3/g8/tf92F3dgPnT9YLbrKhugKuzTc9uq/aJNRSL+PzRbA+YkLvrWlxehTUl+RiWliDZF4Zo1ZJ9if0otHhNeae//OUv2Lt3L8rKygLKTp8+DZVKhdTUVJ/lQ4YMwenTp0XrtFqtMJlMPj9EFDzsY31LLl5QLtZQLBli55F6ybjFXdX1ohOFiuoGNLbautB66omB3Mf89+eC7FTRfdAd++fW2GqT3Nel9knvdaW2ubu6AQXZqT5tkIo1dHWuI9YmueQWCj9OygGcOHECjzzyCF5//XWo1dJnW7qjrKwMKSkpnp/s7Oyg1U1E7GN9TS5eUDbWUKJcLlKtp1Fv1DsDuY/5789ycYTe+6jcPidV7l0mt03/cql6pfoXwNjCSDAgJuU2mw2HDx+Gw9GzA/OePXtQV1eH888/H0qlEkqlEjt27MD69euhVCoxZMgQ2Gw2NDU1+ax35swZDB06VLTe0tJSGI1Gz8+JEyd61D4iEsY+1rfk4gVlYw0l01mk1+1p1Bv1zkDuY/77s1wcofc+KrfPSZV7l8lt079cql6p/gUwtjASRPSRrK2tDQ899BBeffVVAMC3336LUaNG4aGHHsKwYcOwcOHCLtVz5ZVXoqqqymfZnDlzMHbsWCxYsADZ2dmIi4vDp59+ipKSEgDA4cOHUVNTgylTpojWGx8fj/j4+B5+OiKSwz7Wc96JE0IJEz80tsHklaCSrFZ6YuB2ilxT7o41rBD4Cr1IrxOdgEzLS/fELQqtO1WfjjqTRXDdIr0OaYm8xjVUBmIfc+/7RrMNb95/MXYfbcCmimPYd6IJhXqd8H0NeelQxipgbOt4cmVaogpXjh2McVkpKMhO9aSg7K1pxMFaIwYlqkRTXWIUHfv0rup6wW0mqGIxtygXU0bp4Gx3YdPsi7C3phGHTpkQHxeDGwxDccv5w5GhjUeLxYlktRJnTBbEKiDZ//jHa/8X0f9DpaWl+Pe//43t27fjuuuu8yy/6qqr8B//8R9dnpQnJydj4sSJPssSExOh0+k8y++77z48/vjjGDRoELRaLR566CFMmTKFN3kSUcTxTpxw806YkEpQWTlzIkoFYtNWzJwoG2uoQuCkwb1uVqpGNJJtZfFEKETWXVVskL3Jk8hNaN8v0uuwflYBlr3zNV6+9yLB6MKlN45HyQufYXym1tNPfnfTBCwqr8Kz26p93ruq2ABHuwu/fnOfYKqL+7ULLmyqOIb1swoAwKds8+5jAfUuvXECHnlzH/44qwBLth4I6J9rig2S/W9YWkJIfqcUPBE9Kd+6dSv+53/+B5dccgkUCoVn+YQJE3D06NGgbusPf/gDYmJiUFJSAqvVimuvvRbPP/98ULdBRBRq/okTbu50B7kElSU3jMfknDTMKcyF1dGOeGUM9p1owlPvfYMnfzoBaz48iDmFuT6xhnUmK9Z8eBAPX3me6Lq/v20ScnSJkpFsUmVEcsT2/YrqBigUCvzX3J9g5fvfCO6jqz88iDt+koNnt1V7UlD8J8buunYfbfCJLPRPdWmzOfHwm/swtygXv7pcj/i4GKy4eSLsThcUCmD5u18L1rv8va+xotggut2d1fWoOFIv2P+e/ugQVhYbmJzSz0X0pPzs2bPIyMgIWN7a2uozSe+J7du3+7xWq9V47rnn8Nxzz/WqXiKicOptgko74HMGz9vj14zBBwfO4IMDwk87nn/leaLr1rd0XBYgFckmF9dGJEVq3991pB4WRzs+OXQWnxw6K/ieuy4eAUA+BSUjOd4nsrAgOzVgv2+zOfHstmo8u60anz5+GXIHJwEAjta1+OSee9td3QBlbIxo/8zQqvH+gdN4/4BwKtxjV4/hpLyfi+hJ+YUXXoj3338fDz30EAB4JuIvv/yy5LXeRKF28ODBflEHkT+5BBXZBAeJ8lCmrxD1luy+340EIKkUFP/ElO6luvS8D3VnO9Q/RfSkfNWqVZgxYwa++eYbOBwO/PGPf8Q333yDzz77DDt27Ah38ygKmY0NABS4++67g1an3coMZgoeuQQV2QQHifJQpq8Q9Zbsvt+NBCCpmyb9b2juXqpLz/tQd7ZD/VNET8qLioqwf/9+rF69GgaDAf/7v/+L888/H59//jkMBkO4m0dRyN7WDMCFyXcuwODcsb2q61TV5zjwzp97HPVJJKS3CSpiFwb2dt30JH6tTqElt+9LJQAV6nXYd6LJ8960RPG66pqtPmVSqS7++75UGwv1Ojic7aJtrDNZMDUvXfSJu+xj/V9ET8oBYPTo0XjppZfC3QwiH0kZORiUM6ZXdZhOHQ9OY4i8pCSosLYkH8d/bENifKwnUq3F6kDuoAQMSdVgTbEB1nYXrI52mMwdkYnxyhjExygQFxuDslsMyEiO98TAnTFZcMV5gzE0VSOZ/qCOjQmYcEzLS8eaknxe60ohl5KgwuqSfCzcUim4D2aKJAAV6nWYU5iLh9/c53nvEK0aT5fk40ezHS50XFbi/qYoXROHy84b7Lmp1J2wogB86hXa91MSVKL1NrVaMe/1vXhl7kWwOdrhgsKr3IUUlRKXjckQ/XzsY/1fRE/KxR73q1AoEB8fD5WKOyARkT+rsx0bth0RjDwEAAeApX8PjFxbWWxArLMdH1TW+tyMNlWvQ+FoHQBghC4Rq0vy0WxxoNliR7K6I+N8eGcc24ZZBahvsXnK0pNUnCxQn8lK1UjugwEJQBol1MoYmMx2vDu/yOe9Fmc7Vrz/jWA/iQMwY+JQzL50JKyOdigVCsyfrsfSG8fDbHNK7vui9c40YPPcAigVMfjd+18LbneEzOej/i2iJ+WpqamSKSvDhw/H7Nmz8eSTTyImZkA8vJSIqFd+aGyTjDxcXZIvWV5WbAhIh9hV3YBF5VVYd/tkDNGqPRNwISkJnCBQeMntg11J+altMkv2k8U3jMOi8gMB6xXpdZ5+IuSkVP/c2tE/F2ypFN3umpJ8DEtLYB+LUBE9KX/llVewePFizJ49Gz/5yU8AAP/3f/+HV199FUuWLMHZs2fx+9//HvHx8Vi0aFGYW0tEFH4mmchDuUjEFptTtKyx1cbIQooKRrNdsp+4RO6gkOsncv1PrtxkcWBYF9pP/VNET8pfffVVrFu3Drfffrtn2U033QSDwYAXX3wRn376KXJycrBy5UpOyomIIB9b2JtYQ6mYOKKBJFT9pDf1Aow9jHQRfU3HZ599hoKCgoDlBQUF+PzzzwF0JLTU1NT0ddOIiPoludjC3sQaSsXEEQ0koeonvakXYOxhpIvoI2h2djY2btyI1atX+yzfuHEjsrOzAQANDQ1IS0sLR/OI+pVgPYwoPT0dOTk5QamL+p5WJrZQLtYwSRUrWG+RXoe0RF7HStFBKj6xI/7TJbieXD+R639y5fzDOLJF9P/e73//e9x222348MMPcdFFFwEAvvrqKxw8eBBbtmwBAPzrX//Cz372s3A2kyisgv1AI40mAYcOHeTEPAIY22yob7HBZOmITUtPVGFYWgJWFhuwpLwqIEFlRbEBwzvLxWIN4zr/7V+2qtjA68kpamTJxH/GASgrnogMrRpWRzuS4pUYnqaBzdmO4/WtMJptSFAp0WJxeFJeEuNiYXbYsGKmAUu2Ctc7PC0Bq4oN2F1d76lbHReLM0YzCvXpGCZxkzX1fxE9Kf/pT3+Kw4cP409/+hO+/fZbAMCMGTOwdetWtLS0AAB++ctfhrOJRGEXzAcamU4dx5eblqG+vp6T8n6utsnsyUl2c+cVKwBcb8jE7MJcWB3tiFfGoM5k9dyaFgNg/nQ9FswYixaLE0nqWLRaHYgBEBsbg/nT8/zKnFDFRvTVkETdNkKXiLW3ToLRbPfED6Zo4pCVqkFtkxkfVJ3Grupz/a9Ir8Pswlwse+drvHzvRQEpKkV6HZbeOAFLt1ZiZXE+2mxONJvtSNbEIUEVi4TOPuYC8EHVKb8/qtNxqT69zz47hUZET8oBYOTIkZ7LV0wmE95880387Gc/w1dffQWnUzglgCgaBeOBRhQZjG22gAk5AOw8Uo/t354NyBl3K9LrOh6uIhDJ5i5ffMN43PHnLwLKpuWlY8OsAkaxUVTJStUgK1Xjs8zT/6p9+19HKgvw3F3nY/l7XwvGGj713teYUzgKlz29HYV6HQpy0vDstmoAHX2s7BaDYGTirup6LC6vwtpbJwW0hyLHgDi1sXPnTtx7773IysrCunXrcMUVV+CLLwIHDSKiaFDfYhN81DYAZCTHC07Iga5FrglfKdsx4a9vsfWkuUQDilT/213dAGVsjGQfy9DGe95bkJ3qKdt5pF420tQok85C/VvEnik/ffo0XnnlFWzcuBEmkwm33347rFYrtm7divHjx4e7eUREYWOSiEWzOtql1+1FJBvj2Iik+x8gH2vYYjn3Lb9/f5Xtn+yDES0iz5TfdNNNGDNmDCorK/HMM8+gtrYWGzZsCHeziIj6Ba1ELFq8Uvqw35tINsaxEUn3P0A+1jBJfS7hyL+/yvZP9sGIFpFnyj/88EM8/PDD+OUvf4m8vLxwN4eIKCx+aGyDyeKAyWxHiiYOyWolhqUlID1JhV8UjsQ9l45Eq80Jk7kjfSVRFYtDZ5px1djBGJuVgoLsVE96w96aRhysNcpGrsUqgI33XogMbTxaLE4kq5U4Y7KgfO9JpCfxenLqH4SSh8TudxDrR92tx/1ep8uFqXnpPpew5A/TYv2sApjt7TCZ7fjwkanQxMXgh0YzjBaHTx9saLZh/nQ9pozSwdnuwqbZF2FvTSMOnzLJRpqmyEzaqX+LyEl5RUUFNm7ciAsuuADjxo3Dz3/+c9xxxx3hbhYRUZ/5vqE14IYvd2zaCF0ifn7pSJSKlP/HTROwoLzKcwOZd5lcJGIMgE27jwnWy5s8qT8QSx5aXZIfcBOkVD+Kj43Bb7tYj/c205NUeP0Xl+Cp975GRXVD54T8fCzeGridpTdOwCP/8wXqW2wo0uuwYuZE1Pxoxr6axoD+uarY4Ik0FeufvMkzskXk5SuXXHIJXnrpJZw6dQr/7//9P/zlL39BVlYW2tvb8fHHH6O5uTncTSQiCpkfGtsEExgqqhuwuLwKJ2XKm22BN4tVVDdgSXkVapvMnqi3Dx+Zir/+v0vw4SNTsfbWSUiIixVMZnHXe8ZkCc0HJuoiqeShhVsqYWw7dzOyXD86/mNbl+rx3+YdP8nBmo8OYnJOGjbeeyGeuzNwQu7ezlPvfY01Jfme159/9yNe2nlUuH9uPYDaJjP+8PFhPHHdWHzwyFT8zwOX4INHpuKJ68bimY8Psw9GuIg8U+6WmJiIuXPnYu7cuTh8+LDn6Z4LFy7E1VdfjXfeeSfcTQy7mpoa1NcL3wXeHcF6GiQR9Z5cAoN8gopCsGxXZ3qDO+bN/6zboVMmyXobW218gBCFlVTyiTshyP2Njlw/WjBD+LkO/vX4b7MgOxXPbqvGtkNnAQAfPjK1y9uRSkfaeaQeRrMdW/efwtb9pwTf8/8u07MPRrCInpR7GzNmDNauXYuysjK8++672LRpU7ibFHY1NTUYO3YczOa2oNVptzLyjCjc5BIYQpWgYrI4pLcrU04UarLJJ17lcv3EOwVFsh6/bXY3MUUqbUVqu0LYByPbgJmUu8XGxmLmzJmYOXNmuJsSdvX19TCb23Dx3CehzRzZq7pOVX2OA+/8GQ4HOzxRuMklMIQqQUWrlh4y5MqJQk02+cSrXK6feKegSNbjt83uJqZIpa1IbVcI+2Bki8hrykPhhRdeQH5+PrRaLbRaLaZMmYIPP/zQU3755ZdDoVD4/Dz44INhbHHXaTNHYlDOmF79JKZnhvtjEFEndwKDkCK9zpOgIlYufPGKfHpDWqJKst60RN7oSeGVnqTCtDzhx81Py0v3SQiS60etVuEz5f71+G9z34kmFHrVm6SKldxOncnqeV3XbJVsf4omjn1wAOOfVJ2GDx+O1atXIy8vDy6XC6+++ipuvvlm7Nu3DxMmTAAA3H///Vi+fLlnnYSEhHA1l4iihFAk27C0BKwqNmB359P/3LGGZ4wWFOp1GJ6WgLJiA34wmpEYr/REF7ZY7RiWokEMEBDZNjUvHStnTvRcRy603SFaNVYVdzzm2z/5YVWxgdeyUtilJKiwuiQfC7dUYqdfasqaknyfhCC5JBNXe2C0oX89xjYbGlptKPvpBLTHKNDSGUF6oyETiapYtNqdOGW0YOmN47H3+0Y89f5BtNmcnu387qYJuPOljieQT81LxyW5gzBllA5L/35AcLuZqRqs6myz97XnUzvbzD4Y2Tgp73TTTTf5vF65ciVeeOEFfPHFF55JeUJCAoYOHRqO5hFRFBKLdltXkg8XgA+qagMG5ks7z6K1A9iwrVow6k0JYMbEoZh96UhYHe2IV8agziu1QSpSLkeXiHW3T0Zjqw0miwNatRJpnRN2ov4gK1WDDbMKUN9iQ7PFjmR1HNKThPPF42NjMH96HhbMGIsWixNJ6li0Wh2oaWjDY3/djzt+koNfXjYa8XExSNWofOpx95P4WGDJjROxWCBacXZhLh5+cx/abE5M1evw/sNFaGixIjE+DvHKjpzy5TdP9PRBh8uFM43mwP7ZfO5selxsDK43ZGF2Ya5PeVwsL36IdJyUC3A6nXjrrbfQ2tqKKVOmeJa//vrreO211zB06FDcdNNNWLp0Kc+WE1FISEW7tTnbBaPcdnVGua0uyZeMeltZbMCi8gMB2yzS67C6JB+lb1eJRsFtmFWAIVo1J+HUr6UkiD/kx83YZgvIIXcr1Otwx09y8Oy2ajy7rRrT8tKxYVaBzxlyd//c9dvLRaNCXQDmFuXi2W3V2FXdgKVbD2DFzIlYvPWAYCJLkV6H+dP1gv1zWl46nr5tEp4QabN/GynycFLupaqqClOmTIHFYkFSUhLKy8sxfvx4AMCdd96JESNGICsrC5WVlViwYAEOHz6Mt99+W7Q+q9UKq/XcX7cmkynkn4EomgzkPiYV7dZmc/YqEtH99bnYul2NlKOBL1r72O7qBswtzPW8lopBbJHoj/71VFQ3wGxv73EUY2Nr1yMfKfJwUu5lzJgx2L9/P4xGI/72t7/h3nvvxY4dOzB+/Hg88MADnvcZDAZkZmbiyiuvxNGjRzF69GjB+srKyrBs2bK+aj5R1BnIfUwq2i1ckYhdKaeBJVr7GBAYTygWgyjX3wLq6UUUo1zkIftnZOMFSF5UKhX0ej0uuOAClJWVYdKkSfjjH/8o+N6LL74YAFBdXS1YDgClpaUwGo2enxMnToSk3UTRaiD3Malot3BFInalnAaWaO1jQGA8oVgMolx/C6inF1GMcpGH7J+RjWfKJbS3t/t8bedt//79AIDMTPGowPj4eMTHx4eiaUSEgdPHapvMMJrtMJntSNHEdaSdJKlwx0XDcd/UUXA4XTCZO1JQlLEKaGJjUDw5E3OKRkEZG4PmzjK7sx2bK77zRCJWiFyzmqASHvTdcYrT8tJ9kivc/KPgaOAbKH1MiDvKUGhfL9TrcPiMCRvvvRAZ2ni0Wpywt7fjjMmCIVo10pNUuHpcBsZkapHYGXno3d8SVLGYW5SLKaN0cLa7sGn2Rdhb04iDtUZo4mIk+6dUFGNaonib2T8jHyflnUpLSzFjxgzk5OSgubkZb7zxBrZv345//OMfOHr0KN544w1cf/310Ol0qKysxGOPPYZp06YhPz8/3E0nogj2fUNrwE2Z7ojBX16uFyxbXWzAo1ePESxbWWzAcJmot7jOfwuVDU9LwIqZEwVjD1fMnMjrVWnAEItPLNLr8MDU0Riaqsayd78W7Js5ukQsuXE8FpVX4S//V4PXf3EJnnrva1RUNyBBFYv1swqwefcxPLut2mfdlcUGPPXuASy9cYLn/f7ltY1tAf3THYk4RKvucuQjRR5OyjvV1dXhnnvuwalTp5CSkoL8/Hz84x//wNVXX40TJ07gk08+wTPPPIPW1lZkZ2ejpKQES5YsCXeziSiC1TaZRVNSdh9twAeVtYJlzTYHVrx/UDRdZXVJPrbuPYGyYgNabE40m+1I1sQhSRWLVpsZL31RixUzJ8Jsb/eUaeJi8PLOo/jlFXlY/t43mJyThjlekWv7TjThqfe+we9vm8SBnwYMofjEJLUSNrtTNFFlUWcf845AvOvlL7CmJB8LZoxFXEwMVr7/jWj/XFVswGmjGU9cNxYLFAq0WBxIUseizmTFmg8P4peX6zE5Jw2/vFwPtUAUY3ciHymycFLeaePGjaJl2dnZ2LFjRx+2hoiigdFsF01hyEiO98kg9+aCQjZ95Q+fHsUfPj0aUP7uQ4V47csTeO1L4WuD77xkJD45WIdPDtYJljPdgQYaofjEQ6dMsn3M+0x2fYsN9736FQDgg0emivbdiuoGtNqcuP3PX4q2Z/6V53miGD96ZCpGZyR1qc0U+XijJxFRmEilNvgnNniTS2+QKpdKdgCYvkIEyKecSPXd3vRP/3K5dtDAwkk5EVGYSKU2+Cc2eJNLb5Aql0p2AJi+QgTIp5xI9d3e9E//crl20MDCSTkRUZikaOJQpNcJltU1WzFVpEwBl+h67gQVsfJWq0Ny3RRNHKblpQuWM92BokVaoqrHfUzR+R6xdd3pK2LlDme7599piexv0YR/ghERhdjJxjY0WxyeyMMktRLD0xKQlarBmmIDTDYnXIAn2hAAUlSxuHS0TjBBJVmllExXkUpfGZaiwapig2C6yqpiA7JSNUx3oAFFKHI0K1XjKRfqn7GOdpTNNKDF7oALCq++6UKySgljmxVPzZyI32094HP9+FR9OhKUMVg504DFWwP72FMzDXj4zb34/e2T8dS7X/ut21H+841fevrjEK0aAGBss6G+xQaTpaMd6Ym8pnwg4qSciCiExCIPVxYbMEKXCAeAFX5JDe5yDYDlN0+E1XEuJSVeGeP5inPxDeM8E4ZkTRwUcMF9ccoIXSLW3joJRrPdk9CQ4jUZWXf7ZDS22mCyOKBVK5GWqPJMAJjuQAOFXP8TLZ9pgAIISDnqiAY1oPTtA6g+24qlN47H4hvHo8XigM3Rjs++a8CMDRXQD07EhjvPR5tX+lG8Mga1P7Zh3vQ8xCiA6w2ZmO2VcFTXbEW7y4WX770QqQnn+mNtkxkLtlRil98fyatL8n3+uKDIx0k5EVGInGxsE408dEcXSpWvLDZg+rrA5KeyYgM+qKoVTHgo0uuwuiTfcyZebNAeolV7Bn0hTHegSCcVOSrX/5ZsrcL1hkzRsvWzCnD573eg9O0qTMtLxwxDJkrfrvK8r/IHEy57ejsK9TrMLczFH7cd8dQ1f7oe//X5ccF0l2l56dgwq8DT94xttoAJOQDsPFKPhVsqfd5LkY/XlBMRhUizxSEbqyZV3mYTTkrJ0IrHJbrrJYp2UpGjcv1vV3UDMkT+aK2oboDZfi4daeeRemQkCz/1dHd1AzK08T7bKchOFd3uziP1qG+xeV7Xt9gCJuRi76XIx0k5EVGISMWmAT2PTpOKSwQYW0gEyPc/ufLuxJJKvdc/hrQ7/dfEiNKowkk5EVGISMWmAT2PTpOKSwQYW0gEyPc/ufLuxJJKvdc/hrQ7/VfLiNKowkk5EVGISMWmycWqFel1SFAJZ4rXmcTjEt31EkU7qchRuf43Va9Dnckquq4m7tz0aVpeOuqahd9b2FlPodd29p1o8nntzT92ND1JxYjSKMJJORFREJwxWXDolAn/d+xHHDptwhmTxRNN6D/w+0cXipWr0BGx5m2qPr0jAUKmXqJoZmyzwWxz4tGrzsPf5xXinfmFePHnF+C/5/4EHz5ShMU3jEdjiwUrZgr3oxXFBlw6Wifaxx5+cx+Ac1Ghl5832GfynKCKRVnxRCycMRZOlwtP3jTB84f0popjmFOYG1C3UOxoSoIKq0vyAybmjCgdmHg6hYiol2oaWlEqEKu2qtiAOAjHGroPvnEAVhYbfKLTElSxiAPQDmCGYShmF448F5tmsgDoiDxcXZKPZovDE1uY3Jl/ThTNhCIEC/U6PDB1FIakqLHs3a89ffW8jCT86ecXdPTPzn4Ur4zB/a9+hR/bbFhTko/SGePQanMgWR2HJFUsahvb8ODlek+MIQBkesWItlo7+vHvth5AafkBAB2T9KU3jMeSG8fDbHMiIT4W86fnYW7RKFjsTp+6/DGiNHpwUk5E1AtnTJaACTnQGbu29QBmTByKRZ0Dszd3dOECgXXd5fOn60XXXXf7ZE7AifyIRQjurm7AjYZMvLzrO5/+9m1dC6av24FCvQ4Lrhsb8MyA+179CoC7P+Zhxh93BWzTO8YwJUGFMyYLHv/rfp962mxOlJZXoUivw9pbJwm20b8ub4wojQ68fIWIqBcaW23isWpH6kWzwLsSiZgYL3zepKK6AY2tjEIj8icVIZihVYtGie6uboAyNkamPwrf4+EfTSh1TKioboDRbGfMIQnipJyIqBdMMpng3YlV8+cfpdad7RJFI6kIQdkowl70R98YQ+m+KRdjyJjD6MVJORFRL2hlkk66E6vmzz9KrTvbJYpGUhGCslGEveiPvjGG0n1TLsaQMYfRi0d1IqJeSEtU4ecXZ+O+qaNgtrfDZLZDq4mDJi4GmyqOeW7M9OcdyVYhck252ebE/Ol6FGSnwupohzouFntrGnGw1oi0RF5fSuTPHSG4s/PykKvGpuPJmyaixeaEyWzHh49MhSYuBj80mmG0ODx96ptaIxzOdsn+2GoVPlM+NS8dTpcLR8+2ID1RhbREVUA9CapYzC3KxZRROrRaHXjz/oux+2gDNlUc83lyL2MOoxsn5UREvTBEq8Yvpo3GIoH0FXesof8A7R+JuLi8SrA8BsC+mkY8u606oEzsWnWiaJaSoMJTMydicXkV1EoFltw4EQsF+ubSGyfgkf/5AvUtNhTpdXhq5kQ88uY+PH3bZDz13tcB/XFVsQGq2BifCb+77N5LR2Lmc7vRZnN6ogpXFRuwqLNfJ6hisX5WATbvPhbQl9fPKsDDb+7zWZc3dEYvTsqJiHrhZGNbwIQc6ExfKa/C6mIDnrhuLBbFxngiDx3Odjzz8WH8+tqxWP3hQcwpzMWCGWPRYnEiSR2LOpMVe47/iPJ9P4jWu+72yZyYE/mpbTJj2btfY3JOGn52wfCACTnQ0Yeeeu9rrCnJx32vfoWK6gYs3XoAv799Ms40WfDEdWNRqlCg1eaEVq1EWqLK09fc0YRGsx0WuxOffdfgmVQDHTdqLthSiQ2zCrDu9smeG7JX+qW6uNuhUCjw93mFiFEoGHNInJQTEfWGXIJKs82Jnz67W7D8gcv0+PDAGXx44ExA2cZ7LxRNinCnr3BSTuTLaLZj26Gz2HboLG4wZEr2zQUzxvq8tjqc+Pnm//Ms+/TxyzA6I8lnPXc04dG6FtzywmeCdbsTVEZnJGGIVo2jdS2ifXnXkXrEKBQB26HoxBs9iYh6wSST2CCV6CBVJpcUwfQVokDe/VGub/qnqfi/lkpBkUp58V+3O++l6MZJORFRL2hlEhukEh2kyuSSIpi+QhTIuz/K9U3/NBX/11IpKFIpL/7rdue9FN04Ke/0wgsvID8/H1qtFlqtFlOmTMGHH37oKbdYLJg3bx50Oh2SkpJQUlKCM2cCv3ImoujiTlARUqTXIUklHKPmnb4ipM5kwVSJepm+QhQoRRPn6VNJqljJvllnsoq+lktBcae8CPFftzvvpejGSXmn4cOHY/Xq1dizZw+++uorTJ8+HTfffDO+/vprAMBjjz2Gd999F2+99RZ27NiB2tpa3HLLLWFuNRH1lZONbTh4yoQvv2vAoVMmnGxsAwBPgor/4O9OSVF3/luobHhaAlaJrFukTxetdxXTV4h8uPvniR/bsOSG8djx28vR0taGFTOF+9DvbpqABVsqBV93JQUlJUGF1SX5AZNtoXW7816Kbvz+s9NNN93k83rlypV44YUX8MUXX2D48OHYuHEj3njjDUyfPh0AsHnzZowbNw5ffPEFLrnkknA0mYj6yPcNraKRhyN0iUgAUFZsQIvN6UlYSVLFQg3ABWD5zRNhdbR7yuKVMXB/YZ2jS/SkNJgsjoC0B6kyIhLvnytmGrBpV/W5vmmxI1nd0TfNTieeu/N8aDv7o6O9HStmGhAXq0Bds1Via+dkpWo8aSzuusUSVLrzXopenJQLcDqdeOutt9Da2oopU6Zgz549sNvtuOqqqzzvGTt2LHJycvD5559zUk40gMlGHpbkY4FAOdAxMVh+80RMX7dDsMwda+j+ESJVRhTtpPrnkq1VePKnEzD16e0AOvqc+3WRXoc5hbn42Z+/8JTNKczFfa9+BaDjLPaGWQWyk2Z3GktXdOe9FJ04KfdSVVWFKVOmwGKxICkpCeXl5Rg/fjz2798PlUqF1NRUn/cPGTIEp0+fFq3ParXCaj33F7fJZApV04n61MGDB4NST3p6OnJycnq8fl/0MdnIQ5lysRQVxhpSJOjv45hc/3M4XYKvhSIRvV+7Yw05iaa+xEm5lzFjxmD//v0wGo3429/+hnvvvRc7dgSe4eqqsrIyLFu2LIgtJAovs7EBgAJ33313UOrTaBJw6NDBHk/M+6KP9SbyUK6csYbU3/X3cay7/dP7dW8iEYlCgZNyLyqVCnq9HgBwwQUX4F//+hf++Mc/4mc/+xlsNhuampp8zpafOXMGQ4cOFa2vtLQUjz/+uOe1yWRCdnZ2yNpPFGr2tmYALky+cwEG546Vfb8U06nj+HLTMtTX1/d4Ut4Xfaw3kYdy5Yw1pP6uv49j3e2f3q97E4lIFAocESS0t7fDarXiggsuQFxcHD799FOUlJQAAA4fPoyamhpMmTJFdP34+HjEx8f3VXOJ+kxSRg4G5YwJdzNC2sdONrah2eKAAsAdFw7HfdNGweF0wWS2Q6uJgzJWgZd3HvXEGlaIXFMuljfOWEOKBN3tY8Y2G+pbbDBZOvpJemJorqOubTLDaLbL9k9lrMKzTpFe53nd00jEMybLuRuvNUqkJfDGawoeTso7lZaWYsaMGcjJyUFzczPeeOMNbN++Hf/4xz+QkpKC++67D48//jgGDRoErVaLhx56CFOmTOFNnkQDkHeaQ/4wLdbPOh+Ltwqnr7gjEReXV/lMzN3lqs5/+5cx1pAGmtomMxZsqcSuI/WeZdPy0rG6JB9ZqZqgbac7/fOFf37r8/qhN/Z6IhDvfOncTZ7er8WiCmsaWlEqkPKyqtiAHF1i0D4fRS9OyjvV1dXhnnvuwalTp5CSkoL8/Hz84x//wNVXXw0A+MMf/oCYmBiUlJTAarXi2muvxfPPPx/mVhNRsPmnOaz72eSAAR/wTV957p9H8ORPJ8DhdHliD5WxCjz/zyN46MrzGGtIA56xzRYwIQc6bphcuKWyS0kmXVHbZO5W/ywrNuDewtFQxirwwj+r8cc7CtBsdaCp1YoX7roAalUsXC4Xmlqt+PPPL0SKRjiq8IzJEjAhd29nUXmVJ0mJqDc4Ke+0ceNGyXK1Wo3nnnsOzz33XB+1iIjCwT/NweF0yaav/PWrH/DXr34QfM/swlEYl6nlgE0DWn2LLWBC7hbMJBOj2d6t/tlic2LGH3d5lt1TmIufPrsbAPDuQ4W4aUOFp+zTxy/D6IwkwboaW22S22GSEgUDn+hJROTFP82h1+krTHCgKGCS2c+D1Q962z+l0lek2iiXlMQkJQoGTsqJiLz4pzn0On2FCQ4UBbQy+3mw+kFv+6dU+opUG+WSkpikRMHASTkRkRd3moqbMlbh89pbkV4X8H6hcqKBLj1JhWl56YJlYkkmPZGiietW/0xSxfq8djjbPf/uStqKW1qiSnI7TFKiYOCknIiok7HNBqu9HY9edR7euP9izJ+ux6//Zz9WzDQEDMj+6StS5UQDXUqCCqtL8gMm5mJJJj2VlarBqmIDyoonYuO9F+JEg1myf67+8BvP66dmGjDv9XPpKwu2VAq20dhmw9G6FuyracTRsy0wtnVcL75KpJ8zSYmChadwiIggHOc2NS8d//mzAjhcTpQVG9Bic3rSVRJUsXB/2a0GAsqTVLHguTOKJlmpGmyYVYD6FhuaLXYkq4WTTILhg6pT2NV542V6kgrP3nk+Ft8w3rPdJFUslC7gl5eNwvwrxyBJFYuGVgteuudCaDVxsNqdePmeCwPaKBXrmKNLZJIShRQn5UQU9cTi3HYdqceyd7/GjIlDsaj8QMB6RXodVpfkY4FAVJq7nFFpFE1SEkIzCXcTiiasb7Hhjj9/gUK9DgU5aXh2WzWAjv5XVmzA1Ke3A+iYXEtFM3Yl1nGIVs3+TCHDy1eIKOpJxbntOlIvOgi7IxHlotKIKDikogl3VzegIDvV89odiejmjmYU05VYR6JQ4qSciKKeXJyb1dEuWiYX9caoNKLgketP/n01IBJRMvaQ8aYUXpyUE1HUk4tzi1eKHyrlot4YlUYUPHL9yb+vBkQiSsYeMt6UwouTciKKelJxblPz0lFnsgiWdSUSkVFpRMEjFU1YqNdh34kmz2v/SES52MO+inUkEsNTOEQU9dxxbgu3VGKnX/rKkzdNgDIGmKrXedIeAN/Iw1XFBiwqr0KFXzmj0oiCyx1NKNTfZhfm4uE393leryw2oLHNgm2/vgxWRzvarA7Ud97jIXSzZ0qCCmtK8rH927PISI6H1dEOdVwszpgsuOK8wSG9gZUI4KSciAgAoAAww5CJ+6bmIlGlhNXRjs+/a8BPn60AACy9YTwW3zgeJnNH5Fq8MsZzAGVUGlHfiQEwf7oeC2aMRYvFidSEjgjEVrsTr8y+qPOSFRfuf/UrPDFjLNb844jPzaHuiMOsVE1A3S4AH1Sewq5q30jEy84bHPoPRlGPk3IiinrGNhue6IxCe2d+IdZ8dCgg4aG0vApFeh3mFObi9he/AHAuEnF4WgKj0oj6wBmTxSeCdP50PfbVNAq+nj9dj827jwX0Ze+IQ++z355IxGrxSESeLadQ4jXlRBT1vKPQlLExkhGHGdp4n9fNTFch6jP+kYgF2amir/3LvAlFHDISkcKNk3IiinreUWj+EWr+WixOn9eMSSPqO/6RiP4RiN6vpaJMgcC+y0hECjdOyoko6nlHoflHqPlLUsf6vGZMGlHf8Y9E9I9A9H4tFWUKBPZdRiJSuHFSTkRRzzsKzeFsl4w4rDNZfV4nM4ecqM/4RyLuO9GEQpHX/mXehCIOGYlI4cZJORFFvZQEFZ6aORFFeh1+89d/Y8VMQ8DEvEivw+9umoAFWyo9r92RiETUN4Zo1VhZfK5/bqo4hjmFuYKv3f/2n5hPy0vHmpL8gJs23dGo/hNzsfcTBRtP8RBR1PuhsQ3L3v0ak3PScM34IXj6o4OYU5jriVxLUivhcrnQ2GrFf/5sMuyOduw70YTl736NVbfkM3WFqI/UNpmxvLOvzinMhdXRDqVCgTmFufjVFXrEKBRwuVyYU5iLuUUK2J3tWHDdWNgc7TBZ7BiemoAh2njRCXZWqgYbZhWgvsWGZktH/Gl6kooTcuoTnJQTUdQzWRzYdugsth06i4LsVLx/4AzeP3BG8L0b770Q9736led1Y6uNk3KiPmI02/HpobP49NBZwfJ3HyrETRt2i67/0SNTZSfYKQmchFN48PIVIop6Jq/EFbnEBv9y/zQIIgodUzfTkQLWZ3+lfoyTciKKelqvxBW5xAb/cv80CCIKHW0305EC1md/pX6Mk/JOZWVluOiii5CcnIyMjAzMnDkThw8f9nnP5ZdfDoVC4fPz4IMPhqnFRBQsWrXSc6OYVGJDoV6HfSeaPK+L9DqkJfJrbqK+kqKJE01HKuxMRxLrv+yv1N9xUt5px44dmDdvHr744gt8/PHHsNvtuOaaa9Da2urzvvvvvx+nTp3y/KxduzZMLSai7qptMuPgKRO+/K4Bh06ZUNtkBgAMS0vwJDpsqjiG+4pyMVUgfWVOYS42VRzzvF5VbOD15ER9wNhmw9G6FjS0WATTkabqdXjypglwAXjypgmC/Zf9lfo7fo/T6aOPPvJ5/corryAjIwN79uzBtGnTPMsTEhIwdOjQvm4eEfXS9w2tWFRe5fPYbXes4QhdIkboErGmJB/NVgfiYmNwvSETszvTHdRxsUhQxSItMQ6vzPkJtGol0hJVHOCJ+kBtkxkLtlRi15F6AB154s/eWYDFN4xHs9kObUIc9n3fiJnP7UabzYkEVSyW3jgei28cD5PZwf5KEYOTchFGoxEAMGjQIJ/lr7/+Ol577TUMHToUN910E5YuXYqEBOYUE/VntU3mgAk5AFRUN2BxeRXW3joJWakaDEtLgLHNhvlv7vNMALxNy0vHhlkFTGYg6iPGNpvPhBwA6ltsuOPPX6JQr8Pcwlz8cdsRn77dZnOi9O0q9leKOJyUC2hvb8ejjz6KwsJCTJw40bP8zjvvxIgRI5CVlYXKykosWLAAhw8fxttvvy1Yj9VqhdV67ul/JpMp5G0niiZd7WNGsz1gQu5WUd0Ao9mOrFQNgI4BX2hCDgA7j9SjvsXGQZ6iRrjHMan+uLu6AQtnjBXt2+yvFGk4KRcwb948HDhwABUVFT7LH3jgAc+/DQYDMjMzceWVV+Lo0aMYPXp0QD1lZWVYtmxZyNtLFK262sfkYtSaLefKTZauv5dooAv3OCbXH+UiENlfKZLwRk8/8+fPx3vvvYd//vOfGD58uOR7L774YgBAdXW1YHlpaSmMRqPn58SJE0FvL1E062ofk4tRS1afK9equ/5eooEu3OOYXH+Ui0Bkf6VIwjPlnVwuFx566CGUl5dj+/btyM3NlV1n//79AIDMzEzB8vj4eMTHx3e7LTU1NaivF/66rjsOHjzY6zqI+rOu9jF3jFqFwNfcRXodUjon7cY2G5QxCkzNSxe9pjw9iV+FU/To6TgWLOlJKkzLS8dOgf7oHYEodAkL+ytFGk7KO82bNw9vvPEG/v73vyM5ORmnT58GAKSkpECj0eDo0aN44403cP3110On06GyshKPPfYYpk2bhvz8/KC1o6amBmPHjoPZ3Ba0Ou1WW9DqIopEWakarCw2YHF5lc/E3J2+kpWq8SQ87Pm+EetnFaDd5fIZ6KflpWNNST6vTyXqQykJKqwuycfCLZU+E/MivQ6zC3OxYEslVpfkQwEE9O0VMyeyv1JE4aS80wsvvACg4wFB3jZv3ozZs2dDpVLhk08+wTPPPIPW1lZkZ2ejpKQES5YsCWo76uvrYTa34eK5T0KbObJXdZ2q+hwH3vkzHA4+VphohC4Ra2+dBKPZjmaLHcnqOKRo4pCVqglIeHj4zX2YW5SLuYUd35jlDEpARnI8B3iiMMhK1WDDrALUt9g8fVejikWzxY4X7r4ATmc75hTmYm7RKFjsTsQrY7DvRBOeeu8b/P62Sey3FDE4Ke/kcrkky7Ozs7Fjx44+ag2gzRyJQTljelWH6dTx4DSGaIDIStV4Ula8+Sc8tNmceHbbuXtFPn38Mg7sRGGUkqAS6IMaHK1rwZX/KT42M32FIglv9CSiqMfEFaLIxL5LAwkn5UQU9Zi4QhSZ2HdpIOGknIiinjvhQQgTHIj6L/ZdGkg4KSeiqGVss+FoXQu+q2/FkhvGo+wWAxJU53KPmbhC1D+x79JAxBs9iSgquSMQvW/wnJaXjg8engqT2YbE+DikJwndXEZE4cS+SwMVz5QTUdTxj0B023mkHr/7+wGM0CVidEYSB3WifoZ9lwYyTsqJKOr4RyB623mkHvUtfOAWUX/EvksDGSflRBR1GKNGFJnYd2kg46SciKIOY9SIIhP7Lg1knJQTUdRhjBpRZGLfpYGMk3IiijopCSqsLskPGNwZo0bUv7Hv0kDGSEQiikpZqRpsmFWA+hYbmi12JKsZo0YUCdh3aaDipJyIolZKAgdyokjEvksDES9fISIiIiIKM07KiYiIiIjCjJNyIiIiIqIw4zXlfcjlcgEATCaT6HtaWloAAMaT36Hd4ezV9lrqfujY3unjiI+P7xd19cc2BbMutqnrmk9/31FnS4tknwCA5ORkKBQK2Tq70seIKBD7GFFodaWPKVzuHkYhd/LkSWRnZ4e7GUQRx2g0QqvVyr6PfYyoZ9jHiEKrK32Mk/I+1N7ejtra2i6fkYgEJpMJ2dnZOHHiRJcO6AMFP3fffu6u9pmu9LFo/b/rCf6uumYg/J7Yx8KDv6uuGQi/p670MV6+0odiYmIwfPjwcDcjJLRabcR2lN7g5+5futPH+utn6I/4u+qaaPg9sY+FBn9XXTPQf0+80ZOIiIiIKMw4KSciIiIiCjNOyqlX4uPj8eSTT/Y6iSPS8HNH7uceCJ+hr/B31TX8Pfni76Pr+Lvqmmj5PfFGTyIiIiKiMOOZciIiIiKiMOOknIiIiIgozDgpJyIiIiIKM07KiYiIiIjCjJPyPuRyuWAymcB7a4lCg32MKLTYx4hCh5PyPtTc3IyUlBQ0NzeHuylEAxL7GFFosY8RhQ4n5UREREREYcZJORERERFRmHFSTkREREQUZpyUExERERGFGSflncrKynDRRRchOTkZGRkZmDlzJg4fPuzznssvvxwKhcLn58EHHwxTi4mIiIhooFCGuwH9xY4dOzBv3jxcdNFFcDgcWLRoEa655hp88803SExM9Lzv/vvvx/Llyz2vExISwtFcoj5nbLOhvsUGk8UOrSYO6YkqpCSoerROT+oiIqL+S+q4PhCP+aH4TJyUd/roo498Xr/yyivIyMjAnj17MG3aNM/yhIQEDB06tK+bRxRWtU1mLNhSiV1H6j3LpuWlY3VJPrJSNV1e5+pxGVh643gs3nqgW3UREVH/JTZGrCnJhwvo9vjR3/VkTOwKXr4iwmg0AgAGDRrks/z1119Heno6Jk6ciNLSUrS1tYWjeUR9xthmCzj4AMDOI/VYuKUSxjZbl9cZk6lFaXlVt+oiIqL+S2qM2P7tWSz4W/fGj/6uJ2NiV/FMuYD29nY8+uijKCwsxMSJEz3L77zzTowYMQJZWVmorKzEggULcPjwYbz99tuC9VitVlitVs9rk8kU8rYTBVt9iy3g4OO280g96ltsAV/Zia1TkJ2KZ7dVd6suKexjRKHFPkZypMaIjOR47Kru3vjR3/VkTOwqTsoFzJs3DwcOHEBFRYXP8gceeMDzb4PBgMzMTFx55ZU4evQoRo8eHVBPWVkZli1bFvL2EoWSyWKXLG8WKBdbx+po73ZdUtjHiEKLfYzkSI0RwT7m9wc9GRO7ipev+Jk/fz7ee+89/POf/8Tw4cMl33vxxRcDAKqrhc/8lZaWwmg0en5OnDgR9PYShZpWHSdZnixQLrZOvFL6kCNUlxT2MaLQYh8jOVJjRLCP+f1BT8bEruKkvJPL5cL8+fNRXl6Obdu2ITc3V3ad/fv3AwAyMzMFy+Pj46HVan1+iCJNepIK0/LSBcum5aUjPSnwazqxdfadaEKRXtetuqSwjxGFFvsYyZEaI+qard0eP/q7noyJXcVJead58+bhtddewxtvvIHk5GScPn0ap0+fhtlsBgAcPXoUTz31FPbs2YPjx4/jnXfewT333INp06YhPz8/zK0nCp2UBBVWl+QHHITcd9YLXTsnts7hUyasKjZ0qy4iIuq/pMaIK84b3O3xo7/ryZjYVQqXy+XqbQMHAoVCIbh88+bNmD17Nk6cOIG7774bBw4cQGtrK7Kzs1FcXIwlS5Z0+cyByWRCSkoKjEYjzzZQxHFnsjZb7EhWxyE9ST6T9YzJgsZWG0wWB7QaJdISVBiiVfeorq5gHyMKLfYxEiN1XA/VMT+cxMa33uCNnp3k/jbJzs7Gjh07+qg1RP1PSkL3DqJyOa6RfkAmIqJzpMaI7o4f/R1zyokoYoQyx5WIiChcQjm+cVJOREHXlRxXIiKiSBPK8Y2TciIKulDmuBIREYULc8qJKKKEMseViIgoXJhTTkQRJZQ5rkREROHCnHIiiiihzHElIiIKF+aUDxDMd6WBSCqrta+zadnHiEKLfYzEuI/3JosdWk0c0hPFj/fdeW9/FYrxjTnlRNRjNQ2tKC2vwu7qBs+yIr0Oq4oNyNElDrhsWiIiCtSd3O5QZXz3tVCMb7x8hYh65IzJEjAhB4CK6gYsKq/CGZMlTC0jIqK+0p3cbj7DQhon5UTUI42ttoAJuVtFdQMaW6P74EpEFA26k9vNZ1hI46SciHrEZHH0qpyIiCJfd3K7+QwLaZyUE1GPaNXSt6TIlRMRUeTrTm43n2EhjZNyIuqRtEQVivQ6wbIivQ5pibzBk4hooOtObjefYSGNkYh9iFFS1Nek4gq762RjG5otDpjMdqRo4pCkVkLR7sKC8ipUiKSv9DX2MaLQYh/r/4J53PdX22SG0Wz3jANaTRyyUjWobTJj4ZZK7PRLVFlTko/MVA1+aGyDyWv8cAF44L++wolGc8B7oxm/XyYaoOTiCrvj+4ZWLBKoa2WxAU9cm4cFM8aixeJEkjoWrVYHv4IjIgqDYB73/UmNAyN0idgwq0Awt1tsvf++72K0WW2Ijwv9MywiBc+U9yGeYaC+csZkweN/3S+YjlKk12Hd7ZO7fObkZGMbFmypFK1rxcyJuPz3O3q1jWBhHyMKLfax/iuYx31/tU1m/PZv/xate+2tkwQzxn9obMMTEuPHmpJ8DEtL6FGbBiKe0CIagIIZV9hscUjWZba393obRETUO6GMqTWa7ZJ1G83CqSkmmfGDKV2+OCknGoCCGVdoEjnYujVLHIyJiKhvhDKmVnYcEIky7Ol60YqTcqIBKJhxhVqNTISVSDkjEYmI+k4oY2plxwGRKMOerhetOCknGoCCGVeYrFZK1qWJCzyMMBKRiKhvhTKmNkUTJ1l3isTJGan1ePLGFyflRAPQEK0aq4oNAQdD91343bnZZ3haAlaK1LWy2ICNu77r9TaIiKh3gnnc95eVqpEcB4Ru8gSAYTLjB2/y9MX0lT7Eu9YpVIxtNtS32GCy2KHVxCE9sSNeyp0p646oSunMlAXE82aF8siHpyV4ljeb7UjWxCG5c7lYPeHAPkYUWuxj/Z9/TrlWHQeL3Qmj2Xd86AmxcUCIe1yCwg5VjAotNidMnW3wX09sDIs2/N6AKMLVNpmxYEsldvk9tGHFzIlY/t43+ORgnc/yp0vyYXG2i+bNrv7wID48cCZg+cZd3+G/vqjxLL96XAaW3jgei7ceCNj26pL8sE3MiYii2RCt2nNWXGx86MkxujsZ6O7twtWOp2bmY6FEvnkw2xjpeKa8D/EMAwWbsc2G+W/u8zmYuRXpdZick4Znt1X7LP/wkalY8f43ormxcwpzcd+rXwUs988jnz9dj301jYL1TMtLx4ZZBX1+pqOrfaympgb19YG/s55IT09HTk5OUOoi6u84jkUOqfGhu8fo7mSge293128vD5iQe6+3uiQfpW9XBaWNAwHPlBNFsPoWm+DBDOjIgJ1TmBuw3AVI5sYumDFWcLl/HnlBdmrAhN9t55F61LfY+uXBtKamBmPHjoPZ3BaU+jSaBBw6dJATcyLqV6TGh+4eo7uSge6elHtvt8XmlFyv2eIIWhsHAk7KiSKYSSbj1eoIfLCPWK64W4vFKbjcfz2hun3e30/zZ+vr62E2t+HiuU9CmzmyV3WZTh3Hl5uWob6+npNyIupX5MaH7hyju5OB7r3dnj7nwlPeT8eRUIn4SbnD4cD27dtx9OhR3HnnnUhOTkZtbS20Wi2SkpLC3TyikNLKZLzGKwMDlsRyxd2S1LGCy/3XE6rb5/39PH9WmzkSg3LGhLsZREQhITc+dOcY3Z0MdO/t9vQ5F57yfj6OBFtERyJ+//33MBgMuPnmmzFv3jycPXsWALBmzRr85je/CXPriEIvPUmFaXnpgmVFeh32nWgKWK7oLBNbp85kFVzun0e+70STaD3T8tKRnhQ9XzkSEfU3UuNDd4/R3clA995ukipWcr1ktTJobRwIInpS/sgjj+DCCy9EY2MjNJpzd+gWFxfj008/DWPLiPpGSoIKq0vyAw5q0/LSsarYgMOnTAHLdZo4ydzYLXtOCC7fVHHMZ/nhUyasKjYIbntNSX5UXQdIRNTfSI0P3T1GdycD3Xu7i8orsWKm+HgzPC0haG0cCCI6fUWn0+Gzzz7DmDFjkJycjH//+98YNWoUjh8/jvHjx6Otres3cpWVleHtt9/GoUOHoNFocOmll2LNmjUYM+bc19sWiwW//vWv8Ze//AVWqxXXXnstnn/+eQwZMqRL2+Bd69RbcnnkXc0cB8TzZj3LO7PN3cv9s2/TElQYolV72uR+f3rSuXzZvs6e7Uof27t3Ly644AJcvXhzry9f+bHmMD5eOQd79uzB+eef36u6iCIBx7G+Ecxjp9ixu9d1qZVISzxXl9B443C0ox12xHXmlIvlm/encSScIvqa8vb2djidgTelnTx5EsnJyd2qa8eOHZg3bx4uuugiOBwOLFq0CNdccw2++eYbJCZ25G8+9thjeP/99/HWW28hJSUF8+fPxy233ILdu3cH5fMQSRHKcr16XAaW3Dgei8urUOF1h/vPLhyGX12RJ5pFHgNI5sZ2ZdveObJCB0hmzxIRdV8wj53BPg57Z6B7+76hVXC8WV1sgBMq2fEmJUF4oh1t40hEX75yzTXX4JlnnvG8VigUaGlpwZNPPonrr7++W3V99NFHmD17NiZMmIBJkybhlVdeQU1NDfbs2QMAMBqN2LhxI/7zP/8T06dPxwUXXIDNmzfjs88+wxdffBHMj0UUwNhmCzgwAcCYTC0W+U3IAeAX00YHHCCBjgiqJeVVqKiuFyxbXF6F2iZzl7a980g9Fm6phLHN1uX2Sq1DRBTtgnns7Kvj8MnGNtHxptnmEC1bXF6Fk43iVzRE4zgS0ZPydevWYffu3Rg/fjwsFgvuvPNOjBw5Ej/88APWrFnTq7qNRiMAYNCgQQCAPXv2wG6346qrrvK8Z+zYscjJycHnn38uWIfVaoXJZPL5IeoJsbzZguxUwQxYh9Mlmg27q7oBGSJfXVZUN8DoF1HVlazbrrZXap2eYB8jCi32sb4VzGNnXx2Hmy0O0fHGBYVsTrmYvmp/fxLRk/Lhw4fj3//+NxYvXozHHnsMBQUFWL16Nfbt24eMjIwe19ve3o5HH30UhYWFmDhxIgDg9OnTUKlUSE1N9XnvkCFDcPr0acF6ysrKkJKS4vnJzs7ucZsouonlzYplhctlw0pljPvnwvYk6zaY+bhS2MeIQot9rG8FN1u8b47DUuNNb3LI+6r9/UlEX1MOAEqlEnfddRfuuuuuoNU5b948HDhwABUVFb2qp7S0FI8//rjntclk4gGNekQsb1YsK1wuG1YqY9w/F7YnWbfBzMeVwj5GFFrsY30ruNnifXMclhpvepND3lft708i+kx5WVkZNm3aFLB806ZNPb58Zf78+Xjvvffwz3/+E8OHD/csHzp0KGw2G5qamnzef+bMGQwdOlSwrvj4eGi1Wp8fop4Qy5sVywpXxipEs2Gn6nWoaw7MIgc6br5J8TuI9iTrNpj5uFLYx4hCi32sbwXz2NlXx+FktVJ0vFHAJZtTLqav2t+fRPSk/MUXX8TYsWMDlk+YMAF/+tOfulWXy+XC/PnzUV5ejm3btiE3N9en/IILLkBcXJxP/vnhw4dRU1ODKVOm9OwDEHWRWN7s4VMmwczxl3ceFc0iX1FsQNFonWhurP8d7T3Jug1mPm4kOHjwIPbu3dvrn5qamnB/FCIKo2AeO/vqODw8LUF0vElWKSWfi+Edixiu9vcnEZ1TrlarcfDgwYAJ9Hfffee5+bOrfvWrX+GNN97A3//+d59s8pSUFM+DiX75y1/igw8+wCuvvAKtVouHHnoIAPDZZ591aRvMdyV/3c1f7UoeuVYgc9x/OQD80NgGk1dOuVatxLC0BNE2SeXIyn2+7qzTG32dU/5D1WeoePa3AIJzGNVoEnDo0EHk5OQEpT6iYOM41jfkjp3dGTv860pSK9FqdcBoDly3N5nmQuNNrKMdRocdiaqOnHKhsUju8wQzZ72/i+hryrOzs7F79+6ASfnu3buRlZXVrbpeeOEFAMDll1/us3zz5s2YPXs2AOAPf/gDYmJiUFJS4vPwIKKe6G7+ak1DK0pFsl6Xv/s1Pj101rNcLqdcExuDhW9XBWx7xcyJWP7eN/jkYJ1gm7o7oRbLnh0o7G3NAFyYfOcCDM4N/NauO0ynjuPLTctQX1/PSTlRlJM6dnZ37PCuq7bJjN+89e+AddeU5MPubBccY1YVG5Aj8PwKb2I55StnGmA0O/DU+4d9yrzbK/Z51pTkwwVEVU55RE/K77//fjz66KOw2+2YPn06AODTTz/FE088gV//+tfdqqsrXxio1Wo899xzeO6553rUXiI3ufzVDbMKfA7IZ0yWgIMlcC7rdXJOms+kXCqnfHF5FZbfPFFw24s66/KelIu1ic5Jysjp9Vl3IiI53R07urru9m/P4oPKWsExY1F5FdbdPln07LRUTvnirVWYP10fUOZu79O3TZJp0ynsqu7+Z41UET0p/+1vf4uGhgb86le/gs3WkVepVquxYMEClJaWhrl1ROK6kr/qfbBpbLVJZr3OKfT9tkgqp7yiukE0ElGoLrE2ERFR3+ru2NHVdTOS47FLYsxobLWJTsqlcsorqhuwYIbwt4g7j9SjsVWuTT37rJEqoiflCoUCa9aswdKlS3Hw4EFoNBrk5eUhPj4+3E0jktTd/FWTxAMWgMDccbmccqnsWLEJ+0DMhCUiiiS9ye6WWlfq2RUd64qPQXLjTYvF2aN65do0EMekiJ6UuyUlJeGiiy4KdzOIuqy7+ataidgoIDB3XC6nXCo7VizDfCBmwhIRRZLeZHdLrSv17IqOdcXHILnxJkkd26N65do0EMekiI5EbG1txdKlS3HppZdCr9dj1KhRPj9E/VV381fTElWSWa/7TjT5LJPKKS/S60QPdkJ1ibWJiIj6Vm+yu6XWrWu2YqrEmJGWKF6vVE55kV6HVqvwmfJpeelIS5RuE3PKI8gvfvELbNy4EVOnTsX8+fPxyCOP+PwQ9VfdzV8dolVjlUTW68Fao89yqZzylcUGJMXFCm57VbEBh0+ZutQmIiLqW73J7pZa94rzBouOGauKDZIRhFI55SuLDVCgHYV+Ze72DtGqJdvEnPIIkpqaivfffx+FhYXhbkqXMN81Oknlr7pzXd1Z4e7sVrF13Dnl7rzZlC7mlLvf750NK1ZXJGfC9nVO+fEv/4EvNy1D0aPPYdi4gl7V9WPNYXy8cg727NmD888/v1d1EYUKx7HQ8D7mp2jikBivRIvFIZpD3ptnQLifUeF+3kVy5zMqvMv8n1/hJvasDEB4PItxtKPeYkeKRgWbsx2tVodge6XGnb5+3kU4RfQ15WlpaRg0aFC4m0EkSix/dW1JPqzOdtEc8bUfHcL7Vad91hHKEL+lIAuPXHWeaD0jRLJlhTLPrxw7GL+7aQKWbD0QNZmw/dHBgwd7XYfVag3aDe/p6enMTScKIe9xIkEVi/WzCrB59zHRXG+g58+AEM0TLzYgBsBCiZxysXXLig1wAaIZ5/nZaV3+/EKfd6A/78JbRE/Kn3rqKfzud7/Dq6++ioQE8Ue1EoWDVCbs8R/bsGHbEdEc8TmFuT6TcrEM8dmFuZJ55GtvnRQwmRbLPB+XlSJY10DOhO1PzMYGAArcfffdva9MoQCC9CUonzJKFDr+48TcotyACTkQnONwbZNZdLxYUl6F6w2Zojnlq0vyRdf9wWjGhm3VPco4703u+kAU0ZPydevW4ejRoxgyZAhGjhyJuDjfO3H37t0bppYRSWfCJsbHdjvXVShDXBkbI1mP0WwPmJSLZZ4XZKfi2W3VgnUN1EzY/iRYTwc9VfU5DrzzZz5llCgC+I8ToTwOG8120fFiV3UDZgs8owLoGEukssgT45WS45BUxnlvctcHooielM+cOTPcTSASJZUJK5XbKlXun9sqlTcOCOe4iuXCRmMmbH/U26eDmk4dD0o9RBR6/uNEKI/DcnniUtuWWlduPJPMOO9F7vpAFNGT8ieffDLcTSASJZUJK5XbKlXuH2UolTcOCOe4iuXCRmMmLBFROPmPE6E8DsvliUttW2pdufFMMuO8F7nrA1FERyICQFNTE15++WWUlpbixx9/BNBx2coPP/wQ5pZRtJPKhG21OiVzXetMVsHl/hniDme7ZD0pAgdSsczzfSeaROsaqJmwRETh5D9O7DvRFBAf6Nbb43CKJk70GD9Vr0OdySJYVqTXSWaRt1odkuOQVMZ5b3LXB6KInpRXVlbivPPOw5o1a/D73/8eTU1NAIC3334bpaWl4W0cRT2pTNjcQdK5ruV7TwasI5Qh/sruY5L1CCWmiGWeH6w1YmWxIaoyYYmIwsl/nNhUcQxzCnMDjs/BOA5npWpEx4sVxQYU6dNFc8qlssiHpWhEn6Mhl3Hem9z1gSiiL195/PHHMXv2bKxduxbJycme5ddffz3uvPPOMLaMopFQtnhWqgZP3zZJNH91dUm+YI74ymIDHrt6TEAu64piA359TWBda0ryPbmzWoFsWX85ukSsu33yuXaplUhL7Khrw6yCqMmEJSIKF+8xY+mN46GKjYHRbEOSOg7rbp+MFq+xIVjH4RG6RM944a7be7zwHhdSNEokq+Ngtjmxr6YROk2cZ8zyfyaG/7reY4qcrFQNx51OET0p/9e//oUXX3wxYPmwYcNw+vRpgTWIQkMsZ1UoW9ydv6oAUPp2lWQ2q9w2rh6XgaU3jsfiHmSLD9GqBQ+Y0ZQJS0QUDnLZ3AAwJATPZqptMmOhxLjjPS54tzE9SYXXf3EJlv+9UjTHXGxM6QqOOx0i+vKV+Ph4mEymgOXffvstBg8eHIYWUTSSylldVF6FsZnagOULt1Ri+7dnRbNZjW22Lm1jTKYWpeVVXa6HiIjCSy6bO1TH7e5s1/+9a0rysfy9r0WzyM+IXI9O3RPRk/Kf/vSnWL58Oez2jsgchUKBmpoaLFiwACUlJWFuHUULqZzViuoGFGSnBizfeaQeGcnCT1x0Z7N2ZRsF2ami+bBC9RARUXh1JZs73Nv1f2+GNl42i5x6L6In5evWrUNLSwsyMjJgNptx2WWXQa/XIzk5GStXrgx38yhKyOWsimW/SmXC+mezim2D2eJERJElXNnc3dmu/3t7k0VOXRfR15SnpKTg448/RkVFBSorK9HS0oLzzz8fV111VbibRlFELmdVLPtVKhPWP5tVbBvMFiciiizhyubuznb939ubLHLqugHxWywqKkJRUVG4m0FRyp2zulPga0GhbHGg48aauubALHJ3mX82q9g23NniFQJfK0ZjxiuFxsGDB4NST3p6OnJycoJSF1GkkhozQnnc7s52/d9bZ7KKjjVyWeTUdRE3KV+/fj0eeOABqNVqrF+/XvK9Dz/8cB+1iqKZO2d14ZZKn4OdO33lqfe+8Xm/O3/V/W//dYSyWcW2cfiUCauKDViy9UCX6iHqDrOxAYACd999d1Dq02gScOjQQU7MKapJjRmhPG53Z7v+712wpRKv/+ISPPXe1z4T865kkVPXRdyk/A9/+APuuusuqNVq/OEPfxB9n0Kh4KSc+oxUzqpYtjgA0Qzzk41tnizYFE0ckjqzYFfdYhDMiGXGK4WCva0ZgAuT71yAwblje1WX6dRxfLlpGerr6zkpp6gXzGxu77zzFE0cEuOVaLE4fJ6Z4a43K1WDslsMnudapHSOI5mdMYy1TWYYzXZPWdktBtgc7TCa7UiOVfjklHuPTd1po3+bulLeU6GqN1QiblJ+7NgxwX8ThZtQzqpYFu2akny4gICyey7JwX1TR2FReVVAFuzKYgOWv/s1Pj10NmD5CF1ivz7QUGRLysjBoJwx4W4G0YASjGxu7zEmQRWL9bMKsHn3MZ/xwzuH/PuGVsHxpazYgHZAdOyZnJPWse6WwJxy9xjUlTYKtakrme29/d0Es95Qitj0FbvdjtGjRwftWkeiYJPKhN3+7Vks+Ftg2dyi3ICDItARObW4vArjslIEl59sbAvNhyAion7Jf4yZW5QbMCEHzuWQ/9DYJjq+/GA0S449JyXWlRqD5LLRz5gsIclsD1cWfG9F7KQ8Li4OFgvD6qn/ksqEzUiOx67qwDKzvV0yC1Yo87yiugHNjKMiIooq/mOM3HMrTBaHaHlivFJy7GmWWFdqDJLLRm9sDU1me7iy4HsrYiflADBv3jysWbMGDgcnJNT/SGXCiuWLm8w9yzxnHjkRUXTxH2PknlshNb7I5pDLjE1iY5BcNrpcvnlPx7ZwZcH3VsRdU+7tX//6Fz799FP87//+LwwGAxITfa9pevvtt8PUMiLpTFixfHGtpmeZ58wjJyKKLv5jjNxzK6TGF9kccpmxSWwMkstGl8s37+nYFq4s+N6K6DPlqampKCkpwbXXXousrCykpKT4/BCFkzvnVUhds1WwTBMXgyK9TnAdsczzIr0OyXxwAxFRVPEfY/adaEKhyPgxLS8dWrVSdHxptTokx55kiXWlxiCpcXBaXjrSEqXLe5rZLrfd/voMj4ielG/evFnyhyic3Dmv/geGaXnpuOK8wYJlmyqOYWWxIeDg577D/WCtUXB5VyKpiIho4PAfYzZVHMOcwtyA8cOd+DUsLUF0fBmWopEce4ZLrCs1BkmNg2tK8jFEq5Ys72k6jdx2+2taWcSfXnM4HNi+fTuOHj2KO++8E8nJyaitrYVWq0VSUlKX69m5cyeefvpp7NmzB6dOnUJ5eTlmzpzpKZ89ezZeffVVn3WuvfZafPTRR8H6KBQhzpgsgtniQrJSNaJZ5AAE82KHpSX4ZMF655Evu3kifnOtA81mO5K9lhMRUXB0J9s6XPna3uVLbxwPVWwMjGYbktRxWHf7ZLRYHIL55yN0iQFZ4wmqWDSZbUiPjxMde/zXddfdlTFILpM9mJnt3dlufxTRk/Lvv/8e1113HWpqamC1WnH11VcjOTkZa9asgdVqxZ/+9Kcu19Xa2opJkyZh7ty5uOWWWwTfc9111/mcgY+Pj+/1Z6DIUtPQilKBHNdVxQbkCOS0iuWkri3Jh9XZHhAxVTw5E49ePUY0K/bV3cew6bPvA5ZLZcQSEVHXdCfbOlz52l3Z7hCtcN1CY1ihXofHrxwNq1qFxTI55D09CSSXyR6MzPa+rDdUIvrylUceeQQXXnghGhsbodGc6wDFxcX49NNPu1XXjBkzsGLFChQXF4u+Jz4+HkOHDvX8pKWl9bjtFHnOmCwBBzOgIw5qUXkVzph8IzqlclKP/yic+TqnKPDBQe5tLC6vwuzCXMHltU3m3n48IqKo1p1s61DlYIcy11tsDNtd3YAMbQIWb+1+DjkFV0SfKd+1axc+++wzqFS+fwWNHDkSP/zwQ9C3t337dmRkZCAtLQ3Tp0/HihUroNMJ3/gAAFarFVar1fPaZDIFvU3UdxpbbZI5rY2tNp/LWKRyUhPjYwXrUsbGSG6j1RYYW1VR3QCj2d5vn1AWSuxj0ammpgb19cJ9q7vS09ORk5MTlLoGomjqY13Jtnafde3Oe4PZhq7keottV2oMa7E5e5RDTsEV0ZPy9vZ2OJ2Bk5STJ08iOTk5qNu67rrrcMsttyA3NxdHjx7FokWLMGPGDHz++eeIjRWOEiorK8OyZcuC2g4KH7k8Vf9yqZxUsUzYZrksWJHy/pq5GmrsY9GnpqYGY8eOg9kcnDN3Gk0CDh06yIm5iGjqY93Jtg5VDnYoc72l1u1pDjkFV0RPyq+55ho888wz+POf/wwAUCgUaGlpwZNPPonrr78+qNu64447PP82GAzIz8/H6NGjsX37dlx55ZWC65SWluLxxx/3vDaZTMjOzg5qu6jvyOWp+pdL5aSKZcImy2XBipT318zVUGMfiz719fUwm9tw8dwnoc0c2au6TKeO48tNy1BfX89JuYho6mPdybYOVQ52KHO9pdbtaQ45BVdET8rXrVuHa6+9FuPHj4fFYsGdd96JI0eOID09HW+++WZItz1q1Cikp6ejurpadFIeHx/Pm0EHkLREFYr0OlQIfMVXpNchLdH3K0N3TupOga8aW61OwbocznbJbSSqAifzRXodUmQOqAMV+1j00maOxKCcMeFuxoAXTX1M6pjtn23dnfcGsw3uXO+ebFdqDEtSxUqOPXwWRt+I6Bs9hw8fjn//+99YtGgRHnvsMRQUFGD16tXYt28fMjIyQrrtkydPoqGhAZmZmSHdDvUfQ7RqrBLJaV1VbAiIRZTKSc0dJJz5urniO8ks2Fd3HxNcHo3XkxMRBVN3sq1DlYMdylxvsTGsUK9DnakNK2Z2P4ecgivi//RRKpW4++67e11PS0sLqqurPa+PHTuG/fv3Y9CgQRg0aBCWLVuGkpISDB06FEePHsUTTzwBvV6Pa6+9ttfbpsiRo0vEmpJ8T7a4VhMHbWe2eG2TGUaz3ZP9qtXEIStVg9Ul+TCa7Z6c1BRNHIZ0TqI9ma9+ueNiy+dOHYVbL8oJ2DYREfVed7Kte5uDLZZF7j1ueD/Dwmp3Yl9NI9I0cZ5nXHiPK5md48oPjW2Cz78AOsawtbdO8qk7QRULk9mGeJdLdOyhvhHxk/LDhw9jw4YNOHjwIABg3LhxmD9/PsaOHduter766itcccUVntfua+juvfdevPDCC6isrMSrr76KpqYmZGVl4ZprrsFTTz0VNV/rUQehjNfrJw7BghnjRLPF//DxYWzdf8pn+epiA9qBLtd15djB+N1NE7Bk64GgZ+ISEdE53cm27mkOttQzLGzOdsHnYSy9cQIW/K0SG+48H4v/HpgnvqbYAAcgOhaN0CXKb1cgp1zsORwUfBF9+cqWLVswceJE7NmzB5MmTcKkSZOwd+9eGAwGbNmypVt1XX755XC5XAE/r7zyCjQaDf7xj3+grq4ONpsNx48fx5///GcMGTIkRJ+M+iOxjNeSC7Ils8XnFo0KWH7SaO5WXeOyUrCovCrombhERNS35J5hIfY8jKfe+xrP3X0+lr/3tWC5yeaQHItONrb1aLtCz+Gg0IjoM+VPPPEESktLsXz5cp/lTz75JJ544gmUlJSEqWU0EIllvGZo4yXzXRfFBv7tmxiv7FZdBdmpeHZbdcByoHeZuERE1Ld68gwLoGM8cThdouUuKGSzxnu6Xf/ncFBoRPSZ8lOnTuGee+4JWH733Xfj1KlTAmsQ9ZxYxqtY5ribULa42Dpiy62OdultMEOWiCgi9OQZFm5Sz7KQe86FVBa53Hbl8tEpOCJ6Un755Zdj165dAcsrKiowderUMLSIBjKxjFexzHE3oWxxsXXElscrpbsqM2SJiCJDT55h4Sb1LAu551xIZZHLbVcuH52CI6In5T/96U+xYMECzJ8/H6+99hpee+01zJ8/HwsXLkRxcTHeeecdzw9Rb7kzXv3VmayCy4GOm2QczsCz3K1WR7fq2neiSXQbvcnEJSKivuXOIhfifoaFkCK9DspYhWi5Ai7JdZPVyh5v1/85HBQaET0p/9WvfoX6+no8//zzuOeee3DPPffg+eefx9mzZ/GrX/0KM2fOxMyZM1FcXBzuptIAIJbxumXPCcls8c0V3wUsH56i6VZdB2uNWFlsCHomLhER9S25Z1iIPQ/jdzdNwLzX9mLpjRMEy7UqpeRY5I7b7e52hZ7DQaER0d9HtLdLX2dL1BtCGbJCGa/eeeRC+a6/uXYsHrhML5gZu+72yWhstcFkcUCrViItUeV5OESzVxa6u67eZOISUejU1NSgvl74JrruSk9PR05OTlDqotA6Y7KcO4ZrlEhLUHVpAiuXce4eZ9xlWrUSdkc71t6aD3WswmeM8B9XxMYP93Y9GeedY5VWrfQ8O0NsTKK+EdGTciltbW1ISGDgPfWMUJbr1eMysPTG8VgskBX+1MyJWPbu19h26KxnuVR+uTv3dYhWHXDAE8pC916Hk3Ci/qWmpgZjx46D2dwWlPo0mgQcOnSQE/N+Tu5YLUcs41wsS3x1ST4mD05CTUMrFgjkia8uNsAJ6Zzy7xtaJcuFxiTqOxE9Kb/yyivxX//1Xxg2bJjP8i+//BI///nP8e2334apZRTJxDJkx2RqBXNcdx6px+LyKkzOSfOZlEvlly8qr8K62ycHHPzEstCl1iGi8Kqvr4fZ3IaL5z4JbebIXtVlOnUcX25ahvr6ek7K+7FQHaulMswXbqnE6pJ80e2eNJqxYVu1aE756pJ8yRzztbdO4oPowiyiJ+VqtRr5+fl4/vnn8bOf/Qzt7e1Yvnw5Vq1ahV/96lfhbh5FKLEMWams8IrqBswpzPVZJpdfLpT7KpaFLrUOEfUP2syRGJQzJtzNoD4QqmO1VIb5ziP1MJrtotsVe/6Fu03NFodkudFs56Q8zCJ6Uv7+++/jueeew9y5c/H3v/8dx48fx/fff4/33nsP11xzTbibRxFKLENWLivcv7wnua9yWbDMiiUiCr9QHaulMsyB3mWNy+WY83kX4RfRk3IAmDdvHk6ePIk1a9ZAqVRi+/btuPTSS8PdLIpgYhmyclnh/uU9yX2Vy4JlViwRUfiF6lgtlWEO9C5rXC7HnM+7CL+IjkRsbGxESUkJXnjhBbz44ou4/fbbcc011+D5558Pd9MogollyEplhRfpddh3oslnmVx+uVDuq1gWutQ6RETUt0J1rJbKMJ+Wl44UTZzodsWef+FuU7JaKVmeIjNpp9CL6En5xIkTcebMGezbtw/3338/XnvtNWzcuBFLly7FDTfcEO7mUYQSy5A9fMqEVSJZ4SuLDThYa/RZLpVfLpb7KpaFzqxYIqL+I1THaqkM8zUl+chKFX7Ghfv5F3I55VLlvJ48/CL6u/AHH3wQixcvRkzMub8tfvazn6GwsBBz5swJY8so0mWlarDqFoNg1qvY8mU3T8RvrnV4cmXdy6UyY4Xk6BKZFUtE1Ee8n0mRoolDYrwSLRaHzzMqhKILvZ9b4T7up3Q+t0Ku3hRNHNRxsTBZ7DCZfTPOs1I1ePq2ST7551p1HCx2J/bVNCJNExcwrmi7mFM+QqbNFF4RPSlfunSp4PLhw4fj448/7uPW0EAilOUqlTvuznjtSj1S73djViwRUeh5Z4InqGKxflYBNu8+5nPMdmeE+09cxfLE15TkwwWI1iu2nSK9DmXFBsTGxgTUW6TXYXZhricWUWjdNcUGOCCdUw50nHTiJLx/isjLV9auXQuz2ex5vXv3blitVs/r5uZmRiJSj51sbBPMcpXKHV9cXoWTjb4PDqltMku+v7bJDCIiCg//TPC5RbkBk13gXEa4sc0muq73e7d/exYL/iZer9h2KqobUFFd77Oud9nm3cewRmBC7i432RySY84PjcF5uBWFTkROyktLS9Hc3Ox5PWPGDPzwww+e121tbXjxxRfD0TQaAMSyXOVyx5v9IrCk8mTdmbBERBQe/pngBdmposfsnUfqUd9yblIulSeekRyPXdXi9UptJ0Or9lnX2+7qBslxyAWF5JjDSN3+LyIn5S6XS/I1UW+I5cDKZsD6ZbxK5ckKvZ+IiPqOfya43LMovI/ZUnni/vXIve5OG6TGIeaQR76InJQThZJYDqxsBqxfxqtUnqzQ+4mIqO/4Z4LLPYvC+5gtlSfuX4/c6+60QWocYg555OOknMiPWJarXO54st/DIqTyZJkJS0QUXv6Z4PtONKFQ5Jg9LS8d6UnnElik8sTrmq2S9Uptp85kwVSRegv1OtSZrKLrKuCSHHP48Ln+L2In5S+//DLWr1+P9evXw+Fw4JVXXvG8fvnll8PdPIpgYlmuUrnj7gxYb1mp0pmxvPudiCh8/DPBN1Ucw5zC3IBjtjtRxTsWUSpP/IrzBkvWK7adIr0ORfqObfnXW6TXYU5hLhZsqRRdV6tSSo45wySieKl/iMg/m3JycvDSSy95Xg8dOhT//d//HfAeij5nTBafbFd37qt3Xqx/7qzQOiN0iZ6sV7Hc8WazHcleGbC1TWYYzXaYzB0ZtFpNHDNhiYj6saxUDTbMKkB9iw3NnePDutsno6Xz2J8Yr4QqNgZ1zRa02Z0+Y4dQnrh7zAHgU5aWqPTJD0/pzBpvsztganNAl6iC3elCfavNU+adYa5Vx8Fqd+Lley70ySn3Hofck+41JfkweY1d3hnm1L9F5KT8+PHj4W4C9UM1Da0oFclnXfvRIbxfddqzfFpeOtaW5MPmbBdd56n3vsEnB+s8y68el4GlN47H4q0HfO66v9EwFL+9bqxkNiwn4URE/VNKQuDDgYZoxXPI3ZnlXc0pT09S4fVfXIIFWyoDxohVxQZoU+PwW5Fc8off3Ic2m9Oz3cmDk/B9Q6tgXe7xZlhaAoaF4PdEoRexl68QeTtjsgRMroFz+ay3nD/cZ/nOI/U4/mOb5DpjM7U+y8dkalFaXhUQg1V8/nDmkRMRDSBSOeQLt1TijMnS5ZzyNSX5WP7e14JjxKLyKhz/sU00l3xuUa7Pdn8QeY4Gx5uBgZNyGhAaW22S+awZ2viA5YnxsZLrFGSn+iwTy5aVyy9nHjkRUWSRyiHfeaQeja1dzymXGyMS44UTVXb7jUM7j9TDJPIcDXddHG8iGyflNCDIPRRBKNtVLne8q9my3c0vJyKi/k0qh7yjXHzM8R8r5MYIqXL/uvj8i4GNk3IaEOSinoSyXeVyx7uaLdvd/HIiIurfpHLIO8rFxxz/sUJujJAq96+Lz78Y2CJuUv7444+jtbUVALBz5044HHxsLAFpiSrJfNY6kzVgeavVKbnOvhNNPsv2nWjqUX4588iJiCKLVA75tLx0pCV2PadcboxotQqfKS/0G4em5aVDK/IcDXddHG8iW8RNyjds2ICWlhYAwBVXXIEff/wxKPXu3LkTN910E7KysqBQKLB161afcpfLhd/97nfIzMyERqPBVVddhSNHjgRl29R7Q7RqrJLIZy3fe9Jn+bS8dOQOSpBc5/Apk8/yw6dMWFVsCDgQl+89yTxyIqIBRCqHfE1JPoZo1V3OKV+wpRJLb5wgOEasKjZg5KAE0VzyTRXHfLY7TOQ5GhxvBoaIi0QcOXIk1q9fj2uuuQYulwuff/450tLSBN87bdq0Ltfb2tqKSZMmYe7cubjlllsCyteuXYv169fj1VdfRW5uLpYuXYprr70W33zzDdRqdY8/D0kTyxcXWp6jS8S62yefy4xVK5GW2JEZW3r9OMybnufJh01WKzGk8+DlnR2r9codf/KnE/D4NWM86yR1LvfOtE1WxyE9qaNNzCMnikwHDx4M6/rUt6SeW+Fd3mK146mZE2FztKPV6vA53gMdOeWrS/IDnk8x1GtscY8JULgCnn3hnR/uPa6kauKgVMag2eLA5tkXecafzM56vZ+j4T9uUWSLuEn5008/jQcffBBlZWVQKBQoLi4WfJ9CoYDTKX1zhbcZM2ZgxowZgmUulwvPPPMMlixZgptvvhkA8F//9V8YMmQItm7dijvuuKP7H4RkCWXAimWFe2fHuh/c4PZ9Q6tghnhZsQHtgGi++HP/PIK/fvVDwPIRusSATFug4wDNSThR5DAbGwAocPfddwelPrvVFpR6KHR6mj3uLvcm9myMVcUGxABYIFDmnT3ufm9O55jiHlfkcsjFxjR3OUWuiJuUz5w5EzNnzkRLSwu0Wi0OHz6MjIyMkG7z2LFjOH36NK666irPspSUFFx88cX4/PPPOSkPAbGMWHdWuH8klDvDdcOsAp8Jc22TWTTT9QejGRu2VYvmvT750wk+k3L3cvdXiEQU2extzQBcmHznAgzOHdvjek5VfY4D7/yZ9zj1c3LZ40/fNkmy3Ht8kXo2xqLyKsyfrhcscwGYW5SLZ7dVe9677vbJnpNJcjnkq0vyZct5xjxyRdyk3C0pKQn//Oc/kZubC6UytB/j9OmOJ0EOGTLEZ/mQIUM8ZUKsVius1nM3GJpMJtH3ki+xjNiC7FQ8u61acJ2dR+pR32Lz/RrSbBfNdE2MV0rmvTqcLsHlJouDT0vrJ9jHKBiSMnIwKGdMj9c3nToevMb0MwOpj/Ume9x/fJF7NsaCGcJ/5O2ubsDcwlyf9za22jyTcrkc8uYulFPkithJOQBcdtllcDqd2LJli+eavvHjx+Pmm29GbKx0BFFfKCsrw7Jly8LdjIgklhErlhXu5p/RKpXpKpsvLrIuc2D7D/YxotAaSH2sN9njgO+xvyfPxnALyB73qks2h5w55QNaxKWveKuursb48eNxzz334O2338bbb7+Nn//855gwYQKOHj0atO0MHToUAHDmzBmf5WfOnPGUCSktLYXRaPT8nDhxImhtGujEMmLFssLd/DNapTJdZfPFRdZlDmz/wT5GFFoDqY/1Jnsc8D329+TZGG4B2eNedcnmkDOnfECL6En5ww8/jFGjRuHEiRPYu3cv9u7di5qaGuTm5uLhhx8O2nZyc3MxdOhQfPrpp55lJpMJX375JaZMmSK6Xnx8PLRarc8PdY1YRqxYVjjQcTNOepLvDZgpmjjR97daHZJ5r8pYheByuYMx9R32MaLQGkh9rDfZ4/7ji9yzMVqtwmfS/bPHi/Q6pCWeq1cuhzy5C+UUuSJ6Ur5jxw6sXbsWgwYN8izT6XRYvXo1duzY0a26WlpasH//fuzfvx9Ax82d+/fvR01NDRQKBR599FGsWLEC77zzDqqqqnDPPfcgKysLM2fODOInIjexjFixrHB3hqt/KkpWqkY003VYinjZymIDXt55VHA5b/IkIoo8vcke9x9fpJ6NsarYgOEpGsEy7+xx93u9E8PkcsiHd6GcIldE/0kVHx+P5ubmgOUtLS1QqQIj66R89dVXuOKKKzyvH3/8cQDAvffei1deeQVPPPEEWltb8cADD6CpqQlFRUX46KOPmFEeQmIZsFmpGqy6xeDJaPXOcK1tMge83zvTtdlsR7JfpqtY2UNXnofZhaOYA0tENEBkpWoCnjWRpFai1erAvppGpGji8PRtk9DilSfunU3uTerZGAB8ynRJSsQrlZ7scV1yHNSdr7/8rgEpmjgkqmLRbLFCo1JKjllyYxpFroielN9444144IEHsHHjRvzkJz8BAHz55Zd48MEH8dOf/rRbdV1++eVwuQLTNtwUCgWWL1+O5cuX96rN1HVCGbA/vzgbv5g2OiAS6sqxg/G7myZgcXkVKryWT9XrsKLYgGXvfo1th856lrvPULggnlO+9qNDeL/qXLqOWFYtERFFDu9M8NomM37z1r8Fc8lHZyTJ1jVEqw54NoZQmXf2+HkZSfjzPRcKZpGvmGmAEmBOeZSK6MtX1q9fj9GjR2PKlClQq9VQq9UoLCyEXq/HH//4x3A3j3pBLAP2vqmjBDNax2WlYJHfhBwAdnVmt47PSvFZXlHdgN3VDVgikfd6y/nDfZa7s2qNbXxACBFRpJPLLQ/Wsf6kX/b4c3efj8VbhceeJVurYHO5RMcl/7r8y2ubzEFpM4VHRJ8pT01Nxd///ndUV1d7IhHHjRsHvV4f5pZRb4llwJrt7YLLpfLLK6obMMcrF9YtQxuPXd3MmRXKQiciosgjl1serGO9f7a4wxk46XarqG4Qjf7tSk650Wznt7kRLKIn5W56vZ4T8QFGLANWLMNVLr9cqFxuHbGcWebAEhFFPrnc8mAd6/3Hrd5kkcuuy/Epog2ISTkNPGKxg2IZrnL55ULlcuuI5cwyB5ao59zfaoZrfSI3udzyYB3r/cet3mSRy67L8SmicVJO/ZI7A9b/GnFNXIzgcnd+uf9yoOMGGO9cWLc6kxVT9TrBS1iK9DrUmawBy4Wy0IlIntnYAECBu+++Oyj12a28t4N6x51bvlPgEpZgHuvd2eLu8UkZq5Acr8ROGHnnlIutmyIzaaf+jZNy6pfcGbD+N29u3PUd1hYbYAfQZnN64goTVbG4+4LhaLQ54ULH13/uMwrJqlj8x7tf+9Q/Va9DoV6HS/W6gMQW913sT390yGcdsSx0IpJnb2sG4MLkOxdgcG7g/Rpddarqcxx4589wOKQfc07RzdhmQ32LDSZLx1iQnhgYa+jOLV+4pdJnYu59rO9KPW4nG9sConpbrA4Y2+xYcuN4JMbFotXuxI8tNiy5YTyazDbMf2Mf6ls6/sB0jz1KF1BWPBEZWjWsjnao42JxxmhGoT7dk1MuNm7xevLIxkk59VsKAPOn67Fgxli0WJxIUsciLsYBO8RjDNd/+i0+PHAmYPntF+Vg1sUjYHW0I14Zg7pmK+JiY5CZqsGaknyYvDJptWql5wEOj109Rjarloi6LikjB4NyxvR4fdOp48FrDA1ItU3mgFQVsUhbodxy97G+O/WIxRTOLszFw2/uQ5vNKfj6bw9eih9bLdCo4pCkioXJbEGCOh4fVJ3y+RZ3al46LhuTAaAjp3ztrZNgNNs9bU7pfIYHRbaInpR/9NFHSEpKQlFREQDgueeew0svvYTx48fjueeeQ1paWphbSD1V22TGQoHYp12/vVxwuTsOak5hrs+k3L18VbEB057e7rPOtLx0bJhVgGFpCRgm0AbvLFsiIur/5GION8wqEDxj7r+sO/VIxRS6AMwtysWz26oFXy/ZWoWyYgOmdo5P86frsa+mMXDs89tuVqqGk/ABKKJzyn/729/CZDIBAKqqqvDrX/8a119/PY4dO+Z5IidFJqPZLhj71GJzSsZBZWjjBZe32gKTVNyRV0RENDB0JeYw2PVIxRTurm5AQXaq6OuK6ga0eI1PBdmponVxzBr4IvpM+bFjxzB+/HgAwJYtW3DjjTdi1apV2Lt3L66//vowt456Qyz2SS4OSjTGUGQ9xkcREQ0cwYo57E49cuOSf/yu/2vv8Ukuqpdj1sAW0WfKVSoV2traAACffPIJrrnmGgDAoEGDPGfQKTKJxT7JxUGJxhiKrMf4KCKigSNYMYfdqUduXPJPU/F/7T0+yUX1cswa2CJ6Ul5YWIjHH38cTz31FP7v//4PN9xwAwDg22+/xfDhw2XWpv4sRROHIr0uYHmSKlZwOSAeY1ik1yFRFThZZ7whEdHA4o45FNKdY3536nHHFAop9Ivk9X9dpNchyWt82neiCYUidXHMGvgielL+3HPPIS4uDn/729/wwgsvYNiwjtv1PvzwQ1x33XVhbh31RlaqBiuLDQEHuvK9JwSXu1NWtuw5Ibj8vz477rOc8YZERAOPO+bQf0Ld3WN+d+pxxxQKjUtzCnOxqeKY6OuVxQaoY2M829lUcQxzCnMD6uKYFR0i9ppyh8OB7du346WXXsLQoUN9yv7whz+EqVXUE0LZrsPTEjBCl4jVJfmeMq0mDsmdZe7lzWY7kr2WL7phPB668ryA5Q9dmYdZF49gvCER0QAnFXMo5IfGNpi8xqDkzlhc/3q0mjgkxivRYnFgX00jUrxeuxR2lBUb0GJzet6bFK9Es8WBzbMv8oxfbXYHXplzEZLVHa/haMfJVguW3DgecTEKNLTakKxRYu2tk2DurCtZ3TEutlo7tiuXl06RK2In5UqlEg8++CAfuRzhxLJdVxcb4IR4HvkzHx9G+f5TAcuXv/s1Pj10NmD5CF0iD2BERFGiq5G2YmOQ97jhrqe2yYzfvPVv7DpSjwRVLNbPKsDm3cewr6ap89+Hsbu6AfnDtFg/63ws2FIZUO+KmQb8/h9VeOAyPTbvPuZTXth5Jv2eTf+HC0ekYXVJPkZnJPls100sL50iW0RfvvKTn/wE+/btC3czqIeksl2bbQ7RssXlVZhTNEpw+bisFMHlPzS2heZDEBFRRPpBYgzyHzf8c8vnFuV6JtXe/waA9bMKsHircL1Ltlbh97dNDpiQAx1xiZt3H8PcolxPHvoZk0UyL93YxojEgSRiz5QDwK9+9Sv8+te/xsmTJ3HBBRcgMTHRpzw/Pz9MLaOukMp2dUEhmUe+KDbw78mK6gbMKcwVXG6yOAQfEERERNHJJDEG+Y8b/rnlBdmpeHZbdcC/AcBsb5est1XieRu7qxswt3Mc23mkHo2t8nnp/BZ44IjoSfkdd9wBAHj44Yc9yxQKBVwuFxQKBZxO4cxq6h+ksl3FcsXlysUyXpntSkRE3uTyxX2yyP3GEO+xxn/cka23G7nmJoujy22kyBfRk/Jjx46FuwnUC1LZrmK54nLlYhmvzHYlIiJvcvniPlnkfmOI91jjP+7I1tuNXHOtWnqaxrFtYInoa8pHjBgh+UP9m1S2qwIuyTxyhzPwjHiRX/6r93K5AxsREUUXrcQY5D9u+OeWe+eJ+2eLa+JiJOtNVMWKZpF755hPy0tHWmJwctcpMkT0pNztm2++wUcffYR33nnH54f6N6ls12SVUjKPfHPFd4LLD9YaBZcPS0sIzYcgIqKINExiDPIfN/xzy73zxN3/dk+0H35zH1bMFK/3N2/tF8wid6evbKo45sklH6JVByV3nSJDRJ8+/O6771BcXIyqqirPteRAx3XlAHhNeZicMVnw/9u787go6v8P4C/Ym2MBWbkUFIU8wTORQLtMNDUhuszKK+0Qraw88sr7qMw8ym/l1e+rpn5NKyvLMFNMKxUFz8QwNEUEgWWBZQ/m9wfuyO7OzC7LwnK8n48Hj+93Zz4z89ltPszH5T2vKSzVQa01QKkQw89DikClnHN59Sxyy2xxALzr3kzoiAn3R7AZrqbl84d3xVsJBna58k7eLCGEEAJUJanka3RQa/XwVUjuXmeqXU/K9AYcv3Ib/p5S6I0MSnUGKBUSvPdkN5RW3M00X/5EN6jL9VBrDZgztDOkIncUlOpgZIyc1y+twYC3EjrC11Ni9RwOL6kImgodvk2JN8tVr2nuOmm8GvWk/LXXXkN4eDhSU1MRHh6OP/74AwUFBXjzzTfx/vvvu7p7zVJOQSlm8GS+WmaIP9yxJeYM64KZuzORZtF+WVIUDODPKf/kYBa+/PMau9yU2drKz4NSVgghhHC6XlRuFTFoun50ClYip6AU03ZlsNnjH/78l9k1yNS2XUsvwX0ZjZVsTrnKS4otL/blfW1SPR/dkr2566Rxa9TlK0ePHsX8+fOhUqng7u4Od3d3xMfHY8mSJWaJLKR+3FRrrSbkAH+GeKcQH7xjMSE3ta+oZATzY8f1M88pp8xWQgghQiyzxk1M14/rReXsNcwye9yyrVB++LRdGTiclc9uuyw5GvP3nuV9bWK6vl0vKnf2WyeNRKOelBuNRnh7ewMAVCoVrl+/DqDqBtCLFy+6smvNUmGpTjCbtUeor9myHqG+vO0rDMI5rwYjY7XclNlKCCGEWLLMGq/u0KV8FJfr2euO0PXJVn744Uv5CFTK2dcBSpnZvixfV5eWVYBiG5GJpOlq1OUrXbt2xenTpxEeHo6YmBgsX74cUqkUn376Kdq1a2d7B8SpbOWpWma58mWKA47nvFJmKyGEEC6WWeOWql8/hK5PVfuy/3qn0Zrf32b5WqgfpHlp1JPyWbNmobS0FAAwf/58DB06FP369YO/vz+2b9/u4t41P7ZiBy2zXPkyxQHHc14ps5UQQggXy6xxS9WvH0LXp6p92X+985KLzNZZvhbqB2leGnX5SkJCAh5//HEAQEREBC5cuID8/Hzk5eXhoYcecnHvmh8/T6lgNqtlhnj61SLe9jKxcM6rWORmtZwyWwkhhPCxzBqvrn+kCj4KCXvdscwet2wrlB/eL1KFPLWWfZ2nrjC7nlm+ri4+wh8+Nr6UIk1Xo56Um2RlZeHHH39EeXk5WrRo4eruNFuBSjkWC2S+WmaIn79ezJsRK3N3E8yPXX/YPKecMlsJIYQIscwaNzFdP0J8Few1zDJ73LKtUH748uRoxEeo2OvXtF0ZmD20C+9rE9P1LcRX4ey3ThqJRl2+UlBQgKeeegq//PIL3NzccOnSJbRr1w7jxo2Dn58fPvjgA6cd691338W8efPMlnXo0AEXLlxw2jGagjB/TyxLjoa6WjarKSt83p0McVMmqylb3DKr1btatjhfTvmMwZ0wvl97ymwlhBBixfRcDJ3BAD8PGTQ6I9Tlevh6SLD48ShoKgxQl5s/SwOouoZ98FR3FJbqwDAGLE2KYrc1XZ+MeiPScwrho5BgyeNRVde7O9ciH4UEwXcm1cuf6Ibicn1Vjbgbg6XJ0dBoDVBrDXC787rEYluakDdvjXpS/sYbb0AikSAnJwedOnVilz/99NOYMmWKUyflANClSxf8/PPP7GuxuFF/fHWCK6f80a6BmDa4k1XE4fMxoXixf3veLHIxgGk869r4e9IknBBCiBXTdeiWugKfvtAb0+9cRzykIqwa0cMq6tCULW6aEAcq5QhUyvFPQSm7rUl8hD8WJkZhyffn8MeVqhLM0XHhmLwtHWU6I+Ij/LE4KQpSkTtvhnnHYGX9fRikUWnU5Ss//fQTli1bhtatW5stj4yMxD///OP044nFYgQFBbE/KhV3PVlzxZdTntwrlDNzfFy/doJZ5GqdgXJcCSGE2K36dWjtcz0xc8/da4yt7PHqz7m4VljGe32atScT7z/ZnX298Ug2xsaHs6/f2Z2JK7fLePPQ6XkahE+jnpSXlpbCw8P6Eeq3b9+GTCZz+vEuXbqEkJAQtGvXDiNHjkROTo5g+4qKCqjVarOfpowvp5wvk7VcL5xFzsD6Zk7TOspxJUDzG2OE1LfGNsaqX4cMRsbsGmMre7z6cy5KtNZfCpmkZRWgVHc31vCIxXM40rIK4CnjTlih52kQIY1yUm56SFC/fv3wxRdfsMvd3NxQWVmJ5cuX48EHH3TqMWNiYrBp0ybs27cPn3zyCbKzs9GvXz+UlJTwbrNkyRL4+PiwP6GhoU7tU0PDl9vKl8nqaBY5QDmupEpzG2OE1LfGNsaqX4csrzG2sserX1dqen2y3LdQFjldvwifRjkp79KlC7Zu3Yr33nsPn376KQYPHgydToepU6eia9euOHToEJYtW+bUYw4ePBhPPvkkoqOjkZCQgO+//x5FRUXYsWMH7zYzZsxAcXEx+3P16lWn9qmh4ctt5ctkdTSLHKAcV1KluY0xQupbYxtj1a9DltcYW9nj1a8rNb0+We5bKIucrl+ET6OclC9atAgvvfQS3n33XZw7dw7x8fEYPnw4SktL8fjjjyM9PR3t27ev0z74+vrinnvuQVZWFm8bmUwGpVJp9tOU8eWU82WyKiTCWeTcxSuU40ruam5jjJD61tjGWPXrkFjkZnaNsZU9Xv05F95yseD1yVN6d9IdZ/EcjvgIf5RWcH9TTs/TIEIa5aT81VdfRUZGBgoKCtClSxdERUVhx44d+P7777Fw4UIEBwfXeR80Gg0uX75cL8dqLPhyyneduMqZOb7+8N+CWeRKqYhyXAkhhNit+nVo4n9PYmHi3WuMKXvc8rrC9ZyL1n4egtent3aeYl+PiQvHhrRs9vXipCi0beHBm4dOyWGET6PN9AsPD8eBAwewZs0aJCcno1OnTlYRhSdPnnTa8d566y0MGzYMbdq0wfXr1zF37lyIRCKMGDHCacdobEw5sGrt3azXMH9PztxxvjxyoeWAec4r5bgSQgixpXrWeIWhAkuqZY37KCRYmhyNUp0BxWV6BHhJIBaLUVSuR87tMvgoJPCSi6E1GKAuM2BxUhRKdUb2GuQtF4MxVOKdRzvDWy6BXOKOkgoDNo251+oatXpED+RrdPQ8DWK3RjspB4B//vkHX331Ffz8/DB8+PA6zQ2/du0aRowYgYKCArRs2RLx8fE4duwYWrZsWWfHbMi48sif7t0Krz4YaRUjldQ9GK8/0sFqOV/76lnkIb4KmoQTQgipEXuyxtMu/ovHe4dh2q4MzvXTd6XjrzwN++13mL8n2yYUwPWict4s8hBfBXw8aBJOaqbRTso/++wzvPnmmxgwYADOnj1b55PjL7/8sk7335jw5ZFzPQgIAMbEc+eR87U3ZZEvTY5mvzEnhBBCasJW1viSpCirCXv19Wuf64lHVhxis8c/eKo7++TP4jKd1YQcuJtFvnpED5qQkxprlJPyQYMG4Y8//sCaNWvwwgsvuLo7zQ5fHrllJqyJWOReo/ZA1S/FEp6IRUIIIcQWW1njGp1RcL3ByJi9LizVsZPyfI3OakJuYsoip0k5qalGOSk3Go3IyMiwepInqR98eeR8ua58eeM2c2Apy5UQQoiDbF1jappFbpaBbuP6RNcv4ohGOSnfv3+/q7vQrPHlkfPluvLljdvMgaUsV0IIIQ6ydY2paRa5WQa6jesTXb+IIxplJCJxLb48cstMWBODsbJG7YGqG228eSb/hBBCiC22ssa9OGJ3q68Xi9zMXvt53i1HUXlJrSIPTSiLnDiKJuWkxvjyyD8/dJkz13VjGnceOV97U/oK3eRJCCHEUbayxnf+mWOWY159/cKkKEz870n29eKkKLaeHAB8PKRYmhxNWeTEqeirSAKAO3Pc9AvoWmEZmyNuynB1Zh65aXn1HFiakBNCCLFXcZkO+Rod1Fo9AhUSVIrdUaI1wI3RW+WUe8nFKNUZEHdPAHSVRs5rkNZgwMKkrlbZ45bXyqXJ0ajQG1FcTlnkpPZoUk44M8fjI/zxQVIUtIDd+eLTBkbg0W6teXPHPz90Gf/3+1Wz5ZbZr4QQQkhNVM8LH9I1AG8P6oyZuzKgELth1tCunDnls4d2wcStJ5Gv0bG55K9tu5tLPjouHJO3paNMZ0T/SBWWJ0dDZ6zkvFYuTopC9zA/V7x10sRQ+Uozx5c5npZVAB2sJ+QAf774UI4JuWlfM3dnYly/dlbL39mdiZtqrfPeECGEkGbDMi98+uDOmLmn6jo0d1hX9v9Xl5ZVgAV7z2JZcjT72pRLbnq98Ug2xsaHA6iKOLxyu4z3WknXMeIsNClv5vgyxwHwZrjy5Yvbynwt11dyLi8s1dWw14QQQoh1Xnj165Cta1KAUmb2unou+ZGsAvQI9WVfe8pEgvui6xhxBpqUN3N8meMAf4ZrTZeb8OaV00OCCCGEOMAyL7z6dcjWNUmjNZq9trxGVRgqedta94OuY6T2aFLezPFljgP8Ga41XW7Cm1dO0YeEEEIcYJkXXv06ZOua5CUXmb22vEbJxO68ba37QdcxUns0KW/m+DLHAfBmuPLli9vKfFVIrE83y+xXQgghxF6WeeHVr0O2rkl56gqz19VzyeMi/JF+tYh9XVphFNwXXceIM9CkvJnjyxyPj/CHFKhRvvje09cEM2HXH/7barll9ishhBBiL8u88KU/nGOzx+d9e4Y3h3zOsC6YtiuDfW2ZSz4mLhwb0rIBVGWPh7fw4L1W0nWMOAv9vaWJ4ssdtydz3LQ88E5WuLNyx1Mevgcj+7at6pNcDD9PKf0iI4QQUmPVc8lbKyRY/HgUez3S6quyx40GA8r1WjanvPo1qVRnwMcje7KvjYZKLH8iGkqFBHKJCGqtHpvG9LF6bscHT3W/e22l6xhxMpqUN0FcueMPd2yJOcO6YObuTKTZkTkeH+GP5UlR0MM6FtH0zffaXy5hx/F/rZa34ckdD1TK6ZcXIYSQWqmeSz5rcCT8urTCzF0ZVtephYlROHXlFqZ/fYHNJh/5+TF0DPK2yiFfmhyN7i29zPZtYlof4qug6xipU1S+0sTw5Y53CvHBOxYTcoA/czwtq4BzQm5aN3N3Jsb3b8+5/FphmfPeECGEEHKHZS55QtdWvFnks/ZkIu6eIPa1KZucK4d8+q4M3FRrrSbk1dcXl1HsIalbNClvYvhyx3uE+tYocxwAymxkvFbPdK2+vISioQghhNQBoVxyS2lZBdDojGavTdnkljnkhy7lo7BUZzUhr74+X0OTclK3qHylkateV6dUSFBSYYCHVISx8eHoEeqLCkMl5BIRxO5uUHlJsSw5GgFKGTRaI7zlYmgcyCk34csdL9EKb0cIIaRpsrwmqTyl8PFwXjKJWqtHdCslVo3ogXJ9pe3rlFaP1Cn3o0xvwL+FWri7uSHloQhsSMs2yyGv2rfwF0p0bSN1jSbljRhX7duX42OwakQPbDySjTUHstjl2yfEYMuLfTF/71mzbxW2vhjDu39Hc8e95cLbEUIIaXps1WM7g79CglUjerIlKz+81k+wvbdcgjnfnDG77sVF+GPViB4Qu7mZtbWVNU7XNlLXqHylkbKsqzMp1Rmx8Ui21Z/zFFKx1YQcAH77u6DGOeWAdaZr9eXe9BAFQghpVviuSc6ux3YXu5vVkCsk7oLXKS+pyOq6dySrAJuOZMPI3C3B7B+pgp+neeZ5df0jVVB5URY5qVs0KW+kLOvqTNzc3Djr6/iWb0jLxui4cPSLMP9FFB/hD22lkTfjdVFSFNYfss4dX5QUhdZ3ohQJIYQ0D3zXJMC59dglWoPZtWzytnTB65SukrskJS2rAG53vinvH6nCsuRoBCrlZpnnJqb1zizDIYQLfaXZCHDV6Kl5atu0eiPncr7a8TKdEdN3ZWDnS7HQGirZzHGFxB23Siowc3c61j7XEwYjg5JyPbwVEohFbpi09SSWP9ENo+LCrfLICSGENC981yQTZ9Vjq8v1VvdNXS8qw+KkKJTqjOx1yksqwrxvz2BcvwjefXnJxEidcj9UXnfr3kN8FVg9ogfyNTr22lZ9PSF1iSblDRxfjd7MIZ0428vE3H/88JKLOJd7SEVYmhyNOV+fwWGLmruFw7viWlE5HllxiHNbBkCnYKWd74QQQoi9zp8/75T9qFQqhIWFOWVfQpQ26q2dVY/t4yHhvG8q7s5TOIN9ZBj80WF2+WuPdODdl7+nFO0DvDiOQZNw4ho0KW/AhGr0BucUoX+kCocs1qVfLUJ8hL9VHnmeuoJz+dj4cM4a9CNZBZjzzVnMHtIJM3afseob1Y4TQojzlRcXAHDDc88955T9KRQeuHDhfJ1PzFVeUs5rEuDcemwvmZj3muUGYOqgjuyy+Ah/lFZw/5WYasRJQ0SzqgZMqEZvwd5z+H5yP8z5+ozZL8ELN9SYPbSL1U2dX524hoWJUZi1x/wBQrHt/M2+baju8KV8zBzSyWoyT7XjhBBSN/RlJQAYdH92GlqGd7TZXoj6xhX8vmEe8vPz63xS7uMhxdLkaEzflWF2TXJ2PbamwiCYS/5iaVXtenyEP+YM64LcIi3iIvzNtqEacdJQ0aS8AbGsHTcyDDykIpTprOvEy3RGqMt1VrVvemMlRn5+DM/0CcPYuHBUGCohE7ujhacUE744jvef6oZ3RO5s3Z1QTjkAaHVGLE2ORonWQLXjhBBST7wCwtAijL/0oiGqj3rs4jLh2nQPiQg/vNYPCok7yvVGeEjdMe+xLijXG/FvoRZhLRRo5augCTlpkGhS3kBw1Y73i1Rh1YgemLwtnXNi7imTWNW+nb+hRr5GZ/Xt9/pRvfFXngaPrTlitVyIt1xCE3BCCCF2qet6bHuen1G9pvzbSXEYUO2+qNQp99OEnDRYFInYAPDVjh++lI9NR7IxNj7cahu+ejilXMyZ2WqqNbd3udAxCCGEEFfw5rnGAVUlKwqJu9nrPHUF+5quaaSho0l5AyBUO56WVYD72pn/AhKqh2vl54FFSdaZreevF2NRUpRV/urFG2os5lhONXeEEEIaGr2hErOHduHMJZ8zrAv+LSw3ez1tVwYAuqaRxoHKV2po7dq1eO+995Cbm4tu3bph9erV6NOnT632aSvfVS4RIXXK/Zw1eteLylFcroe6XA8fhQRKhQRt/D2xLDka6mp14Eq5GK38PHjr/SiXlRBCSENluueqoFSHV7ecwLLkaEwb3BEarRFechHy1BV49rNj+HhkT+x7rR+UCgkq9EZ8/kJvuqaRRoMm5TWwfft2TJkyBevWrUNMTAxWrlyJhIQEXLx4EQEBAQ7v11a+q49Cwpml+k9BKd7ZnWl2V7kpGaWNvydace2Lp96PclkJIYQ0RNXvuVo/qjfyNTqM23ycs62/p4zzeklIY0DlKzWwYsUKjB8/HmPGjEHnzp2xbt06eHh4YMOGDbXarynflQtfDdz1onKrCTlQVe4yc3cmrheV16pPhBBCiKtZ3nOVfrUIcUI15VLuB+UR0hjQpNxOOp0OJ06cwIABA9hl7u7uGDBgAI4ePcq5TUVFBdRqtdkPF1O+a03quovL9YJZrcXlznmkMSENmb1jjBDiGFePMct7rjakZWNMXLjVxDwuwh+j48JRYqMclJCGjMpX7JSfnw+j0YjAwECz5YGBgbhw4QLnNkuWLMG8efPs2n9N813VNibd9IuJNAc1GWOEkJpz9RizvOeqTGfE5G3pGBsfjrFx4fCQilGmMyD9ahEmb0vHpjG1u8eLEFeib8rr0IwZM1BcXMz+XL16VbC9j4cU7QO80D3MD+0DvARrvG1mtdqoUyekKajpGCOE1IyrxxjXPVdlOiPWHMjCuM3HUaYzYNzm41hzIAtlOiOUcvqukTRedPbaSaVSQSQS4ebNm2bLb968iaCgIM5tZDIZZDJZnfTHRyFBfIQ/0jhKWOIj/OFjY9JOSFNQl2OMEOL6MWa65+oQR2xwXIQ/0q8Wsa/jI/zh50mBBaTxom/K7SSVStGrVy+kpqayyyorK5GamorY2Nh670+Ir4Izj9yUvhLiq6j3PhFCCCHOxHfPVXyEP8bEhWNDWjb7enFSFAKVcld0kxCnoG/Ka2DKlCkYNWoUevfujT59+mDlypUoLS3FmDFjXNKfNv6eWP5ENxSX69k6dB+FhCbkhBBCmgyue64UUhFKtHpsGtMHSrkYfp5SmpCTRo8m5TXw9NNP49atW5gzZw5yc3PRvXt37Nu3z+rmz/oU4qugSTghhJAmjftZGnTtI00LTcprKCUlBSkpKa7uBiGEEEIIaUKoppwQQgghhBAXo0k5IYQQQgghLkblK/WIYRgAoKcOElJD3t7ecHNzs9nOnjGm0WgAAMXX/kalwVirfmny/q06Xu6VWsfGOWtfDbFPztwX9cl+Jbn/VO1To7F53XHmGCOEWLNnjLkxphFG6ty1a9cQGhrq6m4Q0ugUFxdDqVTabEdjjBDH0BgjpG7ZM8ZoUl6PKisrcf36dbu/kWgM1Go1QkNDcfXqVbt+oTcV9L7r933bO2bsGWPN9b+dI+izsk9T+JxojLkGfVb2aQqfkz1jjMpX6pG7uztat27t6m7UCaVS2WgHSm3Q+25YajLGGup7aIjos7JPc/icaIzVDfqs7NPUPye60ZMQQgghhBAXo0k5IYQQQgghLkaTclIrMpkMc+fOrXVKQGND77vxvu+m8B7qC31W9qHPyRx9Hvajz8o+zeVzohs9CSGEEEIIcTH6ppwQQgghhBAXo0k5IYQQQgghLkaTckIIIYQQQlyMJuWEEEIIIYS4GE3K6xHDMFCr1aB7awmpGzTGCKlbNMYIqTs0Ka9HJSUl8PHxQUlJiau7QkiTRGOMkLpFY4yQukOTckIIIYQQQlyMJuWEEEIIIYS4GE3KCSGEEEIIcTGalBNCCCGEEOJiLp2UL1myBPfeey+8vb0REBCAxMREXLx40azNAw88ADc3N7Ofl19+2axNTk4OhgwZAg8PDwQEBODtt9+GwWAwa3Pw4EH07NkTMpkMERER2LRpk1V/1q5di7Zt20IulyMmJgZ//PGH2XqtVouJEyfC398fXl5eSE5Oxs2bN53zYRBCCCGEkGbLpZPyX3/9FRMnTsSxY8ewf/9+6PV6DBw4EKWlpWbtxo8fjxs3brA/y5cvZ9cZjUYMGTIEOp0Ov/32GzZv3oxNmzZhzpw5bJvs7GwMGTIEDz74IE6dOoXXX38dL774In788Ue2zfbt2zFlyhTMnTsXJ0+eRLdu3ZCQkIC8vDy2zRtvvIFvv/0WO3fuxK+//orr16/j8ccfr8NPiJCGo7hMh8t5GqTnFOLyLQ2Ky3R1sg0hxDZbY4vGHiGNjxvTgMJGb926hYCAAPz666/o378/gKpvyrt3746VK1dybvPDDz9g6NChuH79OgIDAwEA69atw7Rp03Dr1i1IpVJMmzYN3333Hc6cOcNu98wzz6CoqAj79u0DAMTExODee+/FmjVrAACVlZUIDQ3FpEmTMH36dBQXF6Nly5bYunUrnnjiCQDAhQsX0KlTJxw9ehR9+/a1+f7UajV8fHxQXFwMpVLp8OdESH27XlSOabsycPhSPrusf6QKS5OjEeKrcNo2tUVjjDQHtsZWXY49GmOE1J0GVVNeXFwMAGjRooXZ8i1btkClUqFr166YMWMGysrK2HVHjx5FVFQUOyEHgISEBKjVapw9e5ZtM2DAALN9JiQk4OjRowAAnU6HEydOmLVxd3fHgAED2DYnTpyAXq83a9OxY0eEhYWxbQhpiorLdFYXeAA4dCkf03dlcH4D58g2hBDbbI2tm2otjT1CGimxqztgUllZiddffx1xcXHo2rUru/zZZ59FmzZtEBISgoyMDEybNg0XL17EV199BQDIzc01m5ADYF/n5uYKtlGr1SgvL0dhYSGMRiNnmwsXLrD7kEql8PX1tWpjOo6liooKVFRUsK/VarW9HwchDUa+Rmd1gTc5dCkf+RodfDyktd7GETTGSHNja2wVljp37LlyjOXk5CA/n/u92EulUiEsLMxJPSKkbjWYSfnEiRNx5swZpKWlmS2fMGEC+/+joqIQHByMhx9+GJcvX0b79u3ru5s1smTJEsybN8/V3SCkVtRaveD6Eo71jmzjCBpjpLmxNbbUWoPg+pqOPVeNsZycHHTs2Anl5WW2GwtQKDxw4cJ5mpiTRqFBTMpTUlKwd+9eHDp0CK1btxZsGxMTAwDIyspC+/btERQUZJWSYkpECQoKYv/XMiXl5s2bUCqVUCgUEIlEEIlEnG2q70On06GoqMjs2/LqbSzNmDEDU6ZMYV+r1WqEhoYKvj9CGhqlXCK43ptjvSPbOILGGGlubI0tpVz4sl7TseeqMZafn4/y8jLEjJ0LZXBbh/ahvnEFv2+Yh/z8fJqUk0bBpZNyhmEwadIk7N69GwcPHkR4eLjNbU6dOgUACA4OBgDExsZi0aJFyMvLQ0BAAABg//79UCqV6Ny5M9vm+++/N9vP/v37ERsbCwCQSqXo1asXUlNTkZiYCKCqnCY1NRUpKSkAgF69ekEikSA1NRXJyckAgIsXLyInJ4fdjyWZTAaZTFaDT4SQhkflJUX/SBUOcfxJvH+kCiov6z+FO7KNI2iMkebG1tjy83Tu2HP1GFMGt0WLsA4uOz4h9cmlN3pOnDgR//3vf7F161Z4e3sjNzcXubm5KC8vBwBcvnwZCxYswIkTJ3DlyhV88803eOGFF9C/f39ER0cDAAYOHIjOnTvj+eefx+nTp/Hjjz9i1qxZmDhxIvuL5OWXX8bff/+NqVOn4sKFC/j444+xY8cOvPHGG2xfpkyZgs8++wybN2/G+fPn8corr6C0tBRjxowBAPj4+GDcuHGYMmUKfvnlF5w4cQJjxoxBbGysXckrhDRWPh5SLE2ORv9Ildny/pEqLEuO5qxPdWQbQohttsZWoFJOY4+QRsql35R/8sknAKpiD6vbuHEjRo8eDalUip9//hkrV65EaWkpQkNDkZycjFmzZrFtRSIR9u7di1deeQWxsbHw9PTEqFGjMH/+fLZNeHg4vvvuO7zxxhv46KOP0Lp1a3z++edISEhg2zz99NO4desW5syZg9zcXHTv3h379u0zu/nzww8/hLu7O5KTk1FRUYGEhAR8/PHHdfTpENJwhPgqsHpED+RrdCjR6uEtl0DlJRW8wDuyDSHENltji8YeIY1Tg8opb+oo35WQukVjjJC6VV9j7OTJk+jVqxcembnR4fKV2zkXsX/RGJw4cQI9e/Z0cg8Jcb4GlVNOCCGEEEJIc0STckIIIYQQQlyMJuWEEEIIIYS4GE3KCSGEEEIIcTGalBNCCCGEEOJiNCknhBBCCCHExVyaU04IIYQQ0tTl5OQgP9/6Kas1oVKpEBYW5qQekYaIJuWEEEIIIXUkJycHHTt2Qnl5Wa32o1B44MKF8zQxb8JoUk4IIYQQUkfy8/NRXl6GmLFzoQxu69A+1Deu4PcN85Cfn0+T8iaMJuWEEEIIIXVMGdzW4aeTkuaBJuWEEEIIabLOnz9fq+2plpvUF5qUE0IIIaTJKS8uAOCG5557rlb7oVpuUl9oUk4IIYSQJkdfVgKAQfdnp6FleEeH9kG13KQ+0aSckAaouEyHfI0Oaq0eSoUEKk8pfDykru4WIQ0ajRvCxSsgjGq5SaNAk3JCGpjrReWYtisDhy/dzbTtH6nC0uRohPgqXNgzQhouGjeEkMaOnuhJSANSXKazmlgAwKFL+Zi+KwPFZToX9YyQhovGDSGkKaBJOSENSL5GZzWxMDl0KR/5GppcEGKJxg0hpCmgSTkhDYhaqxdcX2JjPSHNEY0bQkhTQJNyQhoQpVwiuN7bxnpCmiMaN4SQpoBu9CSkAVF5SdE/UoVDHH+K7x+pgsqLkiQIsUTjhpD6k5OTg/x87nIxe9EDmbjRpJyQBsTHQ4qlydGYvivDbILRP1KFZcnRFO9GCAcaN4TUj5ycHHTs2Anl5WW12g89kIkbTcoJaWBCfBVYPaIH8jU6lGj18JZLoPKivGVChNC4IaTu5efno7y8DDFj50IZ3NahfdADmfjRpJyQBsjHgyYThNQUjRtC6ocyuC09kKkO0I2ehBBCCCGEuBhNygkhhBBCCHExmpQTQgghhBDiYlRTTgghhBAi4Pz58y7ZljQvNCknhBBCCOFQXlwAwA3PPfdcrfelr9DVvkOkSaNJOSGEEEIIB31ZCQAG3Z+dhpbhHR3ax43MozjzzacwGAzO7RxpclxaU75kyRLce++98Pb2RkBAABITE3Hx4kWzNlqtFhMnToS/vz+8vLyQnJyMmzdvmrXJycnBkCFD4OHhgYCAALz99ttWJ//BgwfRs2dPyGQyREREYNOmTVb9Wbt2Ldq2bQu5XI6YmBj88ccfNe4LIQ1JcZkOl/M0SM8pxOVbGhSX1e83Na4+PiHOIHQe0znePHgFhKFFWAeHfjxVwa7uPmkkXPpN+a+//oqJEyfi3nvvhcFgwDvvvIOBAwfi3Llz8PT0BAC88cYb+O6777Bz5074+PggJSUFjz/+OI4cOQIAMBqNGDJkCIKCgvDbb7/hxo0beOGFFyCRSLB48WIAQHZ2NoYMGYKXX34ZW7ZsQWpqKl588UUEBwcjISEBALB9+3ZMmTIF69atQ0xMDFauXImEhARcvHgRAQEBdvWFkIbkelE5pu3KwGGLJxwuTY5GiK+iyR+fEGcQOo/dAEylc5wQ4iQu/aZ83759GD16NLp06YJu3bph06ZNyMnJwYkTJwAAxcXFWL9+PVasWIGHHnoIvXr1wsaNG/Hbb7/h2LFjAICffvoJ586dw3//+190794dgwcPxoIFC7B27VrodFXfWKxbtw7h4eH44IMP0KlTJ6SkpOCJJ57Ahx9+yPZlxYoVGD9+PMaMGYPOnTtj3bp18PDwwIYNG+zuCyENRXGZzmoiAQCHLuVj+q6MOv82z9XHJ8QZbJ3HB/+6Rec4IcRpGlQkYnFxMQCgRYsWAIATJ05Ar9djwIABbJuOHTsiLCwMR48eBQAcPXoUUVFRCAwMZNskJCRArVbj7NmzbJvq+zC1Me1Dp9PhxIkTZm3c3d0xYMAAto09fbFUUVEBtVpt9kNIfcjX6KwmCyaHLuUjX1O3E4b6Oj6NMVKXbJ3HAd4y3nV1PcbqC40xQupPg5mUV1ZW4vXXX0dcXBy6du0KAMjNzYVUKoWvr69Z28DAQOTm5rJtqk/ITetN64TaqNVqlJeXIz8/H0ajkbNN9X3Y6oulJUuWwMfHh/0JDQ2189MgpHbUWr3g+hIb6xvL8WmMkbpk6zyuMFTyrqvrMVZfaIwRUn8azKR84sSJOHPmDL788ktXd8VpZsyYgeLiYvbn6tWrru4SaSaUcongem8b6xvL8WmMkbpk6zyWifkvoXU9xuoLjTFC6k+DmJSnpKRg7969+OWXX9C6dWt2eVBQEHQ6HYqKisza37x5E0FBQWwbywQU02tbbZRKJRQKBVQqFUQiEWeb6vuw1RdLMpkMSqXS7IeQ+qDykqJ/pIpzXf9IFVRe0iZxfBpjpC7ZOo/zSip419X1GKsvNMYIqT8unZQzDIOUlBTs3r0bBw4cQHh4uNn6Xr16QSKRIDU1lV128eJF5OTkIDY2FgAQGxuLzMxM5OXlsW32798PpVKJzp07s22q78PUxrQPqVSKXr16mbWprKxEamoq28aevhDSUPh4SLE0OdpqQtE/UoVlydHw8ajbCYOrj0+IM9g6jx+4pyWd44QQp3FpJOLEiROxdetWfP311/D29mZrs318fKBQKODj44Nx48ZhypQpaNGiBZRKJSZNmoTY2Fj07dsXADBw4EB07twZzz//PJYvX47c3FzMmjULEydOhExWdRPOyy+/jDVr1mDq1KkYO3YsDhw4gB07duC7775j+zJlyhSMGjUKvXv3Rp8+fbBy5UqUlpZizJgxbJ9s9YWQulZcpkO+Rge1Vg+lQgKVp5T34h/iq8B7T3ZDYakOaq0BSoUYfh5SBCrlNd6XI30K8VVg9YgeyNfoUKLVw1sugcrLsWMQYo/anNNC57HQOLJ1jjtrnBFCmj6XTso/+eQTAMADDzxgtnzjxo0YPXo0AODDDz+Eu7s7kpOTUVFRgYSEBHz88cdsW5FIhL179+KVV15BbGwsPD09MWrUKMyfP59tEx4eju+++w5vvPEGPvroI7Ru3Rqff/45m1EOAE8//TRu3bqFOXPmIDc3F927d8e+ffvMbv601RdC6lJNc7/52i9LjgYDOCVD3FaffDxoAkLqR21y8WuTRS50jlNWPyGkJlw6KWcYxmYbuVyOtWvXYu3atbxt2rRpg++//15wPw888ADS09MF26SkpCAlJaVWfSGkLtjKS149oofVt3N87Q/+dQvfZ9zA4Sz79uWsPhFSV2pzLtradnBUcJ3sl8YHIcRSg7jRkxAirKa530LtA7xlVhNyoX05q0+E1JXanIt1lUVO44MQUlMu/aacEGKfmuZ+C7UXylbm2pez+kRIXanNuVhXWeTOGB9Uj05I80KTckIagZrmfgu1F8pW5tqXs/pESF2pzblYV1nktR0fVI9OSPND5SuENAI1zf0Wap9XUuGUDHEvuRjxEf6c6+Ij/OElp3/zk/pRm1z8usoir02fbNWjF5dR6QshTRFNyglpBGqa+y3U/sF7WjolQ7y0woDRceGIs5iYx0X4Y3RcOEorDPa+PUJqpTa5+HWVRV6bPlE9OiHNE32VRUgjEeKrwNLkaBSX66Eu18NHIYFSIUEwz5+yQ3wVWPJ4FNRaA9veWy5G0J32ix+PQkm1dV5yMYJ9FbhWWGa1vLWfB/4tLDPbl6dUhFU//4X+HQIwNi4cFYZKyMTuSL9ahMnb0rH1xRje90K1ssTZbOWJ29pWKG9caL9848W03+rjTHlnDJrGrOWY8paL0crPg+rRCWmmaFJOSCORU1CKGbszcSSrgF0WH+GPxUlRCPP3tGr/T0Ep3uFovyQpCpUA57pFSVFY9sN5fH/mptXylfsvYvepG2bLV43oiQlfHMeaA1lWx+ermaVaWVIXante8eWNC+3XYKzkHJOLkqLQxt+TdwwuSoqCBMBUnnV+CqpHJ6Q5ovIVQhqBm2qt1cUfANKyCvDO7kzcVGvNll8vKreaDJja/1vMv27m7kwk9wrlXD4mvp3V8ll7MrH2uZ5W/eWrKadaWVIX6uq8EtrvtF0ZSMvK5x1H1wrLBMeZHuBdJxa7Uz06Ic0QTcoJaQQKS3VWF3CTtKwCFJaaX2iLy/W87T1lYsF9BSitc5nTsgogFln/ukjLKoDBaP4QMKGacqqVJXWhrs4rof0evpTPWxqTllWAEq1BcJyV6YyC21I9OiHND5WvENIIqLXCN01arleX89ecarTckwFb60t49llSrsf6Ub3tqimnbHNSF+rqvKpNhrnQGAT4xxNQ1d9OwUrBOndH+0xjjJCGiyblhDQCSoXwULVcrxSoSfWSiwT3xbfem2ef3goJnvr0mPVyjrpXyjYndaGuzqvaZJgLjUGAfzwBd/vLV+cuhMYYIY0Xla8Q0ggo5RLBTHDLC7GPgr99aYVBcF95autc5vgIfxiM1t8Kxkf4Qyxys1rOV/dam+xmQvjU1XkllMXfL1KFPIt7OUziI/zhbSPH30PK/Y/fqvHs+PdlNMYIabxoUk5II6DVGwUzwbV685KTEF8FFiVFWU0K4iP80cpHgQWJXTnXLUqKwq4TVzmXb0z7m3P5+sPmy4XqXmuT3UwIn7o6r4Sy+F/q3w73tVfxjiOxoRILE7nH4KKkKEgY8K5rdSdS0RE0xghpvKh8hRAXul5UbpU7zhVZVlyux+Rt6RgbH26VCT59Vwa2vtgXF26ozXKU2/h7YmlytFVGstZQgVf/LwNrn+sJg5FBSbke3goJxCI3LP/hHGYM7oxJD9/D1rF638ldfiuhIybcH8EuV97JVH7jkQ4YfV84Z4YzV1ayrUxoQhxR2/PqplprlUVeWqHHl79fwdKkKGh0RnYceUlFmPftGUwdfA87xkzjyDRe0nMKseKnC1iSFA2Nzsiu95KK8M7uDMwY3BHLkqOh1hqsxpSJo1njtclsJ4S4Dk3KCXERoQzjNha540q5BGU6o1UeuIdUhFUjemDB3rM4XG0/L/cLx4i+bbj3nxiFRYmd8e43Z83WxUX4Y0xcOPSVDDoFK63628rPA60slvHlIS9LjgYDCGYl0yScOJsjNdiAwDMAEqMwe2hXTOdYtzAxClIAb+/K4M0aP5x1G/3eO8h5zHclEs4xZVKbrHHKKSekcaLyFUJcQChHfObuTFwvKjdbzlcnOjY+HBuPZJtNyAFgJMeEnN3/nkwE+HhYrTuSVYBNR7IhlwjfCGoilId88K9bmPY/ykomDZ/QMwCOXM7HrD3c62btyYTereFljVNOOSGNF03KCXEBoRzxtKwCFFvEpfHVid7Xzp9zPxqd0eGMZFuRaiZCecgB3jIczqKsZNLwCT0DIEApt/oHr0lDzRqnnHJCGi8qXyHEBWxmGHNMjLlqZm/zfOtVm4xkdblwJjrbTmDyLpTfDFBWMmk4hJ4BYPM8boBZ45RTTkjjRZNyQlzAZoYxT5awZc2s/obasf0LrLc3jk0oD1kovxmgrGTScAid7zbP4waYNU455YQ0XlS+QogLCOWIx0f4w8fGpNrEz1PKuR8vqcjhjGQ/T/smEEJ5yHklFZSVTBoFvjEEAHlqLfo5OI68XZQ1TjnlhDReNCknxAWEcsQXJUXZnZAQqJRjMcd+thz7R3D/UnBnJC9OirI7Nk0oD/nBe1pSVjJpFPjGUHyEP+IjVFgoMI4k4M8ab+2irHHKKSek8aLyFUKcpKaZwm38PbH8iW4oLtez9aY+d3LKrxWWsfniPgoJvO5kH3PlmodZ5JFXb89mKFtkjgPAB091v5tjLBfDz7Mqx5jvfXDlONvKhqY8clKf+MYNwJ1DbvoHaPUxZJk3DkBwHAmts3VcoecU1CZ3nZ4FQEjjRJNyQpzA0VzgEF+F1Xqh/PL5355F6oVbVss/3H8Re07dsGv54qQohPl7IlApt/pWnOt9DI0KwtuDOnL2ybQvvou9o7nRhNSU0LiRA5gicP7aemaA0LfeQuv48s+XJEWhErD5nILajB8ae4Q0PlS+QkgtOTMX+FphmWB+eacQH87lY+Pb2b38nd2ZuKnW2v0+knq25u0T374IqU+2xo0O3Hni7+zOtLmt5TMD7CWUf56WVYBZdXBMQkjjRpNyQmrJmbnAJVqDYL54j1BfzuVikfVQFlpeWGrdJ773EaCUCfaJa1+E1Cdb40ZjI0+8Js8MsJdw/rlMMP/c0WMSQho3mpQTUkvOzAW2lS/Ol5vMl5fMt5wrm5nvfWi03BMaoX0RUp9qk8svtA5wPNe7VvnnlCVOSLNEk3JCasmZucC28sX5cpP58pL5lnNlM/O9Dy85d+yb0L4IqU+1yeUXWgc4nutdq/xzyhInpFmiSTkhteTMXGBvuVgwXzz9ahHncoPR+ps3oeVcWeR87yNPXSHYJ3tzzQmpK7bGjZeNPHFnPDPAknD+eYVg/rmjxySENG40KSeklpyZC9zaz0MwX/z89WLO5RvT/rZ7OV8WOd/72H3yGm+fapJrTkhdsTVujJWVnOvmDOuCSkOlU54ZYEk4/9xfMP/c0WMSQho3l/7d+dChQ3jvvfdw4sQJ3LhxA7t370ZiYiK7fvTo0di8ebPZNgkJCdi3bx/7+vbt25g0aRK+/fZbuLu7Izk5GR999BG8vLzYNhkZGZg4cSL+/PNPtGzZEpMmTcLUqVPN9rtz507Mnj0bV65cQWRkJJYtW4ZHH32UXc8wDObOnYvPPvsMRUVFiIuLwyeffILIyEgnfyqkMQrxVWBpcrRV5nCwr0Iwv5xrXRuL3HGlQgIvqQjfnb6Gd4d1wVsJRjZL2Usqwtpf/sKURzpgwv0RVhnL0x/tjJfuj7DKIq/p+wjxVfDmmhPiTEK53kI55G14ssa1hgo885/jWJYcjWmDO0KjNcJLLkKeugLPfnYMn7/QG93D/ATzxoX6JCTM31Nw3PA9p4AQPufPn6/V9iqVCmFhYU7qDXE2l07KS0tL0a1bN4wdOxaPP/44Z5tBgwZh48aN7GuZTGa2fuTIkbhx4wb2798PvV6PMWPGYMKECdi6dSsAQK1WY+DAgRgwYADWrVuHzMxMjB07Fr6+vpgwYQIA4LfffsOIESOwZMkSDB06FFu3bkViYiJOnjyJrl27AgCWL1+OVatWYfPmzQgPD8fs2bORkJCAc+fOQS6niUlzx5dHvCgpCsv3XcB3mbnsctM36AxgFUH4eI8QvDbgHs784oWJUVjzyyVsP/6v1fIP91/EVwJ55LV9H47si5Caqk2uN1/W+MLEKADAuM3HOY/pLZcIHpcBBMeELVzPAzDhek4BIVzKiwsAuOG5556r1X4UCg9cuHCeJuYNlEsn5YMHD8bgwYMF28hkMgQFBXGuO3/+PPbt24c///wTvXv3BgCsXr0ajz76KN5//32EhIRgy5Yt0Ol02LBhA6RSKbp06YJTp05hxYoV7KT8o48+wqBBg/D2228DABYsWID9+/djzZo1WLduHRiGwcqVKzFr1iwMHz4cAPDFF18gMDAQe/bswTPPPOOsj4Q0QkJ5xDN3Z2JMXLjZpPzQpXwc/OsWvs+4gcNZ5hGEo+PCeTOTZ+3JxNzHuphNyk3Lpw7qaDYpN2Uwf/BUd7sn0kLvo6b7IqSmhHO98/F95g3eMbY0OVpw3Kx5tiee+fSY1TH7R6qgkIrw9v9O1/i4NCZIfdKXlQBg0P3ZaWgZ3tGhfahvXMHvG+YhPz+fJuUNVIOvKT948CACAgLQoUMHvPLKKygouPvL8ejRo/D19WUn5AAwYMAAuLu74/fff2fb9O/fH1Lp3brehIQEXLx4EYWFhWybAQMGmB03ISEBR48eBQBkZ2cjNzfXrI2Pjw9iYmLYNlwqKiqgVqvNfkjTI5RHnJZVgAClzGp5gLfMakIOAGKRu+C+DEaGc3lN8sj52HofDTGPnMZY0yGc6y0XzPW2lTXuo5Dw3vNRotU7fNyGOCacjcZYw+IVEIYWYR0c+lEGt3V194kNDn1T/ssvv+DBBx90dl+sDBo0CI8//jjCw8Nx+fJlvPPOOxg8eDCOHj0KkUiE3NxcBAQEmG0jFovRokUL5OZWfTOZm5uL8PBwszaBgYHsOj8/P+Tm5rLLqrepvo/q23G14bJkyRLMmzfPgXdOGhNbOd1cOd81zRu3tb4meeR8bLVtiHnkNMaajlrletuRNb56RA/ka3Rs/bbKq+rejqvZ/E/PtHXchjgmnI3GGCH1x6FvygcNGoT27dtj4cKFuHr1qrP7xHrmmWfw2GOPISoqComJidi7dy/+/PNPHDx4sM6O6UwzZsxAcXEx+1OXnxVxHVs53Vw53zXNG7e1viZ55HxstW2IeeQ0xpqOWuV625E17uMhRfsAL3QP80P7AC/2ZuvaHLchjglnozFGSP1xaFL+77//IiUlBf/73//Qrl07JCQkYMeOHdDp6vZPee3atYNKpUJWVhYAICgoCHl5eWZtDAYDbt++zdahBwUF4ebNm2ZtTK9ttam+vvp2XG24yGQyKJVKsx/S9AjlEcdH+CNPXWG1PK+kgjMT3GC0jm6rvi+xyI1zeU3yyPnYeh8NMY+cxljTIZzrrRXM9a5N1nhtjtsQx4Sz0RgjpP44NClXqVR44403cOrUKfz++++455578OqrryIkJASTJ0/G6dOnnd1PAMC1a9dQUFCA4OBgAEBsbCyKiopw4sQJts2BAwdQWVmJmJgYts2hQ4eg19/98+b+/fvRoUMH+Pn5sW1SU1PNjrV//37ExsYCAMLDwxEUFGTWRq1W4/fff2fbkOZLKI94UVIUdp+8Zra8f6QKD97TkjMTfNORbCxM5N/X54cucy6vSR65I++D8shJXRM6/+IiVILjQlSLrHHhPHEVZfQTQupNrf/21rNnTwQFBcHf3x9Lly7Fhg0b8PHHHyM2Nhbr1q1Dly5deLfVaDTst95A1Q2Vp06dQosWLdCiRQvMmzcPycnJCAoKwuXLlzF16lREREQgISEBANCpUycMGjQI48ePx7p166DX65GSkoJnnnkGISEhAIBnn30W8+bNw7hx4zBt2jScOXMGH330ET788EP2uK+99hruv/9+fPDBBxgyZAi+/PJLHD9+HJ9++ikAwM3NDa+//joWLlyIyMhINhIxJCTELFedNF9h/p68mcMzHu2EiQ9FstnK3nIxgu5MEhY/HmWWq+zuBszek4HFSdEo1d3NI/eUivD5oSykPBiJ0XHtrPLI3x7UqSqnvAZ5x1wZ6bZylQmpretF5Zw5+AD/OCos1eLjX7KwJCkKGp15Tv/SH85hfP8I86xxi/EBcJ/vphKWMI5nA1TflvLECSH1weFJuV6vx9dff40NGzZg//796N27N9asWYMRI0bg1q1bmDVrFp588kmcO3eOdx/Hjx83u2F0ypQpAIBRo0bhk08+QUZGBjZv3oyioiKEhIRg4MCBWLBggVlW+ZYtW5CSkoKHH36YfXjQqlWr2PU+Pj746aefMHHiRPTq1QsqlQpz5sxh4xAB4L777sPWrVsxa9YsvPPOO4iMjMSePXvYjHIAmDp1KkpLSzFhwgQUFRUhPj4e+/bto4xyAqBqolGTzPFFSVEQAZhmsW7b+BiMimtnFQ33UMeWmD20M2bszkSanVnoS5OjeScOXP2tvg1Nwkld4MsSN2WN852X84d3xRO922C6xbZxEf4YExcOH4VEcN9ykTveEjjfhbaVidwFxwohhDiLQ5PySZMmYdu2bWAYBs8//zyWL19uNoH19PRkc8KFPPDAA2AY64g3kx9//NFmX1q0aME+KIhPdHQ0Dh8+LNjmySefxJNPPsm73s3NDfPnz8f8+fNt9ok0L8VlOquLNiCcOT5zdyZmDulkta5MZ8TGI9lWyzuH+GDWnjM1ykKfvisDq0f0YL8NtNVfoW0Iqa3rReWC42FZcjSmf5XJeV7O/voMBncNstr2SFYB3AAsTY7GtF0ZAmOtM+/5vuTxKMF+pTwUSWOFEFIvHKopP3fuHFavXo3r169j5cqVZhNyE5VKhV9++aXWHSSkocvX6Kwu2oDtzHEG1jdturm5cW7TI9S3xlnohy7lI19jffM1X3+FtiGktorL+fPA07IKoNYaeM/Lw5fyef96Y09OOd9XP4cu5UNtY1tPmXV6kmlbGiuEEGeq8Tfler0ebdq0Qd++fa0eeW+2Y7EY999/f606R0hjoNbWLDtcaL1Wb51pDtjOS+bKQveQilDJMLicpzGro9VU2M50JsTZ1DbGg631QmPA0Xx/e47LNbZMSiv0grXqgHAtOyGEVFfjSblEIsGuXbswe/bsuugPIY2OUl6z7HCh9Xy5yLbyki2z0D2kIqwa0QPzvz1r9kRCU32uh1SEMh33ZMOb5/0QUhtKG+PB1nqhMeBovr89x+V6zgBQNcaUCilStqXz1pvbuneDEEKqc6h8JTExEXv27HFyVwhpnFReUocyx904/qiefrWIcxu+5aZ9WWahj40Px8Yj2VaPCD90KR9zvj6D2UM7c+6rf6QKKi/6Fo84n49CIngOK+ViznEEAP0iVchTa3m3tZVTbl0oVqV/pApKG9uWVnD/43X20M6YvecMb735TbVW8N6N4jIqfSGEmHNoUh4ZGYn58+fjiSeewJIlS7Bq1SqzH0KaEx8PKW/muFB2srfUejJw/nox5zZ8y+Mj/LEgMQr/O2H+lL3Ydv68dbKHLuWjZ5ivVX/7R6qwLDma/rRO6kSIr0JwPLTy8+AcR/0jVVieHI34CBVvXnhrPw/BfbdQSHjP91Y2tm3bwoNz255hvjicxX9vRmEp3btBCKkZh9JX1q9fD19fX5w4ccLswT1A1Y1qkydPdkrnCHElvlrQfwvLoL6TZ2zKHW/l54H3nux2N99bIYafR1W+t1DGMV82Mt9yywxxmcQdL6z/HcN7tML6UaGoMFRCJnaHsZI/1QgAynVGrB7RA/kaHdsvlZdwrSvf50E1s8QS3xhpYyMPPMRXYZXd7y0XI/jOeBHK0G/j74llydFQV9tWeee4AATP9zYCzxng2/bv/FLBz0CtNQiuL63Q46Zay/k7gxDSPDk0Kc/OznZ2PwhpULhqQYdGBeHtQR1584w/+vkvfJV+nV1evXaUq370elE5ZlhEwL3QNwzj+rUTzHKuftG+nKfB1cJyrDmQZbbv9aN6C74/b7kEPh72T575amMXJnbF/L3n8PP5PM73TZofocxvrmz+6ue2rRzzQKWcd9J6vajcKlKx+rlo63znG6cAOLdVyoW/6VbK+S+vHlIRvBUSTNlxyuq9Lk6KQpi/p+C+CSFNk0PlK4Q0ZXw53kk9WwvmGY+OCzdbLlQ7yneMsfHC2ebXCsvMlvPVswvVoNe0blwo1/yd3ZnoGKy0Wk41s83Tv4Vlgudvic46frD6uS207b8W5351trL36+Jc5Bt7QNUY8/PkXz97aGfM4XnuwDu7M3GTp36eENK0OTwpv3btGj7++GNMnz4dU6ZMMfshpDHjy/EOUMoE84zFIuvhVNOs8HJ9peAxSiz+JM5Xz37xhhqLk6KcUjculGuellWAHqG+VsupZrZ5spX5zZXNb1pnK2tcqBzEFdn7fGPPNMYClXLe9T3CfK1uwjZJyypAYSmNHUKaI4fKV1JTU/HYY4+hXbt2uHDhArp27YorV66AYRj07NnT2X0kpF7x5Y4L5RUD/FnIXLnffMewlZnMta8QXwVvvWxN68Y5+2Qjt5wvP5ryzpsfm+evwHqbWeMC55Otc7SuzkWhsSe0/uJNjeB+bdWjE1Ib58+fd8m2xDaHJuUzZszAW2+9hXnz5sHb2xu7du1CQEAARo4ciUGDBjm7j4TUK77ccb68YhO+LGSu3G++Y9jKTObLEOerl61J3Tgfvr6a8OVHU95582Pz/BVYbzNrXOB8snWO1uW5aGuMcdejC196ba0nxBHlxQUA3PDcc8/Vel/6CvprTl1waOSfP38e27Ztq9qBWIzy8nJ4eXlh/vz5GD58OF555RWndpKQ+mSqFT1k8efwPHUF4iP8kcbxZ+f4CH8YjNbfGPPVb/MdQyFxFzyGtwsu1nx9NfUp/WqR1XLKO2+eTJnffOcvVza/aZ23jW2FJqpeNrb1amCTXD9PqWB//Txp7BDn05eVAGDQ/dlpaBne0aF93Mg8ijPffAqDgf6aUxccqin39PSETlf1r6Tg4GBcvnyZXZefz13XR0hjwVcruvvkNcE8401HzFOJhOq3+Y6xIS0bCxP5j1Ep8KjxuiJUO7s4KQoXb6itllPeefNkK/ObK5vftM5W1rgp2pBLaYUBo+PCEWexbVyEP0bHhaO0omFNIAKVcizmea+Lk6IoFpHUKa+AMLQI6+DQj6cq2NXdb9Ic+vqgb9++SEtLQ6dOnfDoo4/izTffRGZmJr766iv07dvX2X0kxApfNjZf7u/1onIUl+vZ3GRltQxivkzlpcnRnLnFppxl03JTzvK0wZ0woX97u49t2lf1dR5SEeZ/ewYLE7uiXF/J5i0rJO6YtPUk5g/virAafB7OIlQ7+/6T3Wpdt07qn9CYAIBrhWVsnriPQgKvanniQttWzyKvnjVu2lZona1tebPyy/WYvC0dY+PDMTYunM3rT79ahMnb0rH1xZhafVZ1Mb7C/D0Fc9cJIc2PQ5PyFStWQKOpulFl3rx50Gg02L59OyIjI7FixQqndpAQS1yZ2Y90CsCsoZ0xc3em2Z+Ek7oH4/VHOvBmH7sBmMGz7sP9F7Hn1A2r5cv3XcB3mbnscr68br4+mfbjDmA6x7FnD+2CJ9Yd5UyM4KqN5csQd3ZWeF3WrZP6ZSsPXGi9BMDbAtvmFJRyjqnFd8Yb1zlvyubm23ZJUhREInfe89xHIUGZzmiV129Sm5ryuhxfQrnrhJDmx6HylXbt2iE6OhpAVSnLunXrkJGRgV27dqFNmzZO7SAh1fHlEXcIVuIdi8kvAIyJt34QD1AVOzZr9xmkZeXz5iKPjW/Hufzxnq3NlvPldfP1yXTswzzHXrD3LJYlR1u9d646bVfkM5PG7XpRuc0sfKH1ekBwW8tJ9d31/Of8O3dyyPm2TcvKx7T/8Z/nnjKxYGa4o/c30PgihNQnengQaVT48oh7hPpyZhyLRe682ceHs/J5v6Xiyx1PyypAgFLGudwyr5uvT/YcO8hiHV+dtivymUnjVlyut5mFL7S+TMcdDWprW1vnvFDGeYBSjsNZ/Oe5RmsQzAx39C85NL4IIfXJ7vIVPz8/uLlxP/jB0u3btx3uEGl+alKvyZdHzJuVbSP7mG87oW358sot9yW0b1vrS3VGpE6532adtqvymUnD4Eits60s8dpkjdvaVnC8CZyrtsZSiVaP9gFeTsnlr47GFyGkPtk9KV+5cmUddoM0VzWt1+TLI+bNyraRfcy3ndC2fHnllvsS2ret9Uq5GO0DvAS3r2rnunxm4lqO1jrbyhKvTda4rW0Fx5vAuWprLJm2dfb9DTS+CCH1ye5J+ahRo+qyH6QZslWvuXpED6sLLF9mdvrVIs7cX4OxkjcPuF+ECnlqLWff+HLH4yP8kaeu4FxumdfN1yd7jm1vTrFQhjhlhTddjowdEx+FxGYWvtB6Dyn3P0ptbWvrnBfaNk+tRb9IFWcpSV2e5zS+CCH1qdY15VqtFmq12uyHEHs4Uq/Jl5l98YaaM+N4Y9rfvNnHC5O6Ii5CxZuLvDHtb6vlCxKj8NXJa2bL+fK6L9xQY0FiV879zxnWGfe15z52TXKKhTLEKSu86apNrXOIr0IwD9xWXrjkzv/nWmc0VPLmhY/rFy54zhsNlZg9tAvn+t7hLbBgeNd6P89pfBFC6pNDkYilpaWYNm0aduzYgYIC6281jEbumltCqnO0XjPEV4H3nuzGmUe+/IlunPnJy5Kjoa6WLa68k0UO3M1NVpdX1eV6SUX47FAWxsS3w/j7I1ByZ7neWInXtp3EqhE9MOmhSKtjL0yKwpsD7/ZJJnbHtP+dxqLHo2EwMmzusljkhon/PYkVT0Xz5hTXJIddKEOcNE32jh2+88hWHnj19aZxUX0933hKzynE9F0ZWJYcjemDO0KjNcJLLkaeWou3dp7GF2N6s2PUMv8/PacQ0/6XgbXP9YTByLDHrT5e+Ma9M/B9VrbGV10/I4AQ0nw4NCmfOnUqfvnlF3zyySd4/vnnsXbtWvz777/4z3/+g6VLlzq7j6SJcrReky+nfPbQzpi554xVjS1Xhnj/SBU+SI5GmbGSM495YWIUVv5snlMeF+GP957sjoV7z+HnC7dsHmNApwAse6IbZu85Y5VTvvrZnpCK3DhzivlqhRckdsW8b8/iQLVjV894polA82Fr7CgVEsGac4Oxkjef31ZOuVzkjulfZXLu11chwdLkaGw4km22bVyEP5Y/EQ1PmZS3T34KCVY/2xPvfnPW6rhrRvaEXOSOt3aerpO8cFv1+Xy16vX1jABCSPPgUPnKt99+i48//hjJyckQi8Xo168fZs2ahcWLF2PLli3O7iNpokz1mlz46jWFcspn7M7krLHlyhA/dCmfc0IO3MkR32OdU37kToZ4xxAfu47RMViJWRYTctP+F+w9C5nEujZXqFZ45u5MdLY4tinj+SZPrS5pmmyNHU+ZmPc8mrYrQzCf31ZO+e1yPW8tu0wiwkaLCTlQNXY2pmXjt8sFvNtKxO6Yv/cs53Hnf3sW19XaOskLdzSLnDLMCSHO5tCk/Pbt22jXrmrColQq2QjE+Ph4HDp0yHm9I02aI/WaNc0pB7gzxAGgTGcU3IYvp5xrXzXNKU/LKuCMjxOqFRY6dmEpTQCaE1tjR6M18J5Hhy8J54XbyilnePp06FI+1AIZ6Id5Mv7ZbW0c11PGfYNpbfPCHa3PpwxzQoizOVS+0q5dO2RnZyMsLAwdO3bEjh070KdPH3z77bfw9fV1chdJU2arXtOyhrq0wsC5H1s5xhKxO9aP6o0KQyXkEhFO5hQ6nMfMta8Nadk1zilXaw1W9ajF5cIXcr59qrXcnwtpuoTurUjPKRTcVujctGdcpDwUgR6hvlZjwNZ5WJvj8j0fAKhdXrij97ZQhjkhxNkcmpSPGTMGp0+fxv3334/p06dj2LBhWLNmDfR6PVasWOHsPpImjq9eM6eg1KrudcuLMZz7sJVjLHJzwwubj7Ov4yL8MSQqWHAbvjxmrn2tGtEDYouHa9nOVhYjZVu62bdtW3nen619KuUODWXSiAnVM9uqORfMyLcjxzw9pxBrDmSxy0xjQKkQPg9rc1y+5wMAtcsLd/TeFsowJ4Q4m0PlK2+88QYmT54MABgwYAAuXLiArVu3Ij09Ha+99ppTO0iap5tqrdWEHACO/l1gFZkG3M0E5xIf4Y+jf1vXuHpIRYLb8OWUc+1r05FsGBnzP+zb6lMxR23ubzzvz7SNZRa6abm9ueakabBVz6wQOLf7RdqXF863HmA4a8Y3HcmGUi4RrHXPK7HO+DetM+Wn8x23tIL7m/La5oV72Xi/Xjz/4HXknhhCCBFSo0n50aNHsXfvXrNlX3zxBR544AG8/PLLWLNmDSoquH/pcjl06BCGDRuGkJAQuLm5Yc+ePWbrGYbBnDlzEBwcDIVCgQEDBuDSpUtmbW7fvo2RI0dCqVTC19cX48aNg0ajMWuTkZGBfv36QS6XIzQ0FMuXL7fqy86dO9GxY0fI5XJERUXh+++/r3FfiPMUluo460s3pGVjdFw4+llcDM9dL8bsoV2slveLVGF0XDg2pGVb7WvS1pNYmMifx7zpiPk2QvtKuzPJr44vO920/5StJ+1+f/0jVViUFIXz14ut9lWTXHPSNNiqZy7R6nnzwucP78KbF74wKQp6g0HwvJ3wxQnO46ZlFUCrNwrWuj9wT0vedSG+CizmOe7ipCi0beFRJ3nhpRUG3s9qdFw4b8kcZZgTQpytRn/znj9/Ph544AEMHToUAJCZmYlx48Zh9OjR6Ny5M5YvX46QkBC8++67du2vtLQU3bp1w9ixY/H4449brV++fDlWrVqFzZs3Izw8HLNnz0ZCQgLOnTsHubxqEjJy5EjcuHED+/fvh16vx5gxYzBhwgRs3boVAKBWqzFw4EAMGDAA69atQ2ZmJsaOHQtfX19MmDABAPDbb79hxIgRWLJkCYYOHYqtW7ciMTERJ0+eRNeuXe3uCxHGl+fLtVxTYUConwJrR/aEWORulhW+cO9ZvPdEd5TqjWbL3955CqtG9IBWX2mWFf7SFyewekQPBChl0GiN8JaLcVOtxbRdGdDqdXfzmu/UtJvymOcO64KJD0ayy40Mg8S1R1Cm4/7GTip2x77X+vFmp1fPZS4s1XLeCFamM2LytnR8PTEO7m5uVnX2ix+P5sw1J03X9aJyq+x9rV4PD6kIY+PDOWu7i8sNmLwtHWPjwzE2LhwVhkrIxO5Iv1qEPHUFtv9xBUuSoqDRGc3y+T/cfwHPxISjT7iSM4u8qKwCVwvLefuqLtejXUsvLE2Otjrng+9EBArdQxLm78mbY25rW1t4f/+U63k/q8nb0gVLyugZAYQQZ6rRpPzUqVNYsGAB+/rLL79ETEwMPvvsMwBA69atMXfuXLsn5YMHD8bgwYM51zEMg5UrV2LWrFkYPnw4gKpv5QMDA7Fnzx4888wzOH/+PPbt24c///wTvXv3BgCsXr0ajz76KN5//32EhIRgy5Yt0Ol02LBhA6RSKbp06YJTp05hxYoV7KT8o48+wqBBg/D2228DABYsWID9+/djzZo1WLdunV19IcJqmi0+f3gXfDGuD2btOWP2jfmjXQOx/InueGePeWnLwx1b4qMRPTB7zxkcrra8X6QK/3mhFxbsPWeV773lxb6QitzYB6JYsqx1v5yn4Z2QA4DewGDQJ4ftfH9d4SEVce6vTGeEu5sb2gd4Wa3jyjUnTRdvXnhiFP7zXC+sO3SZs7bbRyFGmc5ots5keI9ATB7QEdN58vkrmapzspWfB1pZbKvVC9+87C2XcN4LYpmnzzdpdTQv3Bah/fooJLyflek9CXG0T4QQYqlG5SuFhYUIDAxkX//6669mk+p7770XV69edUrHsrOzkZubiwEDBrDLfHx8EBMTg6NHjwKoKqfx9fVlJ+RAVY27u7s7fv/9d7ZN//79IZXe/aWZkJCAixcvorCwkG1T/TimNqbj2NMXws+RbPGjf9/GHIsJOQAk9wrFzD3WteadQnwwy2JCDlTFv83ec4Yz35svK5yPUJ1ufIQ/PCwi24Te35yvz2D20M6c+6J6VAJUTSSFcvSvFZbx1nZ7C9R2y90lnGPItF+pmP+7Glt11AqpiPNeEHvy9Osq99vWfj1lYqoNJ4Q0CDWalAcGBiI7u6qeVqfT4eTJk+jbty+7vqSkBBKJc+44z83NZY9p2QfTutzcXAQEBJitF4vFaNGihVkbrn1UPwZfm+rrbfWFS0VFBdRqtdlPc+RItniAt8xqgg0AAUoZ5zaO5JTzZYXzEarTHR0XDstYc6E+HbqUj55hvlSPWktNeYwV28z85s8aL9fx13ZrbOTzlwjEGtqqoy7R8vfZVp5+XeV+29qvRmug2nABTXmMEdLQ1Kh85dFHH8X06dOxbNky7NmzBx4eHujXrx+7PiMjA+3bt3d6JxurJUuWYN68ea7uRr2zrN00MgxnqYZQZjHfOr6s4gpDJVReUixLjuasHXck39vyfai1/HW68745i81j+uDbSXHssaVid6i8pLyTiXKdkepRa6kpjzFb/2AUGj8lWj3aB3hh8eNRKNEa2Hp0L7kYecX8NeGmbQHrZwSY7pEI8VWwNePV69yDfRW4mi28b6HxVle53/bst32AF41FHk15jBHS0NRoUr5gwQI8/vjjuP/+++Hl5YXNmzeblYVs2LABAwcOdErHgoKCAAA3b95EcPDdPOmbN2+ie/fubJu8vDyz7QwGA27fvs1uHxQUhJs3b5q1Mb221ab6elt94TJjxgxMmTKFfa1WqxEaGir8xhs5rtrNfpEqrBrRA5O3pZtNzOUCpSN8ecZ88WTeMjG2vNjX6jHdptrx/BLuP5vz5XtzvY+tL8Zw1p6qvKTY8mJfzP7mDOexR35+jHNi7i2XUD1qLTXlMWYrt1so81ulkPDWoy9MjBL8x6JQXfjSpChUArw1476ewpcUoRzzusr9tne/NBa5NeUxRkhDU6PyFZVKhUOHDqGwsBCFhYVISkoyW79z507MnTvXKR0LDw9HUFAQUlNT2WVqtRq///47YmNjAQCxsbEoKirCiRN3I7oOHDiAyspKxMTEsG0OHToEvf7utyX79+9Hhw4d4Ofnx7apfhxTG9Nx7OkLF5lMBqVSafbTlPHVbh6+lI9NR7IxNj7cbDnDMLw12nklFejHsY5vmyBfudWEHLhbO97KT2G1DV8GMd/74MsQX5YcLXjsZcnRVttQrapzNOUxJpQX3i/CXzBrHGJ3wXr0Nc/24N3WWy7mrQu/VlwuWDPuIRHO/BaaINdV7jfliddOUx5jhDQ0Dj08yMfHByKR9becLVq0MPvm3BaNRoNTp07h1KlTAKpuqDx16hRycnLg5uaG119/HQsXLsQ333yDzMxMvPDCCwgJCUFiYiIAoFOnThg0aBDGjx+PP/74A0eOHEFKSgqeeeYZhISEAACeffZZSKVSjBs3DmfPnsX27dvx0Ucfmf3L/7XXXsO+ffvwwQcf4MKFC3j33Xdx/PhxpKSkAIBdfSHCtZtpWQW4r535xdpTKuKt0b63rR9mD+tidYHX6gyYPdR6ucFo/UCT6scut0iNiI/wx5xhXVCqs/5zOt/7YDPEI8wv8EFKueCxgyxqf6lWldijjOdcj4/wx4LEKIT4KnjvbyjRGgTPSR+FlDenvNzAv62nTGyzHl3ovgutnj+9qK5yvylPnBDSWLj02dzHjx/Hgw8+yL42TZRHjRqFTZs2YerUqSgtLcWECRNQVFSE+Ph47Nu3zywXfMuWLUhJScHDDz8Md3d3JCcnY9WqVex6Hx8f/PTTT5g4cSJ69eoFlUqFOXPmsHGIAHDfffdh69atmDVrFt555x1ERkZiz549bEY5ALv60tzZqt2USdzxw2v92DpUTYUBk7cd56zRvnyrFGsPXMKqET1Qrq9ks5Q9pSLM//YMFiZ2NVvuBvBGDAJVdaPfv9bPLNd83KY/8cFT3axqZ/keFmLKEN/zahwqGYbNCrf1vkt1RqROuZ9qVQkvrgztojIDXt1yAsuSozFtcEdotEZ4yUXIU1cg65YGn/6ahfef7I7SalnjnlIR3tp5Cm8O7CiYY16i1WPuY11gMDIoKdfDWyGBWOSGCZuPY2FiV95t+e7pMCnROp75DdRd7jfliRNCGgOXTsofeOABMBaPJq/Ozc0N8+fPx/z583nbtGjRgn1QEJ/o6GgcPnxYsM2TTz6JJ598slZ9ae5s1W5q9ZVIrpbjvYWnRhsAtoztg49G9MDMPdZ12gsTo7Bg71mkVssd7xfBXbdu4i2XYPBHd48dF+GPuY91gVIhwZQdp8yOsW08/8ShTGeEyN0N9wR4s8su3BBOI1DKxZyZ44QA/BnaMx7thHyNDuM2H7faZvuLfbD8ie6ctd3Ln+gOXaURq0b0wMYj2Zw55kqFBI+sOMTZH2+FhHfbIVHBnNuw28prl/kN1F1tN9WME0IaOofKVwjhIlS7GR/hj6N/m//Z+yhPjTYABPsprB4cBNytie1kkTt+OIu7bt10bIXE/FQ35TlLRe5WxyjTGQXrYi3r0JUKiXAdrY0b9kjzJZShLRO7855XIX4eglnjHhIxNh7J5s0x9+S5ydpUU863LcB/H4hp25qMHUIIIXfRpJw4DV/tZr9IFUbHhWNDWrbZcr4a7bgIf1QYKh3KHbesW4+P8MeipChM3pbO2f5qYZnVcpGbm2BdrGV5S4XeyFv7O2dYF1QI1NGS5k3oPowKA39NuT1Z40LrNRz/8DSNlQqBmvJ8tU7wXC/TC9eU85WGEUIIcXH5Cml6uGo39cZKPP7Jb1ZlJaYa7Z0vx2Iqw9ypmRUjT621mdEsEbtj/ajeVrWyEnFV3bqpTtZLKsLErSeR8S93iUlpBcdj7vVGvLXztN11sUXleoz/4jhn7e+znx3D5y/0tjoGIYDwfRhFZUZM2vYn53lla3yUlOtt1pQvTY5GidbAjlNvuRit/TzwR/Zt/v3qDHjj82O85/rHI3vVqqacEEKaM5qUE6ezrN28cEPNewNmmc6IojI9Rn7+O7ssLsIfs4ZwP4LeROTmhheq1dqaamW95WIMWnm3dnz9qN68E3KAO+tZJnavUV2sUi7hrf3lak+IidB9GF5yEe959cNr/Ti2uEuoLtxUU97az4OnT/yXBZnYXfBcV8rFta4pJ4SQ5orKV0id8/O0jl8z4ao1P5JVAA+pqMbbcNXKpl8t4s96jlRxZj0LbcOVa0w5yMRRQudOaQX/vQ1eNsaHUF34piPZ8JLxT7yFxmueWot+Aue6nyeNBUIIcRRNykmdC1TKsTgpyupC3y+Cu9YcACZtPYmFiTXbxlQrW92568WYPbSL1USif6QKy5OjER+hsjrG+evFWJQUZXeuMeUgE0cJnTvhLTw4x018hD90lUbO8WGqC9dUCNeUlwg87p5vvMZH+CM+ouqc5jvXA5VyGguEEOIgKl8hTseVuRzm74kPnup+Nw9cLoa7G5D4sXWtOQBk/KtGhUF3t+71To24G8BZn25SUq5na81NtawjPz+GbeP7wt3NjTOj2HQMU366153a2vee7GaWX+7nIUWgUm6Va+7nIUWIr4K3PSFcY8J0/oX4KrA0ORrF5Xr2HFQqJAj0rXoK7fInulmtu15UjvnfnmZz/E3jQyFxx6StJzHTRvlXiY1s/TB/TyxLjoa62rjwlovR6k7Ji9C5bmsscI0fe8eJ0OdICCGNHU3KiVPxZS4vTY5GiK/C7OJ7OU/DO7n2kIogFUswbVeG2Td+302K590GqKqlferTY1bL3d3cOLPC/ykotXocuenbxo9+/gtfpV83ex8LErti3rdncaBaRrqp/YK95/Dz+TzO902aL1tjIqeglDNvfElSFEQid85t5w3vgqxbpXjg/V85j2krhtNWbTdfnxYnRUEqcsfbAu+H7/0uT46GzljJu98wf0/BPtn6HAkhpLGj8hXiNEKZy9N3ZaC4TGe2XKiedvbQzpjDkVOeq9YK5yBLrfOX+WpZrxeVW03Igao/78/cnYnRceaZ54cu5WPm7kx0tshIN7XvGKy0as/1vknzYWtMXC8qt5qkAlXnVFpWPqb9j3vbOV+fxewhnTiPaU9euLfAzZw31VrePr2zOxNXbpfxvp+bai3v+71yu0xwvzc57u8wqenvFkIIaYxoUk6cRihz+dClfORrzC+cQvW0PcJ8cZijJnbargzenORFSVHY+nuO1b74almLy/WCdbdikfXwEMpI51rO9b5J82FrTAidgwFKOQ5ncW97+FI+urb24c0DdzdUYhFPXfiipCje5BUAKCzVCY4LTxn3g4cOXcpHYSn/+/WUiQT3W1jKP05q+ruFEEIaIypfITbZWwMqlLnsIRWhkmFwOU9jVg/KV3/6T0Ep537yNTqM/PwYdr4UC62h0iyPfOkP5/D6Ix3xRO9Qztpxq/7akfXMpcJQWaPltup3SdPANU7KdML/7dUCeeI6I/f5ZHKtsBw9wvx488C7h/nxZpEL9kngJlAA0Gj5y8eEthXazta2Qr9bABpjhJCmgSblRJBQballDShf5rKHVIRVI3pg/rdnzb79fqRTAGYP7YyZe85Y1Ym+w/OneaBqYv53filnVvKUgZ04a8e52Ky75VnPlW0utJyymZs+vnGyMDEKKi8p7ze5Ph78eeIJXQIFjykVudvMA7c1AecilFMOVOWnO7Kt0Ha2thXKcwdojBFCmgYqXyG8bNWWWtaA8tWIj40Px8Yj2VblKB2ClZixO5OzTjQ9pwj9BGpi068WWS2vaQ6yj0IiWHdr4Pimku/YzuoTaXyExsmsPZlY82xPzu36R6rgLePPEz9zrZg3E5wvYx+4c2+FjYm1EFvPFeB6Ci5gO6dcKHc9PsIffp7844SeBUAIaQ5oUk542aottawB5asRv6+dP+d+eoT68u5/wd5zmJ/Ylbcm9uIN86d0OpKDHOKrEKy73XTEPAu9f6QKi5KicP56cZ31iTQ+tsaJj0LCm9ut1Vfyj4HvzmPB8K6c2y4Y3hVBPgremvLSCuESFCFCOeWLk6LQtoWHQznlQrnri5OiBGMR6VkAhJDmgMpXCC9btaVc60N8FVg9ogfyNTq2jrW4nPtP9xWGA0aAUAAANutJREFUSkS3UrJZy+ryqlpzhcQdk7elo7xCb5VTbqqJff/JbmbHMNWO1zTHuI2/J5sDbdqXj0KCEF8Fpg3uhAn921vV0i9+PNosb93Ps2o5X59I02ZrnJRoDVZjwnRupOcUok9bX7z/ZHeU6ozsGPCUivDWzlPQaHWc91zkqcsxcetJjI0P560pBxzP9eZ6roDpPAds55TzvV8AgvsVYmu/hBDS2NGknPCyVVvKt97Hw/xCeTlPw9nOXyHGqhE9MXOPdS3uqhE9IQKscsqr17NbXowdzTEO8VVYra9J3jrf+ybNgz3jhO/cUCkkWP5Ed8569OVPdIcYwFs7T1udh/OHdwUAwZry2uZ6ByrlnOe5PfsVGgt8+7UHjTFCSFNG5SuEl63aUqEa0Or46kGD/TysJuTA3Vpcjd76UeF89ezOzDGmTGRSE7UZJ25id8ExoGMYnpzyM5g9lPupnf0jVfCSi+vkHKaxQQghdYe+KW9m+P6czbXcVFv6zu5MpHF8W23vt10+HlIsT47Gldtl8JSJoNEa4S0Xo1RnFKzFZeDGu66wVAeN1sD2t7LSevJiYsoxtvcbtnyNDif+KUTKQxFWMXVf/pGDojI9Peq7GeIbO/aME75Y0RKt9T88TdKyCnhjNg9dysfMIZ3QP1KFQxbfWC9LjkZphaHW44Hr/dqTF+5IGZm96mq/hBDSENCkvBnh+7PzwsSumM/ziHhbtaX20hkrsfrAJbMJyJfj+wpuw5cTDgBF5Xo88+kx9vX6Ub2F91WDHGNNhZ4zpu6hji2x5cW+mLUn0yxJhh713fTZKtmQityR8lAkpg3uCI3WCC+5CKUVRshF7oKxoo5m5QNAuc4oWKsuuF8b44Hv/U5+OFJwu9IKfa3LZmraJxp7hJCmgspXmgmhPzu/Y+MR8YFKOToGK9EnvAU6BitrPCHni4zztJFbzJcTDoD3qYK8+6pBjrGPQsIZU9c5xAfz9561inakP903bbZKNm6qtXh7Vwae+fQYhq0+ghGfVf3vM58ew982Hi3vaFY+AHhIq2rV2wd4oXuYH9oHeLHfGtcm11vo/ep4vrk38VFIqWyGEEIcRJPyZkLoz851/Yh4vsi4PHWFYC2uGxjedXnqCrNl6VeLrOLhTGqaY6w1cMfUCUU40qO+my5bJRu1ebS8p1QkOAb4HkgVF+EPiYi7vAuoXa630Pv97e8C3uz0/pEq6IyVNstbHGFP2QwhhDR2VL7STNh6TLUjj4i3tz6d79jTdmXgywl98Wd2IQKUMrZ2+2axFnER/nBjqiYmlnW6c4Z1wc/nc7F+VG92m8x/i/Dq/e0x6aFIs7p1TYUB4S08alR3qi7njrjj+4xM6FHfTZOtsaPWGuAhFWFsfLjVPQgarRH3BHhh7XM9YTAybOShWOSGif89iXxNBRYlRWEmRz36oqQo5BaVIS7CPOc/LsIfY+LCUVyuw7+FZVBrDVCX6+FzJzK0lZ8Hm+s9fVcGZ825UN230PvdkJaNbyfFY943Zzn3m8vzQCMTR8eIrf8GNPYIIU0BTcqbCVt/zq7pI+K56jsf6RSA2UM7Y+aeM2bLv5sUz7mPFh5SiN3d8X3mdbOSkH4R/rivvT8kDGNVz+4pFSE7vwxHsgqwfN9f7DaDuwZieLdWnPGKi5KiBN+7Jb6IO77PyIQe9d002Ro7SoWY8x6EuAh/DO8RjE9f6M15Xn76Qm8YGCPa+HvezeO/UxvuLRdDZzBgzOYTnFnk8745i/8bF4OpHJGhi5Ki0MbfUzDXW6g+W+j9lumMcAN491um437ap4mjY6Q25TiEENJYUPlKMyH05+yaPiKer76zQ7ASM3ZnWi03Mgznn+jXPleVUW5Zo304qwAz92TCKHa3qmeXSkT4z+HLViUBT/QK5Y2Wm7k7E/8WlnG+dy58EXfpV4sESw1q82hz0nDZKgVRyrnvQTiSVQC5u0gw8lAurjpnWvt5oFOwEn3C/dEpWInWfh7wlEnRM8wXaw5kYdzm43h1y0mM23wcaw5k4b0no+0637lqzm3VZ3vJxYLv1//ON+pctexecnGdjJHalOMQQkhjQZPyZkLoMdWLa/iIeL76Tr6a6+JSPWYP7WJ1sTYYGcF62xKOJyVqeCLkApQywX3ZeupidXyPGb9wXY3ZQ7vUyaPNScNl6xHvWj1/tKfGRuwn1zluIvS4ex+F1OHz3VZ9dmmFweFH2pdWGDA6LtzpY8TWfwOKRSSENAX01V4zIvTnbKFHxFvWnhaX66DykmJZcjQClLK79dtaA+dyqdgdb+04hYVJUXhH5I6SO3W1NuPgOOpE+WpLNVrhP5vXtOY0zN8Ty5/ohuJyPVuvKxO744UNf2B4j1aCjzYnTU+Ir4L30fLpOYW8deO3bdyAaDov+eq7uc5DpUKCq7eF//IjdL7brJEv16NdSy/e9yukuFyPydvSOUtuajtGhH5/EUJIU0CT8maG7zHVfMu5ak93TIjBlhf7Yv7es2bf1u18iXt5fIQ/PhrRAwv2nsOBC7fY5T+81k+wr1x1ony1pV624hVrWHPK9b77Raow97EumLwtnbN2lupamy6hGuwWCglv3fjMIdxP3TTxlksE9+0GcK6b8Wgnm/vlY7tGXrhPQpngSrkEZTqjWW29vf2yB9/vKUIIaQqofIXw4qs9lUvFVhNvAPD1lHEuT8sqwOw9Z9A5xMdsuVjkJlh/6s1Rf8pXW2orXpHv5k0ufO/78KV8bDqSjbHx4VbbUF1r02WrBlskduet7y4u19s8x4X2ffCvW5zrbO1X6Hy3VZ/tKRPuk1AmONV+E0KI42hSTnjx1Z66ublx1rPaqhG3zEKf+N+TWJjIXTO7KCkKrf08rPbDV1u6++Q1LOKpv12UFIVWHPviYyvT/b525segutamzVYNdgnPfQ4AkLJV+Bw3GAyC+w7wljm0X6Hz3VZ9tkYr3CehTHCq/SaEEMc16PKVd999F/PmzTNb1qFDB1y4cAEAoNVq8eabb+LLL79ERUUFEhIS8PHHHyMwMJBtn5OTg1deeQW//PILvLy8MGrUKCxZsgRi8d23fvDgQUyZMgVnz55FaGgoZs2ahdGjR5sdd+3atXjvvfeQm5uLbt26YfXq1ejTp0/dvfk6wle7ykWt1XPWiJfpjJzLS3ja31RrMW1XhlXO9195Gkz44jjWj+oNjc6IknI9vO9kLXNNyE2EakuXJUdDXS1aTnknt7kmbNXcyiUipE65n+pamzjTWCko1WHj6HtRyTAQubmhTG9kc8g3pGVDXS583t8u1WJJUpTZOe4lFWHnnzmIuydAsA982fj5Gh00Wp3D57vQGErPKRTc1tb9GVT7TQghjmnQk3IA6NKlC37++Wf2dfXJ9BtvvIHvvvsOO3fuhI+PD1JSUvD444/jyJEjAACj0YghQ4YgKCgIv/32G27cuIEXXngBEokEixcvBgBkZ2djyJAhePnll7FlyxakpqbixRdfRHBwMBISEgAA27dvx5QpU7Bu3TrExMRg5cqVSEhIwMWLFxEQIHxRbUhqWifqq5Bw1ojz1ZTvez2et6Z8y4t9kV9i/WCRv/I0UGsNGLI6zay9KWuZD19taSs/D7QS+AzsYavm1kchQfsAr1oehTRkXGMl/k6CyFs7T6NMZ0RchD9WjegBX0/ucWI6793cGEzfbV1vvjAxChVGG7neMv5f0QqppFbnO98YckYmONV+E0JIzTX48hWxWIygoCD2R6Wq+rNocXEx1q9fjxUrVuChhx5Cr169sHHjRvz22284duwYAOCnn37CuXPn8N///hfdu3fH4MGDsWDBAqxduxY6XdWfYNetW4fw8HB88MEH6NSpE1JSUvDEE0/gww8/ZPuwYsUKjB8/HmPGjEHnzp2xbt06eHh4YMOGDfX/gTjIVl0sV52oTCLirBHnqyn3lHAvT8sqwIK9Z9HKz3riHx/hDyPDWLWfuTsT14vKa/QenYXqYps3vrGSllWAjdXuKTiSVYBNR7LhyTMeTOe9QizizSn3lArneof5c3/rXZfnIZ3/hBDiGg1+Un7p0iWEhISgXbt2GDlyJHJycgAAJ06cgF6vx4ABA9i2HTt2RFhYGI4ePQoAOHr0KKKioszKWRISEqBWq3H27Fm2TfV9mNqY9qHT6XDixAmzNu7u7hgwYADbhk9FRQXUarXZj6vYqovlqhNVl+s5a2X5asptZTKX683/FB8f4Y85w7qguNT6z+Gmm+RcgepiG4+6GGNCY+WIxb0RpqxxofNew/OUS9O2Qrne5XpjvZ+HdP6T6hrSdYyQpq5Bl6/ExMRg06ZN6NChA27cuIF58+ahX79+OHPmDHJzcyGVSuHr62u2TWBgIHJzcwEAubm5ZhNy03rTOqE2arUa5eXlKCwshNFo5Gxjqm3ns2TJEqua+PpyU601yxi29dCO4nI9LudpzGrN1VoDQv0UWDuyJ8TV8sXd3IDoVkp88HR3s1xme3LHv3+tH7sfvbES4zb9yRvvVtNscaBmNfNCqC62cXD2GCsu0+G2QLoIAHjJxNg7KZ6tGbd53gusL7GR671pzL21Og8dHQ90/hMTV17HCGluGvSkfPDgwez/j46ORkxMDNq0aYMdO3ZAoeDPym0oZsyYgSlTprCv1Wo1QkND6/y4OQWlmGFRw7ptvPBDO/TGSjy84lf2df9IFWYN64QvxvXBrD1nzPb1TO/WWDWip1UMnD2544M/Osy+jovwx9zHukDs5sbbviYczVbmQ3WxDZ8zx5jp/BnHEXlZXbneiKc/PcbWjFdalF9Z8lbwn8feCtu53o6eh7UdD3T+E8B11zFCmqMGX75Sna+vL+655x5kZWUhKCgIOp0ORUVFZm1u3ryJoKAgAEBQUBBu3rxptd60TqiNUqmEQqGASqWCSCTibGPaBx+ZTAalUmn2U9duqrVWE3IAKNMZBWtXW1jUiR66lA+ZSGQ1IQeAcf3bceYye0lFgsfwkpo/4MdUk2tZU25q7yMwmbHkSM08afycNcaqnz8tPKXCY8WzaqyYasa95cJ14ZbnffV1trblyuq3B40H4iyuuI4R0lw1qkm5RqPB5cuXERwcjF69ekEikSA1NZVdf/HiReTk5CA2NhYAEBsbi8zMTOTl5bFt9u/fD6VSic6dO7Ntqu/D1Ma0D6lUil69epm1qaysRGpqKtumISks1XHWt4rc3ARrVw2V1hPjMp4acb488nnfnhHMTp737RmrbdKyCuBhMWkxta/Jt9uO1MwTYlL9/BG5Q3CsiKr91kzLKoDeYBDOIq+0/gexaZ1RYNuFSVHQGoTLzux5P5ZoPBBCSMPUoMtX3nrrLQwbNgxt2rTB9evXMXfuXIhEIowYMQI+Pj4YN24cpkyZghYtWkCpVGLSpEmIjY1F3759AQADBw5E586d8fzzz2P58uXIzc3FrFmzMHHiRMhkVQ/lePnll7FmzRpMnToVY8eOxYEDB7Bjxw589913bD+mTJmCUaNGoXfv3ujTpw9WrlyJ0tJSjBkzpl4+B6G6UMt1JTy142V6I97aeZqzdnX5Dxfw+aje+OG1fmx9uJdUhKIyLYZ0DcD0wZ2h0RnN1j3TOwTj+keY1ZSLRW7YcDiLM5N53rdn8PMF7kmCVOyOH17rx9au+igkNS43sZUt7kh9Omk+qmfya7RGzPvmrNm9FIHeEojcRew4+OG1fvCSinDkr1zklejx2aHzvOf9hPsjsDQ5GiXV8sRNWfx/ZN/GrN3pWPtcTxiMDLutWOSGCZuPY2FSFNDSsfcjhMYDIYQ0PA16Un7t2jWMGDECBQUFaNmyJeLj43Hs2DG0bFl1lfrwww/h7u6O5ORks4cHmYhEIuzduxevvPIKYmNj4enpiVGjRmH+/Plsm/DwcHz33Xd444038NFHH6F169b4/PPP2YxyAHj66adx69YtzJkzB7m5uejevTv27dtndfNnXeCrC12WHA0GsFq39UXu2nG5RMRZuxrqp8AX4/pYlbzER/jjvcQoTB3UmTdj+eODl7Dj+L9Wy6/dLsOI9X+wy9eP6s07IQcAX4W01rnfzshWJs1X9Uz+WUM64fNR97IxhwM6qjBraFfeceDGGPHzhXz8fOEg577fTOjE+zAspVyMv/I0eGTFId71jqDxQAghjU+DnpR/+eWXguvlcjnWrl2LtWvX8rZp06YNvv/+e8H9PPDAA0hPTxdsk5KSgpSUFME2ziZUF3rwr1v4PuMGDmeZr/vt7wLER/gjzaK8hGEYzuVrR/bkrBtPyyqAwQ14h6M+3ZSxPPexLmaTctPyhYldzdqnXy3iPDbgvNxjU7byIY4/2VO2MrFFJhFh1tencSSrAAqJCDOrjYm5w6wn5MDd831pcjTv+W2rLtzvTv0637Z+no6dtzQeCCGk8WlUNeXNjVBdaIC3zGpCDgAb0rIxOi4c/SLMM4Y9pCLOOlmJyJ03Y9lW7rjBaF2HzpVHfv56MRYlRdVp7jFlK5PaqJ7JX66vNDvvbY2DEq1wTbm7oZJzWwAIVMqxOIl728VJUQhUyh16PzQeCCGk8WnQ35Q3N5b14UaGgYe0quzEUgXPhb5MZ8T0XRnYOr4vKgxGaLRGeMnFKNUaOPOQ1eV6eEhFGBsfjh6hvqgwVEIuEeFkTqHD+cslWj1njXhd5x5TtjKxpXp+v4+HGN4yCcp1RhSX67FlXB+08lOgtMKIdc/1Qms/BeQSdxTYuCmypFyPNakXOWvKl/5wDuP7RyBEYPswf0988FT3u88VkIvh5yl1eEJuQuOBEEIaF5qUNxBcteP9IlVYNaIHJm9Lt5qYyyXcMWseUhGWJkdjwbdncbjat3tbx8dw1pTve70fVo3ogY1Hss3WxUX4Y0hUsGCf+fKXveUSdAq2js2qj9xjylYmfKrn93tIRXfO+3M4klUAlZcUW17sa1a2AlSNg1lDOgvu11shwXdn8vDdmTzO9VMGcj8cq7pApbzWk3AuNB4IIaTxoPKVBoCvdvzwpXxsOpKNsRwPM/HgyQQfGx+OjUeyzSbkAFDOk1PuIRFh45Fsqz/PH7nzmHuhDGWxyPqhP7XJViakrljm95vGien1suRo9sbO6uwZB95ysVWZiAnVbxNCCLEXTcobAKHa8bSsAtzXznxC0D9SBT9PCWeN+H3t/GuUU15SYeCtl03ZelKwVnb9ob85l/MlTRDiKpb5/T1Cfc1eByhlDo8DmaGS6rcJIYTUGn2l2QDYyhSWS0RInXK/WV3oxZsaTN+VgWXJ0Zg+uCNbO67lqD8H+HPKNVr+h5Pka3T4+1Yp5j7WxSpDedLWk1j+ZDeMigu3yl4mpKFRaw1m9054SM1/9Wm03OMGqBoH2fmlWJjYFeX6SrOa8R/P/Ive4S3RvaUX1W8TQgipFZqUNwC2MoV9FBKrHG8fhRhLk6OxwaL05LtJ8Zz7kIndOWvKv50UJ3hsBgxvhjLDgLN2nJCGxkchNrt3Yv2o3mbrveTc92iYVDIMHnj/VwDAD6/1w+CPDrPrUqdU3cZJ9duEEEJqg8pXGgBTpjAXvppUb7mEsxY8V63lrH81ZYVbylNX8NbL9otUIU+t5VwXH+EPH54bPQlpaCzHS/rVIrNSLqFxEBfhj/SrRQCqznuF5O6vTaoZJ4QQ4iw0KW8AHMkULufJTp62KwOzh3axmmCYssItl+86cZVzeXyEPxYldkVchIq3ljbEV1Gj90mIq1iOlw1p2RhT7R4LvnETF+GPMXHh2JCWzZ73k7dVPWiMasYJIYQ4E5WvNBA1zRTmq0PP1+gw8vNj2PlSLLSGSquscL48ZKGc5OVPdENxud5qX4Q0FpbjpUxnNMvt95ZLIBW5YWlyNEq0BmjuPCtAInLH7dIK7HrlPnjLxag0VGL+8K5UM04IIcTpaFLegNSkJlWoDj1fo0MlT703Xx6yUE5yiK+CJuGkUeMaL9XvsUidcj/CW3pZtQGAdhbLw5zfPUIIIYTKVxorR+rQCWmuaLwQQghp6GhS3kg5UodOSHNF44UQQkhDR+UrjVhN69AJac5ovBBCCGnIaFLeyFE2MiH2o/FCCCGkoaLyFUIIIYQQQlyMJuWEEEIIIYS4GE3KCSGEEEIIcTGalBNCCCGEEOJidKMnIYQQQgipV+fPn6/V9iqVCmFhTetxbjQpJ4QQQggh9aK8uACAG5577rla7Ueh8MCFC+eb1MScJuWEEEIIIaRe6MtKADDo/uw0tAzv6NA+1Deu4PcN85Cfn0+TckIIIYQQQhzlFRCGFmEdXN2NBoVu9CSEEEIIIcTFaFJOCCGEEEKIi9GknBBCCCGEEBejSTkhhBBCCCEuRpNyQgghhBBCXIwm5YQQQgghhLgYTcpraO3atWjbti3kcjliYmLwxx9/uLpLda64TIfLeRqk5xTi8i0Nist0ru4SIXWOzntCCCH1iXLKa2D79u2YMmUK1q1bh5iYGKxcuRIJCQm4ePEiAgICXN29OnG9qBzTdmXg8KV8dln/SBWWJkcjxFfhwp4RUnfovCeEEFLf6JvyGlixYgXGjx+PMWPGoHPnzli3bh08PDywYcMGV3etThSX6awmJgBw6FI+pu/KoG8OSZNE5z0hhBBXoG/K7aTT6XDixAnMmDGDXebu7o4BAwbg6NGjnNtUVFSgoqKCfa1Wq+u8n86Ur9FZTUxMDl3KR75GBx8PaT33ipC76mKM0XlPyF2N/TpGSGNC35TbKT8/H0ajEYGBgWbLAwMDkZuby7nNkiVL4OPjw/6EhobWR1edRq3VC64vsbGekLpWF2OMzntC7mrs1zFCGhOalNehGTNmoLi4mP25evWqq7tUI0q5RHC9t431hNS1uhhjdN4Tcldjv44R0phQ+YqdVCoVRCIRbt68abb85s2bCAoK4txGJpNBJpPVR/fqhMpLiv6RKhzi+FN+/0gVVF70J3ziWnUxxui8J+Suxn4dI0RITk4O8vO5yxXtpVKpEBYW5pT+0KTcTlKpFL169UJqaioSExMBAJWVlUhNTUVKSoprO1dHfDykWJocjem7MswmKP0jVViWHE11taRJovOeEEKavpycHHTs2Anl5WW12o9C4YELF847ZWJOk/IamDJlCkaNGoXevXujT58+WLlyJUpLSzFmzBhXd63OhPgqsHpED+RrdCjR6uEtl0DlJaWJCWnS6LwnhJCmLT8/H+XlZYgZOxfK4LYO7UN94wp+3zAP+fn5NCmvb08//TRu3bqFOXPmIDc3F927d8e+ffusbv5sanw8aDJCmh867wlxXG3LAs6fP+/E3pCmqjbniWlbZXBbtAjr4Kwu1QpNymsoJSWlyZarEEIIIbXlrLIAANBX0HMBiLXy4gIAbnjuuedqva+GdI7RpJwQQgghTuOMsoAbmUdx5ptPYTAYnNs50iToy0oAMOj+7DS0DO/o0D4a4jlGk3JCCCGEOF1tygLUN644tzOkSfIKCGtS5xhNyusRwzAA6IlohNSUt7c33NzcbLajMUaIY5w5xjQaDQCg+NrfqDQYHeqPJu/fquPkXnE4kpH2Qfuo632U5P5TtS+NxuZ1x54x5saYRhipc9euXaOnoRHigOLiYiiVSpvtaIwR4hgaY4TULXvGGE3K61FlZSWuX79u9zcSjYFarUZoaCiuXr1q1y/0poLed/2+b3vHjD1jrLn+t3MEfVb2aQqfE40x16DPyj5N4XOyZ4xR+Uo9cnd3R+vWrV3djTqhVCob7UCpDXrfDUtNxlhDfQ8NEX1W9mkOnxONsbpBn5V9mvrn5O7qDhBCCCGEENLc0aScEEIIIYQQF6NJOakVmUyGuXPnOnzncmNF77vxvu+m8B7qC31W9qHPyRx9Hvajz8o+zeVzohs9CSGEEEIIcTH6ppwQQgghhBAXo0k5IYQQQgghLkaTckIIIYQQQlyMJuWEEEIIIYS4GE3KiU2ffPIJoqOj2dD+2NhY/PDDD+x6rVaLiRMnwt/fH15eXkhOTsbNmzdd2OO6sXTpUri5ueH1119nlzXF9/7uu+/Czc3N7Kdjx47s+sb+nteuXYu2bdtCLpcjJiYGf/zxh6u75HKHDh3CsGHDEBISAjc3N+zZs8dsPcMwmDNnDoKDg6FQKDBgwABcunTJNZ11oSVLluDee++Ft7c3AgICkJiYiIsXL5q1aezjo7aa2vhyxti4ffs2Ro4cCaVSCV9fX4wbNw4ajcasTUZGBvr16we5XI7Q0FAsX77cqi87d+5Ex44dIZfLERUVhe+//77GfakrzhobOTk5GDJkCDw8PBAQEIC3334bBoPBrM3BgwfRs2dPyGQyREREYNOmTVb9sXUeNthxyhBiwzfffMN89913zF9//cVcvHiReeeddxiJRMKcOXOGYRiGefnll5nQ0FAmNTWVOX78ONO3b1/mvvvuc3GvneuPP/5g2rZty0RHRzOvvfYau7wpvve5c+cyXbp0YW7cuMH+3Lp1i13fmN/zl19+yUilUmbDhg3M2bNnmfHjxzO+vr7MzZs3Xd01l/r++++ZmTNnMl999RUDgNm9e7fZ+qVLlzI+Pj7Mnj17mNOnTzOPPfYYEx4ezpSXl7umwy6SkJDAbNy4kTlz5gxz6tQp5tFHH2XCwsIYjUbDtmnM46O2muL4csbYGDRoENOtWzfm2LFjzOHDh5mIiAhmxIgR7Pri4mImMDCQGTlyJHPmzBlm27ZtjEKhYP7zn/+wbY4cOcKIRCJm+fLlzLlz55hZs2YxEomEyczMrFFf6oozxobBYGC6du3KDBgwgElPT2e+//57RqVSMTNmzGDb/P3334yHhwczZcoU5ty5c8zq1asZkUjE7Nu3j21jz3nYUMcpTcqJQ/z8/JjPP/+cKSoqYiQSCbNz50523fnz5xkAzNGjR13YQ+cpKSlhIiMjmf379zP3338/Oylvqu997ty5TLdu3TjXNfb33KdPH2bixInsa6PRyISEhDBLlixxYa8aFsuJR2VlJRMUFMS899577LKioiJGJpMx27Ztc0EPG468vDwGAPPrr78yDNP4x0dtNfXx5cjYOHfuHAOA+fPPP9k2P/zwA+Pm5sb8+++/DMMwzMcff8z4+fkxFRUVbJtp06YxHTp0YF8/9dRTzJAhQ8z6ExMTw7z00kt296U+OTI2vv/+e8bd3Z3Jzc1l23zyySeMUqlkP5upU6cyXbp0MTvW008/zSQkJLCvbZ2HDXmcUvkKqRGj0Ygvv/wSpaWliI2NxYkTJ6DX6zFgwAC2TceOHREWFoajR4+6sKfOM3HiRAwZMsTsPQJo0u/90qVLCAkJQbt27TBy5Ejk5OQAaNzvWafT4cSJE2Z9d3d3x4ABAxp8310pOzsbubm5Zp+bj48PYmJimv3nVlxcDABo0aIFgMY9PmqrOY4ve8bG0aNH4evri969e7NtBgwYAHd3d/z+++9sm/79+0MqlbJtEhIScPHiRRQWFrJtLK9BCQkJ7HEa2jh1ZGwcPXoUUVFRCAwMZNskJCRArVbj7NmzbBuhz8Ge87Ahj1OxS49OGo3MzEzExsZCq9XCy8sLu3fvRufOnXHq1ClIpVL4+vqatQ8MDERubq5rOutEX375JU6ePIk///zTal1ubm6TfO8xMTHYtGkTOnTogBs3bmDevHno168fzpw506jfc35+PoxGo9kvfKCq7xcuXHBRrxo+039Xrs+tof83r0uVlZV4/fXXERcXh65duwJour8T7NEcx5c9YyM3NxcBAQFm68ViMVq0aGHWJjw83GofpnV+fn7Izc21eRxbfakvjo4NvvdoWifURq1Wo7y8HIWFhTbPw4Y8TmlSTuzSoUMHnDp1CsXFxfjf//6HUaNG4ddff3V1t+rU1atX8dprr2H//v2Qy+Wu7k69GTx4MPv/o6OjERMTgzZt2mDHjh1QKBQu7BkhDcfEiRNx5swZpKWluborhDQoNDYcR+UrxC5SqRQRERHo1asXlixZgm7duuGjjz5CUFAQdDodioqKzNrfvHkTQUFBrumsk5w4cQJ5eXno2bMnxGIxxGIxfv31V6xatQpisRiBgYFN9r1X5+vri3vuuQdZWVmN+r+3SqWCSCSyusO+MfTdlUyfDX1ud6WkpGDv3r345Zdf0Lp1a3Z5Yx4ftdUcx5c9YyMoKAh5eXlm6w0GA27fvm3Whmsf1Y/B16b6elt9qQ+1GRu1+RyUSiUUCoVd52FDHqc0KScOqaysREVFBXr16gWJRILU1FR23cWLF5GTk4PY2FgX9rD2Hn74YWRmZuLUqVPsT+/evTFy5Ej2/zfV916dRqPB5cuXERwc3Kj/e0ulUvTq1cus75WVlUhNTW3wfXel8PBwBAUFmX1uarUav//+e7P73BiGQUpKCnbv3o0DBw5YlRw05vFRW81xfNkzNmJjY1FUVIQTJ06wbQ4cOIDKykrExMSwbQ4dOgS9Xs+22b9/Pzp06AA/Pz+2TfXjmNqYjuPqceqMsREbG4vMzEyzf8Ts378fSqUSnTt3ZtsIfQ72nIcNepy69DZT0ihMnz6d+fXXX5ns7GwmIyODmT59OuPm5sb89NNPDMNURQuFhYUxBw4cYI4fP87ExsYysbGxLu513aievsIwTfO9v/nmm8zBgweZ7Oxs5siRI8yAAQMYlUrF5OXlMQzTuN/zl19+ychkMmbTpk3MuXPnmAkTJjC+vr5md/s3RyUlJUx6ejqTnp7OAGBWrFjBpKenM//88w/DMFVRa76+vszXX3/NZGRkMMOHD2+WkYivvPIK4+Pjwxw8eNAsMrSsrIxt05jHR201xfHljLExaNAgpkePHszvv//OpKWlMZGRkWaRiEVFRUxgYCDz/PPPM2fOnGG+/PJLxsPDwyoSUSwWM++//z5z/vx5Zu7cuZyRiK4ap84YG6ZIxIEDBzKnTp1i9u3bx7Rs2ZIzEvHtt99mzp8/z6xdu5YzEtHWedhQxylNyolNY8eOZdq0acNIpVKmZcuWzMMPP8xOyBmGYcrLy5lXX32V8fPzYzw8PJikpCTmxo0bLuxx3bGclDfF9/70008zwcHBjFQqZVq1asU8/fTTTFZWFru+sb/n1atXM2FhYYxUKmX69OnDHDt2zNVdcrlffvmFAWD1M2rUKIZhquLWZs+ezQQGBjIymYx5+OGHmYsXL7q20y7A9RkBYDZu3Mi2aezjo7aa2vhyxtgoKChgRowYwXh5eTFKpZIZM2YMU1JSYtbm9OnTTHx8PCOTyZhWrVoxS5cuterLjh07mHvuuYeRSqVMly5dmO+++85svSvHqbPGxpUrV5jBgwczCoWCUalUzJtvvsno9XqzNr/88gvTvXt3RiqVMu3atTM7homt87ChjlM3hmGY+vtenhBCCCGEEGKJasoJIYQQQghxMZqUE0IIIYQQ4mI0KSeEEEIIIcTFaFJOCCGEEEKIi9GknBBCCCGEEBejSTkhhBBCCCEuRpNyQgghhBBCXIwm5YQQQgTt2bMHEREREIlEeP31113dHYe0bdsWK1eudHU3CHGaTZs2wdfX19XdIE5Ek3LSpB09ehQikQhDhgxxdVdIM8MwDAYMGICEhASrdR9//DF8fX1x7do1F/Ss5l566SU88cQTuHr1KhYsWMDZpm3btnBzc7P6Wbp0aT33ltuff/6JCRMmuLobhLBu3bqFV155BWFhYZDJZAgKCkJCQgKOHDni6q4RFxG7ugOE1KX169dj0qRJWL9+Pa5fv46QkBBXd4k0E25ubti4cSOioqLwn//8By+99BIAIDs7G1OnTsUnn3yC1q1bO/WYer0eEonEqfvUaDTIy8tDQkKCzfEzf/58jB8/3myZt7e3U/tTUzqdDlKpFC1btnRpPwixlJycDJ1Oh82bN6Ndu3a4efMmUlNTUVBQUG99MI0P0jDQN+WkydJoNNi+fTteeeUVDBkyBJs2bTJb/8033yAyMhJyuRwPPvggNm/eDDc3NxQVFbFt0tLS0K9fPygUCoSGhmLy5MkoLS2t3zdCGq3Q0FB89NFHeOutt5CdnQ2GYTBu3DgMHDgQPXr0wODBg+Hl5YXAwEA8//zzyM/PZ7fdt28f4uPj4evrC39/fwwdOhSXL19m11+5cgVubm7Yvn077r//fsjlcmzZsgX//PMPhg0bBj8/P3h6eqJLly74/vvveftYWFiIF154AX5+fvDw8MDgwYNx6dIlAMDBgwfZSfVDDz0ENzc3HDx4kHdf3t7eCAoKMvvx9PQEUDVhDwkJMZtwDBkyBA8++CAqKysBVP1D5pNPPsHgwYOhUCjQrl07/O9//zM7xtWrV/HUU0/B19cXLVq0wPDhw3HlyhV2/ejRo5GYmIhFixYhJCQEHTp0AGBdvlJUVIQXX3wRLVu2hFKpxEMPPYTTp0+z69999110794d//d//4e2bdvCx8cHzzzzDEpKStg2lZWVWL58OSIiIiCTyRAWFoZFixbZ3VfSfBUVFeHw4cNYtmwZHnzwQbRp0wZ9+vTBjBkz8NhjjwEAVqxYgaioKHh6eiI0NBSvvvoqNBoN7z4vX76M4cOHIzAwEF5eXrj33nvx888/m7Vp27YtFixYgBdeeAFKpRITJkzAQw89hJSUFLN2t27dglQqRWpqqvPfPOFFk3LSZO3YsQMdO3ZEhw4d8Nxzz2HDhg1gGAZA1beVTzzxBBITE3H69Gm89NJLmDlzptn2ly9fxqBBg5CcnIyMjAxs374daWlpVr+8CBEyatQoPPzwwxg7dizWrFmDM2fO4D//+Q8eeugh9OjRA8ePH8e+fftw8+ZNPPXUU+x2paWlmDJlCo4fP47U1FS4u7sjKSmJncCaTJ8+Ha+99hrOnz+PhIQETJw4ERUVFTh06BAyMzOxbNkyeHl58fZv9OjROH78OL755hscPXoUDMPg0UcfhV6vx3333YeLFy8CAHbt2oUbN27gvvvuc+hzmDlzJtq2bYsXX3wRALB27Vr89ttv2Lx5M9zd716KZs+ejeTkZJw+fRojR47EM888g/PnzwOo+ktAQkICvL29cfjwYRw5cgReXl4YNGgQdDodu4/U1FRcvHgR+/fvx969ezn78+STTyIvLw8//PADTpw4gZ49e+Lhhx/G7du32TaXL1/Gnj17sHfvXuzduxe//vqrWTnOjBkzsHTpUsyePRvnzp3D1q1bERgYWKO+kubJy8sLXl5e2LNnDyoqKjjbuLu7Y9WqVTh79iw2b96MAwcOYOrUqbz71Gg0ePTRR5Gamor09HQMGjQIw4YNQ05Ojlm7999/H926dUN6ejpmz56NF198EVu3bjXrx3//+1+0atUKDz30kHPeMLEPQ0gTdd999zErV65kGIZh9Ho9o1KpmF9++YVhGIaZNm0a07VrV7P2M2fOZAAwhYWFDMMwzLhx45gJEyaYtTl8+DDj7u7OlJeX13n/SdNx8+ZNRqVSMe7u7szu3buZBQsWMAMHDjRrc/XqVQYAc/HiRc593Lp1iwHAZGZmMgzDMNnZ2QwA9hw3iYqKYt599127+vXXX38xAJgjR46wy/Lz8xmFQsHs2LGDYRiGKSwsZACwY4dPmzZtGKlUynh6epr9HDp0iG1z+fJlxtvbm5k2bRqjUCiYLVu2mO0DAPPyyy+bLYuJiWFeeeUVhmEY5v/+7/+YDh06MJWVlez6iooKRqFQMD/++CPDMAwzatQoJjAwkKmoqLDq34cffsgwTNU4ViqVjFarNWvTvn175j//+Q/DMAwzd+5cxsPDg1Gr1ez6t99+m4mJiWEYhmHUajUjk8mYzz77jPPzsKevpHn73//+x/j5+TFyuZy57777mBkzZjCnT5/mbb9z507G39+ffb1x40bGx8dH8BhdunRhVq9ezb5u06YNk5iYaNamvLyc8fPzY7Zv384ui46Otvv3CHEe+qacNEkXL17EH3/8gREjRgAAxGIxnn76aaxfv55df++995pt06dPH7PXp0+fxqZNm9hvNLy8vJCQkIDKykpkZ2fXzxshTUJAQABeeukldOrUif3rzC+//GJ2bnXs2BEA2BKVS5cuYcSIEWjXrh2USiXatm0LAFbfevXu3dvs9eTJk7Fw4ULExcVh7ty5yMjI4O3X+fPnIRaLERMTwy7z9/dHhw4d2G+na+Ltt9/GqVOnzH6q969du3Z4//33sWzZMjz22GN49tlnrfYRGxtr9drUl9OnTyMrKwve3t7s59aiRQtotVqz0p6oqCjBOtnTp09Do9HA39/f7L9Bdna22X7atm1rVhMfHByMvLw8AFWfXUVFBR5++GHeY9jTV9J8JScn4/r16/jmm28waNAgHDx4ED179mRLLX/++Wc8/PDDaNWqFby9vfH888+joKAAZWVlnPvTaDR466230KlTJ/j6+sLLywvnz5+3+TtDLpfj+eefx4YNGwAAJ0+exJkzZzB69Ginv2cijG70JE3S+vXrYTAYzG5MYxgGMpkMa9assWsfGo0GL730EiZPnmy1LiwszGl9Jc2DWCyGWFz1K1ej0WDYsGFYtmyZVbvg4GAAwLBhw9CmTRt89tlnCAkJQWVlJbp27WpV+mCq2TZ58cUXkZCQgO+++w4//fQTlixZgg8++ACTJk2qo3d2l0qlQkREhGCbQ4cOQSQS4cqVKzAYDOxnYg+NRoNevXphy5YtVuuq38hp+Zlw7Sc4OJizPr56xJzlTbNubm5s+ZBCoXBKX0nzJpfL8cgjj+CRRx5hS0nmzp2LBx54AEOHDsUrr7yCRYsWoUWLFkhLS8O4ceOg0+ng4eFhta+33noL+/fvx/vvv4+IiAgoFAo88cQTNn9nAFW/N7p3745r165h48aNeOihh9CmTZs6e9+EG03KSZNjMBjwxRdf4IMPPsDAgQPN1iUmJmLbtm3o0KGD1c1vf/75p9nrnj174ty5czYnGYTUVM+ePbFr1y60bduWc1JaUFCAixcv4rPPPkO/fv0AVN10bK/Q0FC8/PLLePnllzFjxgx89tlnnJPyTp06wWAw4Pfff2drxU3H7ty5s4Pvjt/27dvx1Vdf4eDBg3jqqaewYMECzJs3z6zNsWPH8MILL5i97tGjB4Cqz2379u0ICAiAUql0uB89e/ZEbm4uxGIx+xeImoqMjIRCoUBqaipbJ295DGf0lTQvnTt3xp49e3DixAlUVlbigw8+YO+52LFjh+C2R44cwejRo5GUlASg6h+G9t5YHBUVhd69e+Ozzz7D1q1b7f7yijgXla+QJmfv3r0oLCzEuHHj0LVrV7Of5ORkrF+/Hi+99BIuXLiAadOm4a+//sKOHTvYPxm6ubkBAKZNm4bffvsNKSkpOHXqFC5duoSvv/6abvQktTZx4kTcvn0bI0aMwJ9//onLly/jxx9/xJgxY2A0GuHn5wd/f398+umnyMrKwoEDBzBlyhS79v3666/jxx9/RHZ2Nk6ePIlffvkFnTp14mwbGRmJ4cOHY/z48UhLS8Pp06fx3HPPoVWrVhg+fHiN31dJSQlyc3PNftRqNQDg2rVreOWVV7Bs2TLEx8dj48aNWLx4MY4dO2a2j507d2LDhg3466+/MHfuXPzxxx/smBs5ciRUKhWGDx+Ow4cPIzs7GwcPHsTkyZNrlPk+YMAAxMbGIjExET/99BOuXLmC3377DTNnzsTx48ft2odcLse0adMwdepUfPHFF7h8+TKOHTvGlsg5q6+kaSooKMBDDz2E//73v8jIyEB2djZ27tyJ5cuXY/jw4YiIiIBer8fq1avx999/4//+7/+wbt06wX1GRkbiq6++wqlTp3D69Gk8++yzVjeGC3nxxRexdOlSMAzDTuxJPXN1UTshzjZ06FDm0Ucf5Vz3+++/MwCY06dPM19//TUTERHByGQy5oEHHmA++eQTBoDZTZx//PEH88gjjzBeXl6Mp6cnEx0dzSxatKi+3gppQubOnct069aNff3XX38xSUlJjK+vL6NQKJiOHTsyr7/+Ontj4P79+5lOnToxMpmMiY6OZg4ePMgAYHbv3s0wzN0bPdPT082Ok5KSwrRv356RyWRMy5Ytmeeff57Jz8/n7dft27eZ559/nvHx8WEUCgWTkJDA/PXXX+z6mtzoCcDq56WXXmIqKyuZhx9+mElISDC78XHSpElM+/btmZKSEoZhqm70XLt2LfPII48wMpmMadu2rdnNZwzDMDdu3GBeeOEFRqVSMTKZjGnXrh0zfvx4pri4mGGYqhs9hw8fztk/042eDFN1o+akSZOYkJAQRiKRMKGhoczIkSOZnJwchmGs/3sxDMN8+OGHTJs2bdjXRqORWbhwIdOmTRtGIpEwYWFhzOLFi+3uK2m+tFotM336dKZnz56Mj48P4+HhwXTo0IGZNWsWU1ZWxjAMw6xYsYIJDg5mx+UXX3xhFkZgeaNndnY28+CDDzIKhYIJDQ1l1qxZw9x///3Ma6+9xraxHAfVlZSUMB4eHsyrr75aR++a2OLGMHcy4ghp5hYtWoR169bh6tWrru4KIc2Sm5sbdu/ejcTERFd3hZBm58qVK2jfvj3+/PNP9OzZ09XdaZaoppw0Wx9//DHuvfde+Pv748iRI3jvvfeoNIUQQkizotfrUVBQgFmzZqFv3740IXchmpSTZuvSpUtYuHAhbt++jbCwMLz55puYMWOGq7tFCCGE1JsjR47gwQcfxD333GP1BF1Sv6h8hRBCCCGEEBej9BVCCCGEEEJcjCblhBBCCCGEuBhNygkhhBBCCHExmpQTQgghhBDiYjQpJ4QQQgghxMVoUk4IIYQQQoiL0aScEEIIIYQQF6NJOSGEEEIIIS5Gk3JCCCGEEEJc7P8BNsvnDUUhOVcAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "auto.corr()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 198
        },
        "id": "Vmc7vpzXbvac",
        "outputId": "fad01337-b8aa-42de-c31f-c73fbe5cd36a"
      },
      "id": "Vmc7vpzXbvac",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-16-867f36f4b63d>:1: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
            "  auto.corr()\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                          Age  Years of Experience    Salary\n",
              "Age                  1.000000             0.979128  0.922335\n",
              "Years of Experience  0.979128             1.000000  0.930338\n",
              "Salary               0.922335             0.930338  1.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ff6f951b-3899-4929-9352-28a03ae2c695\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Years of Experience</th>\n",
              "      <th>Salary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.979128</td>\n",
              "      <td>0.922335</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Years of Experience</th>\n",
              "      <td>0.979128</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.930338</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Salary</th>\n",
              "      <td>0.922335</td>\n",
              "      <td>0.930338</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ff6f951b-3899-4929-9352-28a03ae2c695')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ff6f951b-3899-4929-9352-28a03ae2c695 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ff6f951b-3899-4929-9352-28a03ae2c695');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-25cd4e3e-f3cd-48dd-a3fe-bf490f1389e1\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-25cd4e3e-f3cd-48dd-a3fe-bf490f1389e1')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-25cd4e3e-f3cd-48dd-a3fe-bf490f1389e1 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Starting machine learning\n",
        "import seaborn as sns\n",
        "plt.figure(figsize=(15,5))\n",
        "sns.heatmap(auto.corr(),annot=True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 506
        },
        "id": "sRm2TmXHfz4U",
        "outputId": "de96d396-4923-4921-ccde-04d450ef3ab8"
      },
      "id": "sRm2TmXHfz4U",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-17-d8314c1d3575>:4: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
            "  sns.heatmap(auto.corr(),annot=True)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "272b64f1",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "272b64f1",
        "outputId": "c4f8f7c1-50ec-4b57-8fe5-8ef201e95908"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Age  Gender Education Level  Years of Experience    Salary\n",
              "0    32.0    Male      Bachelor's                  5.0   90000.0\n",
              "1    28.0  Female        Master's                  3.0   65000.0\n",
              "2    45.0    Male             PhD                 15.0  150000.0\n",
              "3    36.0  Female      Bachelor's                  7.0   60000.0\n",
              "4    52.0    Male        Master's                 20.0  200000.0\n",
              "..    ...     ...             ...                  ...       ...\n",
              "370  35.0  Female      Bachelor's                  8.0   85000.0\n",
              "371  43.0    Male        Master's                 19.0  170000.0\n",
              "372  29.0  Female      Bachelor's                  2.0   40000.0\n",
              "373  34.0    Male      Bachelor's                  7.0   90000.0\n",
              "374  44.0  Female             PhD                 15.0  150000.0\n",
              "\n",
              "[373 rows x 5 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8462fb04-73f7-4fed-9d3f-211b47a47820\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Education Level</th>\n",
              "      <th>Years of Experience</th>\n",
              "      <th>Salary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>32.0</td>\n",
              "      <td>Male</td>\n",
              "      <td>Bachelor's</td>\n",
              "      <td>5.0</td>\n",
              "      <td>90000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>28.0</td>\n",
              "      <td>Female</td>\n",
              "      <td>Master's</td>\n",
              "      <td>3.0</td>\n",
              "      <td>65000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>45.0</td>\n",
              "      <td>Male</td>\n",
              "      <td>PhD</td>\n",
              "      <td>15.0</td>\n",
              "      <td>150000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>36.0</td>\n",
              "      <td>Female</td>\n",
              "      <td>Bachelor's</td>\n",
              "      <td>7.0</td>\n",
              "      <td>60000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>52.0</td>\n",
              "      <td>Male</td>\n",
              "      <td>Master's</td>\n",
              "      <td>20.0</td>\n",
              "      <td>200000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>370</th>\n",
              "      <td>35.0</td>\n",
              "      <td>Female</td>\n",
              "      <td>Bachelor's</td>\n",
              "      <td>8.0</td>\n",
              "      <td>85000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>371</th>\n",
              "      <td>43.0</td>\n",
              "      <td>Male</td>\n",
              "      <td>Master's</td>\n",
              "      <td>19.0</td>\n",
              "      <td>170000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>372</th>\n",
              "      <td>29.0</td>\n",
              "      <td>Female</td>\n",
              "      <td>Bachelor's</td>\n",
              "      <td>2.0</td>\n",
              "      <td>40000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>373</th>\n",
              "      <td>34.0</td>\n",
              "      <td>Male</td>\n",
              "      <td>Bachelor's</td>\n",
              "      <td>7.0</td>\n",
              "      <td>90000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>374</th>\n",
              "      <td>44.0</td>\n",
              "      <td>Female</td>\n",
              "      <td>PhD</td>\n",
              "      <td>15.0</td>\n",
              "      <td>150000.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>373 rows Ã— 5 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8462fb04-73f7-4fed-9d3f-211b47a47820')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8462fb04-73f7-4fed-9d3f-211b47a47820 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8462fb04-73f7-4fed-9d3f-211b47a47820');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-21cef98c-8b33-413f-a2d5-8cfd99a2ad14\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-21cef98c-8b33-413f-a2d5-8cfd99a2ad14')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-21cef98c-8b33-413f-a2d5-8cfd99a2ad14 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ],
      "source": [
        "auto"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "W7q-5KVRcK70",
      "metadata": {
        "id": "W7q-5KVRcK70"
      },
      "outputs": [],
      "source": [
        "# Dimension reduction"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6b76c55f",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "6b76c55f",
        "outputId": "c850e05f-a701-4037-e2f4-31f7b7c349fe"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Male\n",
              "0       1\n",
              "1       0\n",
              "2       1\n",
              "3       0\n",
              "4       1\n",
              "..    ...\n",
              "370     0\n",
              "371     1\n",
              "372     0\n",
              "373     1\n",
              "374     0\n",
              "\n",
              "[373 rows x 1 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2d736b63-0d0c-4efb-aeb0-1f74d41509a5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Male</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>370</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>371</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>372</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>373</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>374</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>373 rows Ã— 1 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2d736b63-0d0c-4efb-aeb0-1f74d41509a5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2d736b63-0d0c-4efb-aeb0-1f74d41509a5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2d736b63-0d0c-4efb-aeb0-1f74d41509a5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d5301185-e4d3-4d4e-ba14-dd3982955d54\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d5301185-e4d3-4d4e-ba14-dd3982955d54')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d5301185-e4d3-4d4e-ba14-dd3982955d54 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ],
      "source": [
        "gender = pd.get_dummies(auto['Gender'], drop_first = True)\n",
        "gender"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3989a793",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "3989a793",
        "outputId": "1167bc5f-2b7e-4374-8217-84ac8c026bd0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Age  Gender Education Level  Years of Experience    Salary  Male\n",
              "0    32.0    Male      Bachelor's                  5.0   90000.0     1\n",
              "1    28.0  Female        Master's                  3.0   65000.0     0\n",
              "2    45.0    Male             PhD                 15.0  150000.0     1\n",
              "3    36.0  Female      Bachelor's                  7.0   60000.0     0\n",
              "4    52.0    Male        Master's                 20.0  200000.0     1\n",
              "..    ...     ...             ...                  ...       ...   ...\n",
              "370  35.0  Female      Bachelor's                  8.0   85000.0     0\n",
              "371  43.0    Male        Master's                 19.0  170000.0     1\n",
              "372  29.0  Female      Bachelor's                  2.0   40000.0     0\n",
              "373  34.0    Male      Bachelor's                  7.0   90000.0     1\n",
              "374  44.0  Female             PhD                 15.0  150000.0     0\n",
              "\n",
              "[373 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-eed41af6-3bf5-4d28-b9fd-ae5de623ae71\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Education Level</th>\n",
              "      <th>Years of Experience</th>\n",
              "      <th>Salary</th>\n",
              "      <th>Male</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>32.0</td>\n",
              "      <td>Male</td>\n",
              "      <td>Bachelor's</td>\n",
              "      <td>5.0</td>\n",
              "      <td>90000.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>28.0</td>\n",
              "      <td>Female</td>\n",
              "      <td>Master's</td>\n",
              "      <td>3.0</td>\n",
              "      <td>65000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>45.0</td>\n",
              "      <td>Male</td>\n",
              "      <td>PhD</td>\n",
              "      <td>15.0</td>\n",
              "      <td>150000.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>36.0</td>\n",
              "      <td>Female</td>\n",
              "      <td>Bachelor's</td>\n",
              "      <td>7.0</td>\n",
              "      <td>60000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>52.0</td>\n",
              "      <td>Male</td>\n",
              "      <td>Master's</td>\n",
              "      <td>20.0</td>\n",
              "      <td>200000.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>370</th>\n",
              "      <td>35.0</td>\n",
              "      <td>Female</td>\n",
              "      <td>Bachelor's</td>\n",
              "      <td>8.0</td>\n",
              "      <td>85000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>371</th>\n",
              "      <td>43.0</td>\n",
              "      <td>Male</td>\n",
              "      <td>Master's</td>\n",
              "      <td>19.0</td>\n",
              "      <td>170000.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>372</th>\n",
              "      <td>29.0</td>\n",
              "      <td>Female</td>\n",
              "      <td>Bachelor's</td>\n",
              "      <td>2.0</td>\n",
              "      <td>40000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>373</th>\n",
              "      <td>34.0</td>\n",
              "      <td>Male</td>\n",
              "      <td>Bachelor's</td>\n",
              "      <td>7.0</td>\n",
              "      <td>90000.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>374</th>\n",
              "      <td>44.0</td>\n",
              "      <td>Female</td>\n",
              "      <td>PhD</td>\n",
              "      <td>15.0</td>\n",
              "      <td>150000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>373 rows Ã— 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eed41af6-3bf5-4d28-b9fd-ae5de623ae71')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-eed41af6-3bf5-4d28-b9fd-ae5de623ae71 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-eed41af6-3bf5-4d28-b9fd-ae5de623ae71');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b2c52451-6f4b-4f7d-9af6-397b7f78244b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b2c52451-6f4b-4f7d-9af6-397b7f78244b')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b2c52451-6f4b-4f7d-9af6-397b7f78244b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ],
      "source": [
        "auto = pd.concat([auto, gender], axis = 1)\n",
        "auto"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7ca6c73c",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "7ca6c73c",
        "outputId": "c65660c9-feb2-4cd2-bb5b-c83a3df0197a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Bachelor's  Master's  PhD\n",
              "0             1         0    0\n",
              "1             0         1    0\n",
              "2             0         0    1\n",
              "3             1         0    0\n",
              "4             0         1    0\n",
              "..          ...       ...  ...\n",
              "370           1         0    0\n",
              "371           0         1    0\n",
              "372           1         0    0\n",
              "373           1         0    0\n",
              "374           0         0    1\n",
              "\n",
              "[373 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4a6c96df-fcd7-4d72-afb8-d9a53c3f00d8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Bachelor's</th>\n",
              "      <th>Master's</th>\n",
              "      <th>PhD</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>370</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>371</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>372</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>373</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>374</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>373 rows Ã— 3 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4a6c96df-fcd7-4d72-afb8-d9a53c3f00d8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4a6c96df-fcd7-4d72-afb8-d9a53c3f00d8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4a6c96df-fcd7-4d72-afb8-d9a53c3f00d8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-53dec180-5f20-49ba-8dee-0d7aea3b77b0\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-53dec180-5f20-49ba-8dee-0d7aea3b77b0')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-53dec180-5f20-49ba-8dee-0d7aea3b77b0 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ],
      "source": [
        "education = pd.get_dummies(auto['Education Level'], drop_first = False)\n",
        "education"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "008f50f4",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "008f50f4",
        "outputId": "9231e41a-0811-4d10-e07b-8e812f341ae8"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Age  Gender Education Level  Years of Experience    Salary  Male  \\\n",
              "0    32.0    Male      Bachelor's                  5.0   90000.0     1   \n",
              "1    28.0  Female        Master's                  3.0   65000.0     0   \n",
              "2    45.0    Male             PhD                 15.0  150000.0     1   \n",
              "3    36.0  Female      Bachelor's                  7.0   60000.0     0   \n",
              "4    52.0    Male        Master's                 20.0  200000.0     1   \n",
              "..    ...     ...             ...                  ...       ...   ...   \n",
              "370  35.0  Female      Bachelor's                  8.0   85000.0     0   \n",
              "371  43.0    Male        Master's                 19.0  170000.0     1   \n",
              "372  29.0  Female      Bachelor's                  2.0   40000.0     0   \n",
              "373  34.0    Male      Bachelor's                  7.0   90000.0     1   \n",
              "374  44.0  Female             PhD                 15.0  150000.0     0   \n",
              "\n",
              "     Bachelor's  Master's  PhD  \n",
              "0             1         0    0  \n",
              "1             0         1    0  \n",
              "2             0         0    1  \n",
              "3             1         0    0  \n",
              "4             0         1    0  \n",
              "..          ...       ...  ...  \n",
              "370           1         0    0  \n",
              "371           0         1    0  \n",
              "372           1         0    0  \n",
              "373           1         0    0  \n",
              "374           0         0    1  \n",
              "\n",
              "[373 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-85b54728-3ef2-424f-b3f6-d87e41523084\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Education Level</th>\n",
              "      <th>Years of Experience</th>\n",
              "      <th>Salary</th>\n",
              "      <th>Male</th>\n",
              "      <th>Bachelor's</th>\n",
              "      <th>Master's</th>\n",
              "      <th>PhD</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>32.0</td>\n",
              "      <td>Male</td>\n",
              "      <td>Bachelor's</td>\n",
              "      <td>5.0</td>\n",
              "      <td>90000.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>28.0</td>\n",
              "      <td>Female</td>\n",
              "      <td>Master's</td>\n",
              "      <td>3.0</td>\n",
              "      <td>65000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>45.0</td>\n",
              "      <td>Male</td>\n",
              "      <td>PhD</td>\n",
              "      <td>15.0</td>\n",
              "      <td>150000.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>36.0</td>\n",
              "      <td>Female</td>\n",
              "      <td>Bachelor's</td>\n",
              "      <td>7.0</td>\n",
              "      <td>60000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>52.0</td>\n",
              "      <td>Male</td>\n",
              "      <td>Master's</td>\n",
              "      <td>20.0</td>\n",
              "      <td>200000.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>370</th>\n",
              "      <td>35.0</td>\n",
              "      <td>Female</td>\n",
              "      <td>Bachelor's</td>\n",
              "      <td>8.0</td>\n",
              "      <td>85000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>371</th>\n",
              "      <td>43.0</td>\n",
              "      <td>Male</td>\n",
              "      <td>Master's</td>\n",
              "      <td>19.0</td>\n",
              "      <td>170000.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>372</th>\n",
              "      <td>29.0</td>\n",
              "      <td>Female</td>\n",
              "      <td>Bachelor's</td>\n",
              "      <td>2.0</td>\n",
              "      <td>40000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>373</th>\n",
              "      <td>34.0</td>\n",
              "      <td>Male</td>\n",
              "      <td>Bachelor's</td>\n",
              "      <td>7.0</td>\n",
              "      <td>90000.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>374</th>\n",
              "      <td>44.0</td>\n",
              "      <td>Female</td>\n",
              "      <td>PhD</td>\n",
              "      <td>15.0</td>\n",
              "      <td>150000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>373 rows Ã— 9 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-85b54728-3ef2-424f-b3f6-d87e41523084')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-85b54728-3ef2-424f-b3f6-d87e41523084 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-85b54728-3ef2-424f-b3f6-d87e41523084');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e09f5f46-bf87-4ad8-85b0-c764a0a90fde\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e09f5f46-bf87-4ad8-85b0-c764a0a90fde')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e09f5f46-bf87-4ad8-85b0-c764a0a90fde button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ],
      "source": [
        "auto = pd.concat([auto, education], axis = 1)\n",
        "auto"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6ba62593",
      "metadata": {
        "id": "6ba62593"
      },
      "outputs": [],
      "source": [
        "# auto=df[['Age', 'Gender', 'Education Level', 'Job Title', 'Years of Experience',\n",
        "#        'Salary']]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "cece61ad",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "cece61ad",
        "outputId": "c962c4dc-0725-4c59-8c41-743531346bf0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Age  Years of Experience    Salary  Male  Bachelor's  Master's  PhD\n",
              "0    32.0                  5.0   90000.0     1           1         0    0\n",
              "1    28.0                  3.0   65000.0     0           0         1    0\n",
              "2    45.0                 15.0  150000.0     1           0         0    1\n",
              "3    36.0                  7.0   60000.0     0           1         0    0\n",
              "4    52.0                 20.0  200000.0     1           0         1    0\n",
              "..    ...                  ...       ...   ...         ...       ...  ...\n",
              "370  35.0                  8.0   85000.0     0           1         0    0\n",
              "371  43.0                 19.0  170000.0     1           0         1    0\n",
              "372  29.0                  2.0   40000.0     0           1         0    0\n",
              "373  34.0                  7.0   90000.0     1           1         0    0\n",
              "374  44.0                 15.0  150000.0     0           0         0    1\n",
              "\n",
              "[373 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c21b301f-cc6d-4846-9c3f-487ba7d513a8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Years of Experience</th>\n",
              "      <th>Salary</th>\n",
              "      <th>Male</th>\n",
              "      <th>Bachelor's</th>\n",
              "      <th>Master's</th>\n",
              "      <th>PhD</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>32.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>90000.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>28.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>65000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>45.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>150000.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>36.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>60000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>52.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>200000.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>370</th>\n",
              "      <td>35.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>85000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>371</th>\n",
              "      <td>43.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>170000.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>372</th>\n",
              "      <td>29.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>40000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>373</th>\n",
              "      <td>34.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>90000.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>374</th>\n",
              "      <td>44.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>150000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>373 rows Ã— 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c21b301f-cc6d-4846-9c3f-487ba7d513a8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c21b301f-cc6d-4846-9c3f-487ba7d513a8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c21b301f-cc6d-4846-9c3f-487ba7d513a8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-200fb2d2-1442-4cfe-be4d-7848db2bef48\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-200fb2d2-1442-4cfe-be4d-7848db2bef48')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-200fb2d2-1442-4cfe-be4d-7848db2bef48 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ],
      "source": [
        "auto = auto.drop(['Gender','Education Level'],axis = 1)\n",
        "auto"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c9b60bcb",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "id": "c9b60bcb",
        "outputId": "53695e82-e312-443e-e3e7-04c77cc55072"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                          Age  Years of Experience    Salary      Male  \\\n",
              "Age                  1.000000             0.979128  0.922335 -0.020324   \n",
              "Years of Experience  0.979128             1.000000  0.930338  0.002884   \n",
              "Salary               0.922335             0.930338  1.000000  0.071106   \n",
              "Male                -0.020324             0.002884  0.071106  1.000000   \n",
              "Bachelor's          -0.541733            -0.573775 -0.657181  0.049259   \n",
              "Master's             0.281897             0.306961  0.362061 -0.036219   \n",
              "PhD                  0.411183             0.424752  0.473073 -0.023827   \n",
              "\n",
              "                     Bachelor's  Master's       PhD  \n",
              "Age                   -0.541733  0.281897  0.411183  \n",
              "Years of Experience   -0.573775  0.306961  0.424752  \n",
              "Salary                -0.657181  0.362061  0.473073  \n",
              "Male                   0.049259 -0.036219 -0.023827  \n",
              "Bachelor's             1.000000 -0.731944 -0.487964  \n",
              "Master's              -0.731944  1.000000 -0.237577  \n",
              "PhD                   -0.487964 -0.237577  1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cbb46032-af25-4398-8cac-57839ef0dd99\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Years of Experience</th>\n",
              "      <th>Salary</th>\n",
              "      <th>Male</th>\n",
              "      <th>Bachelor's</th>\n",
              "      <th>Master's</th>\n",
              "      <th>PhD</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.979128</td>\n",
              "      <td>0.922335</td>\n",
              "      <td>-0.020324</td>\n",
              "      <td>-0.541733</td>\n",
              "      <td>0.281897</td>\n",
              "      <td>0.411183</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Years of Experience</th>\n",
              "      <td>0.979128</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.930338</td>\n",
              "      <td>0.002884</td>\n",
              "      <td>-0.573775</td>\n",
              "      <td>0.306961</td>\n",
              "      <td>0.424752</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Salary</th>\n",
              "      <td>0.922335</td>\n",
              "      <td>0.930338</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.071106</td>\n",
              "      <td>-0.657181</td>\n",
              "      <td>0.362061</td>\n",
              "      <td>0.473073</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Male</th>\n",
              "      <td>-0.020324</td>\n",
              "      <td>0.002884</td>\n",
              "      <td>0.071106</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.049259</td>\n",
              "      <td>-0.036219</td>\n",
              "      <td>-0.023827</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Bachelor's</th>\n",
              "      <td>-0.541733</td>\n",
              "      <td>-0.573775</td>\n",
              "      <td>-0.657181</td>\n",
              "      <td>0.049259</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.731944</td>\n",
              "      <td>-0.487964</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Master's</th>\n",
              "      <td>0.281897</td>\n",
              "      <td>0.306961</td>\n",
              "      <td>0.362061</td>\n",
              "      <td>-0.036219</td>\n",
              "      <td>-0.731944</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.237577</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PhD</th>\n",
              "      <td>0.411183</td>\n",
              "      <td>0.424752</td>\n",
              "      <td>0.473073</td>\n",
              "      <td>-0.023827</td>\n",
              "      <td>-0.487964</td>\n",
              "      <td>-0.237577</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cbb46032-af25-4398-8cac-57839ef0dd99')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cbb46032-af25-4398-8cac-57839ef0dd99 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cbb46032-af25-4398-8cac-57839ef0dd99');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6b5dcbb2-ac43-4c7a-a53e-5db3e04ed37b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6b5dcbb2-ac43-4c7a-a53e-5db3e04ed37b')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6b5dcbb2-ac43-4c7a-a53e-5db3e04ed37b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ],
      "source": [
        "auto.corr()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ULyeUPZhgqcY",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 414
        },
        "id": "ULyeUPZhgqcY",
        "outputId": "246ac6ea-566e-4b15-de2d-4fa90f74b2c5"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Starting machine learning\n",
        "import seaborn as sns\n",
        "plt.figure(figsize=(15,5))\n",
        "sns.heatmap(auto.corr(),annot=True)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.pairplot(auto)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "jp6CpHLKhDHr",
        "outputId": "d01976dd-7403-408c-d7ef-e3224246809e"
      },
      "id": "jp6CpHLKhDHr",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.PairGrid at 0x786e95211cf0>"
            ]
          },
          "metadata": {},
          "execution_count": 38
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1500 with 42 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "eXmoCoygU6Uj",
      "metadata": {
        "id": "eXmoCoygU6Uj",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "outputId": "720ccd17-d951-4ba0-c1d7-9c271220d691"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Age  Years of Experience    Salary  Bachelor's  Master's  PhD\n",
              "0    32.0                  5.0   90000.0           1         0    0\n",
              "1    28.0                  3.0   65000.0           0         1    0\n",
              "2    45.0                 15.0  150000.0           0         0    1\n",
              "3    36.0                  7.0   60000.0           1         0    0\n",
              "4    52.0                 20.0  200000.0           0         1    0\n",
              "..    ...                  ...       ...         ...       ...  ...\n",
              "370  35.0                  8.0   85000.0           1         0    0\n",
              "371  43.0                 19.0  170000.0           0         1    0\n",
              "372  29.0                  2.0   40000.0           1         0    0\n",
              "373  34.0                  7.0   90000.0           1         0    0\n",
              "374  44.0                 15.0  150000.0           0         0    1\n",
              "\n",
              "[373 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e846fb99-0b69-4605-ada8-cdf003e5bf1b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Years of Experience</th>\n",
              "      <th>Salary</th>\n",
              "      <th>Bachelor's</th>\n",
              "      <th>Master's</th>\n",
              "      <th>PhD</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>32.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>90000.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>28.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>65000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>45.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>150000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>36.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>60000.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>52.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>200000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>370</th>\n",
              "      <td>35.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>85000.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>371</th>\n",
              "      <td>43.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>170000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>372</th>\n",
              "      <td>29.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>40000.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>373</th>\n",
              "      <td>34.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>90000.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>374</th>\n",
              "      <td>44.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>150000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>373 rows Ã— 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e846fb99-0b69-4605-ada8-cdf003e5bf1b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e846fb99-0b69-4605-ada8-cdf003e5bf1b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e846fb99-0b69-4605-ada8-cdf003e5bf1b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b53f5d4f-9b73-45d7-aacc-53bb7fa61d38\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b53f5d4f-9b73-45d7-aacc-53bb7fa61d38')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b53f5d4f-9b73-45d7-aacc-53bb7fa61d38 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ],
      "source": [
        "auto = auto.drop(['Male'],axis = 1)\n",
        "auto"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "272b4a93",
      "metadata": {
        "id": "272b4a93"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# We specify this so that the train and test data set always have the same rows, respectively\n",
        "df_train, df_test = train_test_split(auto, train_size = 0.85, test_size = 0.15, random_state = 1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "zIYTRyt0h468",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zIYTRyt0h468",
        "outputId": "a79c8ba8-0603-42d6-b305-8491a294b598"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(317, 6)"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ],
      "source": [
        "df_train.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6pAb4lY8h_k7",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6pAb4lY8h_k7",
        "outputId": "a7d7553f-b5a8-4b6d-8c69-f49016aaf9c0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(56, 6)"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ],
      "source": [
        "df_test.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1PsJS-DATi50",
      "metadata": {
        "id": "1PsJS-DATi50"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "Ud-SlPkaFyr1",
      "metadata": {
        "id": "Ud-SlPkaFyr1"
      },
      "outputs": [],
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "X_train = df_train[['Age','Years of Experience',\"Bachelor's\",\n",
        "                    \"Master's\",\"PhD\"]]\n",
        "\n",
        "y_train = df_train['Salary']\n",
        "# df_test_predict = X_train.iloc[0:1]\n",
        "lm = LinearRegression()\n",
        "model = lm.fit(X_train, y_train)\n",
        "\n",
        "# model.predict(df_test_predict)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_test.iloc[10:11]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "id": "WtParTR2ePF0",
        "outputId": "2a6b613a-7361-438f-f9e1-dda975db8739"
      },
      "id": "WtParTR2ePF0",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Age  Years of Experience   Salary  Bachelor's  Master's  PhD\n",
              "314  35.0                  8.0  85000.0           1         0    0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6b615605-4492-4015-9e5c-6efe8be76061\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Years of Experience</th>\n",
              "      <th>Salary</th>\n",
              "      <th>Bachelor's</th>\n",
              "      <th>Master's</th>\n",
              "      <th>PhD</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>314</th>\n",
              "      <td>35.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>85000.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6b615605-4492-4015-9e5c-6efe8be76061')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6b615605-4492-4015-9e5c-6efe8be76061 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6b615605-4492-4015-9e5c-6efe8be76061');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5SZYJSAXPSv3",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 133
        },
        "id": "5SZYJSAXPSv3",
        "outputId": "31ff736b-af1e-4523-a774-322ed37d87cd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Actual Salary 314    85000.0\n",
            "Name: Salary, dtype: float64\n",
            "predicted Salary [80297.64326552]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Age  Years of Experience  Bachelor's  Master's  PhD\n",
              "314  35.0                  8.0           1         0    0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-95e23ec0-fbb2-4646-985a-25739ff90556\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Years of Experience</th>\n",
              "      <th>Bachelor's</th>\n",
              "      <th>Master's</th>\n",
              "      <th>PhD</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>314</th>\n",
              "      <td>35.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-95e23ec0-fbb2-4646-985a-25739ff90556')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-95e23ec0-fbb2-4646-985a-25739ff90556 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-95e23ec0-fbb2-4646-985a-25739ff90556');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ],
      "source": [
        "# Testing\n",
        "data = df_test.iloc[10:11]\n",
        "actual_salary = data.pop('Salary')\n",
        "\n",
        "# # print(data)\n",
        "predicted_salary = model.predict(data)\n",
        "print(\"Actual Salary\",actual_salary)\n",
        "print(\"predicted Salary\",predicted_salary)\n",
        "\n",
        "# print(df_test.iloc[0:1])\n",
        "data"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "vG4OfqmTecZd"
      },
      "id": "vG4OfqmTecZd",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "3hWBok1Oebyj"
      },
      "id": "3hWBok1Oebyj",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Vg3q5Ek1eP3C"
      },
      "id": "Vg3q5Ek1eP3C",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data = {'Age':[40],\n",
        "        'Years of Experience':[10.5],\n",
        "        \"Bachelor's\":[0],\n",
        "        \"Master's\":[0],\n",
        "        \"PhD\":[1]}\n",
        "df = pd.DataFrame(data)\n",
        "predicted_salary = model.predict(df)\n",
        "# print(\"Actual Salary\",actual_salary)\n",
        "print(\"predicted Salary\",predicted_salary)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KdmGg8zVl-jY",
        "outputId": "d5718a6f-d9cd-4d5d-b427-07702ab3f452"
      },
      "id": "KdmGg8zVl-jY",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "predicted Salary [125485.98171601]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "vxlSv2utk-PV"
      },
      "id": "vxlSv2utk-PV",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "08f6653a",
      "metadata": {
        "id": "08f6653a",
        "outputId": "db17f615-7d31-4026-945e-d47e8f42cd76",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(317,)"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ],
      "source": [
        "y_train.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b1d2ece2",
      "metadata": {
        "id": "b1d2ece2",
        "outputId": "8be0782f-ff17-4dee-c8a3-186b3a284940",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(317,)"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ],
      "source": [
        "model.predict(X_train).shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "sz41ycd5fd7-",
      "metadata": {
        "id": "sz41ycd5fd7-",
        "outputId": "bd12fee4-8598-467c-f17c-c5e7b6787f59",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.scatter(y_train,model.predict(X_train),color = 'red')\n",
        "plt.xlabel('Actual Salary')\n",
        "plt.ylabel('Predicted Salary')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "5eDjfO0DfgIt"
      },
      "id": "5eDjfO0DfgIt",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.12"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}